version "3.1.0"

#include "zscript/tsp/misc/misc_tokenizer.zsc"

#include "zscript/tsp/items_gbd.zsc"

#include "zscript/tsp/menu_items.zsc"
#include "zscript/tsp/misc_intermission.zsc"
#include "zscript/tsp/misc_store.zsc"
#include "zscript/tsp/misc_store_input.zsc"
#include "zscript/tsp/misc_store_parse.zsc"

#include "zscript/tsp/gm_hunters.zsc"

#include "zscript/tsp/weapons/aaa_core.zsc"

Class TSP_Hunters_Kills : Inventory { Default { Inventory.MaxAmount 9999; } }
Class TSP_Hunters_MaxCombo : Inventory { Default { Inventory.MaxAmount 9999; } } // [Py] good luck getting that many in a row. fool. foolish man.

#include "zscript/tsp/misc_upgrades.zsc"
#include "zscript/tsp/misc_player.zsc"

Class TSP_GlobalVariables : Thinker
{
	int tsp_employer;

	TSP_GlobalVariables Init()
	{
		ChangeStatNum(STAT_STATIC);
		return self;
	}

	static TSP_GlobalVariables Get()
	{
		ThinkerIterator it = ThinkerIterator.Create("TSP_GlobalVariables",STAT_STATIC);
		let p = TSP_GlobalVariables(it.Next());
		if (p == null)
		{
			p = new("TSP_GlobalVariables").Init();
		}
		return p;
	}
}

Class TSP_EventHandler : EventHandler
{
	ui bool tsp_shopmusic;
	
	bool gameover;
	int spawndelay;
	int hunters_wave;
	int hunters_monsterMax;
	
	int hunters_score;
	
	int hunters_time;
	
	int hunters_endtimer;
	
	int hunters_combo;
	int hunters_combotime;
	
	static const string hunters_demonSpawns[] =
	{
		"Zombieman",
		"DoomImp",
		"ShotgunGuy",
		"Demon",
		"ChaingunGuy",
		"LostSoul",
		"Spectre",
		"Cacodemon",
		"HellKnight"
	};
	
	TSP_Gamemode_Hunters hunterThinker;
	
	int gamemode;
	
	int hunters_maxCombo;
	
	array<TSP_Hunters_SpawnPoint > hunters_demonSpawnPoints;
	
	override void WorldLoaded(WorldEvent e)
	{
		gamemode = CVar.GetCVar("tsp_gamemode",players[0]).GetInt();
		
		if(gamemode==1)
		{
			ThinkerIterator SecretFinder = ThinkerIterator.Create("Actor");
			Actor mo;
			while (mo = Actor(SecretFinder.Next()))
			{
				if(mo!=null)
				{
					if(mo.bIsMonster)
					{
						TSP_Hunters_SpawnPoint spawn = new("TSP_Hunters_SpawnPoint");
						spawn.pos = mo.pos;
						hunters_demonSpawnPoints.Push(spawn);
						mo.A_Die();
						mo.Destroy();
					}
					else if (mo is "Inventory")
					{
						Inventory itemActor = Inventory(mo);
						itemActor.bAlwaysRespawn = true;
						itemActor.bDropped = false;
					}
				}
			}
			
			let player = players[0].mo;
			if(player!=null)
			{
				player.score = 0;
				player.ClearInventory();
				player.GiveDefaultInventory();
				if(player.health>0)
				{
					player.health = player.player.health = player.SpawnHealth();
				}
			}
			
			hunters_time = 120;
		}
	}
	
	override void WorldThingDied(WorldEvent e)
	{
		switch(gamemode)
		{
			case 0:
				int myHealth = e.Thing.SpawnHealth()/5;
				while(myHealth>=5)
				{
					Actor money = e.Thing.Spawn("TSP_GlobalDollarPickup_5",e.Thing.pos);
					money.vel = e.Thing.vel+(frandom(-4,4),frandom(-4,4),frandom(6,12));
					myHealth-=5;
				}
				while(myHealth>=1)
				{
					Actor money = e.Thing.Spawn("TSP_GlobalDollarPickup_1",e.Thing.pos);
					money.vel = e.Thing.vel+(frandom(-4,4),frandom(-4,4),frandom(6,12));
					myHealth-=1;
				}
				break;
			case 1:
				if(!gameover && e.Thing.target == players[0].mo)
				{
					players[0].mo.score += e.Thing.SpawnHealth()*max(1,hunters_combo);
					players[0].mo.GiveInventory("TSP_Hunters_Kills",1);
					hunters_combo++;
					hunters_combotime = 10*35;
				}
				break;
		}
	}
	
	override void WorldTick()
	{
		if(gamemode==0) return;
		
		if(!gameover)
		{
			if(hunters_combotime>0)
			{
				hunters_combotime--;
			}
			else if(hunters_combo>0)
			{
				if(hunters_combo>hunters_maxCombo)
				{
					hunters_maxCombo = hunters_combo;
				}
				hunters_combo = 0;
			}
			
			if(spawndelay<1)
			{
				Vector3 spawnpos;
				int spawnangle;
				[spawnpos, spawnangle] = G_PickDeathmatchStart();
				
				if(random(1,2)==2&&hunters_demonSpawnPoints.Size()!=0)
				{
					spawnpos = hunters_demonSpawnPoints[random(0,hunters_demonSpawnPoints.Size()-1)].pos;
				}
				
				Actor enemy = Actor.Spawn(hunters_demonSpawns[random(0,min(hunters_monsterMax,hunters_demonSpawns.Size()-1))],spawnpos);
				Actor.Spawn("TeleportFog",spawnpos);
				enemy.angle = spawnangle;
				hunters_wave++;
				players[0].mo.SoundAlert(players[0].mo);
				spawndelay = 35*3;
				if(hunters_wave%6==0)
				{
					hunters_monsterMax++;
				}
			}
			else
			{
				spawndelay--;
			}
			
			if(level.maptime%35==0)
			{
				if(hunters_time==0||players[0].mo.health<1)
				{
					if(hunters_combo>hunters_maxCombo)
					{
						hunters_maxCombo = hunters_combo;
					}
					players[0].mo.GiveInventory("TSP_Hunters_MaxCombo",hunters_maxCombo);
					gameover = true;
					S_Sound("announcer/hunters/gameover",CHAN_VOICE);
				}
				else
				{
					hunters_time--;
					switch(hunters_time)
					{
						case 30: S_Sound("announcer/hunters/30secs",CHAN_VOICE); break;
						case 10: S_Sound("announcer/hunters/10secs",CHAN_VOICE); break;
						case 5: S_Sound("announcer/hunters/5secs",CHAN_VOICE); break;
						case 4: S_Sound("announcer/hunters/4secs",CHAN_VOICE); break;
						case 3: S_Sound("announcer/hunters/3secs",CHAN_VOICE); break;
						case 2: S_Sound("announcer/hunters/2secs",CHAN_VOICE); break;
						case 1: S_Sound("announcer/hunters/1secs",CHAN_VOICE); break;
					}
				}
			}
		}
		else
		{
			hunters_endtimer++;
			if(hunters_endtimer>=(35*5))
			{
				players[0].mo.ACS_ScriptCall("TSP_GotoNextLevel");
			}
		}
	}
	
	override void RenderOverlay(RenderEvent e)
	{
		if(Menu.GetCurrentMenu() is "TSP_ShopMenu" && !tsp_shopmusic)
		{
			S_ChangeMusic("music/TSP_INT.ogg");
			tsp_shopmusic = true;
		}
		else if(!(Menu.GetCurrentMenu() is "TSP_ShopMenu") && tsp_shopmusic)
		{
			S_ChangeMusic("*");
			tsp_shopmusic = false;
		}
		
		if(players[0].mo == null) return;
		
		TextureID combobar_bg = TexMan.CheckForTexture("HUD_ABR2",TexMan.Type_MiscPatch);
		TextureID combobar_fg = TexMan.CheckForTexture("HUD_ABR1",TexMan.Type_MiscPatch);
		
		if(gamemode == 1)
		{
			double thingwidth = 61*(hunters_combotime/double(35*10));
			screen.DrawTexture (combobar_bg, true, 160-31, 32, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
			screen.DrawTexture (combobar_fg, true, 160-31, 32, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240, DTA_WindowRightF, 0+thingwidth);
			
			int time = hunters_time;
			int minutes = time/60;
			time -= minutes*60;
			string seconds = ""..time;
			if(time<10)
			{
				seconds = "0"..seconds;
			}
			string timer = minutes..":"..seconds;
			string scoredisplay = ""..players[0].mo.score;
			
			if(hunters_combo>1)
			{
				scoredisplay = scoredisplay.." x"..hunters_combo;
			}
			
			screen.DrawText(BigFont, Font.CR_YELLOW, 160-BigFont.StringWidth(timer)/2, 4, timer, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
			screen.DrawText(SmallFont, Font.CR_WHITE, 160-SmallFont.StringWidth(scoredisplay)/2, 4+BigFont.GetHeight()+2, scoredisplay, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
		}
		
		if(gameover)
		{
			screen.DrawText(BigFont, Font.CR_YELLOW, 80-BigFont.StringWidth("GAME OVER")/2, 60-8, "GAME OVER", DTA_VirtualWidth, 160, DTA_VirtualHeight, 120);
		}
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{
		if (!e.IsManual)
		{
			if(!players[0].mo)
			{
				return;
			}
			array<string> shopitem;
			e.Name.Split(shopitem, ":");
			if(shopitem.size()==4)
			{
				if(shopitem[0] ~== "buyitem")
				{
					int price = shopitem[3].ToInt();
					players[0].mo.TakeInventory("TSP_GlobalDollars",price);
					Class<Actor > cls = shopitem[1];
					if(players[0].mo.GiveInventory(shopitem[1],shopitem[2].ToInt())&& cls is "TSP_UpgradeBase")
					{
						TSP_UpgradeBase(players[0].mo.FindInventory(shopitem[1])).UpgradeEffect(players[0].mo);
					}
				}
			}
			else if(shopitem.size()==2)
			{
				if(shopitem[0] ~== "employer")
				{
					TSP_PlayerPawn_ZSCBase(players[0].mo).gvars.tsp_employer = shopitem[1].ToInt();
				}
			}
		}
	}
}