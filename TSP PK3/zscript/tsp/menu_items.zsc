Class TSP_EpisodeMenuButFake : ListMenu
{
	override void Ticker()
	{
		ListMenu sin = self;
		Menu father = sin.mParentMenu;
		Array<TSP_EpisodeMenu_Item > episodes;
		episodes.Clear();
		int it = 0;
		for(int i = 0;i < sin.mDesc.mItems.Size();i++)
		{
			TSP_EpisodeMenu_Item newOption = new("TSP_EpisodeMenu_Item");
			newOption.id = it;
			if(sin.mDesc.mItems[i] is "ListMenuItemTextItem")
			{
				newOption.name = ListMenuItemTextItem(sin.mDesc.mItems[i]).mText;
				episodes.Push(newOption);
				it++;
				continue;
			}
			else if (sin.mDesc.mItems[i] is "ListMenuItemPatchItem")
			{
				newOption.patch = ListMenuItemPatchItem(sin.mDesc.mItems[i]).mTexture;
				episodes.Push(newOption);
				it++;
				continue;
			}
		}
		sin.SetMenu("TSP_EpisodeMenu",0);
		TSP_EpisodeMenu(sin.GetCurrentMenu()).episodes.Copy(episodes);
		sin.GetCurrentMenu().mParentMenu = father;
		TSP_EpisodeMenu(sin.GetCurrentMenu()).updateShit();
	}
}

Class TSP_ListMenu : ListMenu
{
	override bool MouseEvent(int type, int x, int y)
	{
		int sel = -1;

		// convert x/y from screen to virtual coordinates, according to CleanX/Yfac use in DrawTexture
		x = ((x - (screen.GetWidth() / 2)) / CleanXfac) + 160;
		y = ((y - (screen.GetHeight() / 2)) / CleanYfac) + 100;

		if (mFocusControl != NULL)
		{
			mFocusControl.MouseEvent(type, x, y);
			return true;
		}
		else
		{
			if ((mDesc.mWLeft <= 0 || x > mDesc.mWLeft) &&
				(mDesc.mWRight <= 0 || x < mDesc.mWRight))
			{
				for(int i=0;i<mDesc.mItems.Size(); i++)
				{
					if (mDesc.mItems[i].CheckCoordinate(x, y))
					{
						if (i != mDesc.mSelectedItem)
						{
							MenuSound("menu/cursor");
						}
						mDesc.mSelectedItem = i;
						mDesc.mItems[i].MouseEvent(type, x, y);
						return true;
					}
				}
			}
		}
		mDesc.mSelectedItem = -1;
		return Super.MouseEvent(type, x, y);
	}
	
	override void Ticker ()
	{
		Super.Ticker();
		for(int i=0;i<mDesc.mItems.Size(); i++)
		{
			if(mDesc.mItems[i] is "ListMenuItemTSP_MenuItem_PatchItem")
			{
				ListMenuItemTSP_MenuItem_PatchItem menuItem = ListMenuItemTSP_MenuItem_PatchItem(mDesc.mItems[i]);
				if(mDesc.mSelectedItem == i)
				{
					menuItem.xOffTarg = 8;
				}
				else
				{
					menuItem.xOffTarg = 0;
				}
			}
		}
	}
}

Class TSP_ListMenu_Skill : TSP_ListMenu
{
	bool retainOldPos;
	int oldPos;
	
	override void Ticker ()
	{
		for(int i=0;i<mDesc.mItems.Size(); i++)
		{
			if(!(mDesc.mItems[i] is "ListMenuItemTSP_MenuItem_PatchItem") && mDesc.mItems[i] is "ListMenuItemPatchItem")
			{
				retainOldPos = true;
				oldPos = mDesc.mSelectedItem;
				ListMenuItemTSP_MenuItem_PatchItem fuckItem = new("ListMenuItemTSP_MenuItem_PatchItem");
				ListMenuItemPatchItem oldItem = ListMenuItemPatchItem(mDesc.mItems[i]);
				fuckItem.InitDirect(oldItem.GetX(),oldItem.GetY(),oldItem.mHeight,oldItem.mTexture,"f",oldItem.GetAction(),oldItem.mParam);
				fuckItem.mEnabled = mDesc.mItems[i].mEnabled;
				mDesc.mItems.Delete(i);
				mDesc.mItems.Push(fuckitem);
				i--;
			}
		}
		if(retainOldPos)
		{
			retainOldPos = false;
			mDesc.mSelectedItem = oldPos;
		}
		Super.Ticker();
	}
}

Class ListMenuItemTSP_MenuItem_PatchItem : ListMenuItemPatchItem
{
	double xOff;
	int xOffTarg;
	int xOffOriginal;
	
	override void Ticker()
	{
		xOff = xOff + (xOffTarg - xOff)/5;
	}
	
	override void Drawer(bool selected)
	{
		screen.DrawTexture (mTexture, true, mXpos+xOff, mYpos, DTA_Clean, true);
	}
}

Class ListMenuItemTSP_MenuItem_TextItem : ListMenuItemTextItem
{
	String mSubtitle;

	void Init(ListMenuDescriptor desc, String text, String hotkey, Name child, string subtitle = "melody squartswell", int param = 0)
	{
		Super.Init(desc, text, hotkey, child, param);
		mSubtitle = subtitle;
	}
}

Class ListMenuItemTSP_MenuItem_GamemodeItem : ListMenuItemTSP_MenuItem_TextItem
{
	override bool Activate()
	{
		CVar.GetCVar("tsp_gamemode", players[0]).SetInt(mParam);
		Console.Printf("[\cbDEBUG\c-] set gamemode to \ck"..mParam);
		Menu.SetMenu(mAction, mParam);
		
		if ( Menu.GetCurrentMenu() is "TSP_CharacterMenu_BH" )
		{
			Console.Printf("ok now set gamemode");
			TSP_CharacterMenu_BH(Menu.GetCurrentMenu()).css_gamemode = mParam;
			TSP_CharacterMenu_BH(Menu.GetCurrentMenu()).generateChars();
		}
		
		return true;
	}
}