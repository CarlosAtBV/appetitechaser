//todo: clear inventory on map start for bounty hunters

Class TSP_StatusScreen : StatusScreen
{
	mixin TSP_HiResBase;
	
	int intermissioncounter;
	
	string ss_levelName;
	
	Vector2 ss_bgPos;
	
	float ss_textAlpha;
	float ss_rankLerp;
	float ss_shakeAmount;
	float ss_shakeAmount_header;
	float ss_mapNameAlpha;
	float ss_missionStatusAlpha;
	int ss_statsDelay;
	
	float ss_partOffset[3];
	
	string ss_hours;
	string ss_minutes;
	string ss_seconds;
	
	double ss_rankCalc;
	
	string ss_tallyLeft[4];
	string ss_tallyRight[4];
	float ss_tallyAlphaLeft[4];
	float ss_tallyAlphaRight[4];
	
	static const string ss_ranks[] =
	{
		"E","D","C","B","A","S"
	};
	
	bool ss_missionFailed;
	string ss_missionStatus;
	TSP_PSXHandler psxHandler;
	bool tsp_ss_endScreen;
	int tsp_ss_endTimer;
	int gamemode;
	
	bool doEnding;
	
	override void initStats ()
	{
		psxHandler = TSP_PSXHandler(StaticEventHandler.Find("TSP_PSXHandler"));
		
		gamemode = tsp_gamemode;
		
		TSP_PlayerPawn_ZSCBase ss_player = TSP_PlayerPawn_ZSCBase(players[0].mo);
		
		intermissioncounter = gameinfo.intermissioncounter;
		CurState = StatCount;
		acceleratestage = 0;
		sp_state = 1;
		cnt_kills[0] = cnt_items[0] = cnt_secret[0] = -1;
		cnt_time = cnt_par = -1;
		cnt_pause = Thinker.TICRATE;
	
		cnt_total_time = -1;
		
		//
		
		ss_levelName = level.LevelName;
		ss_rankLerp = -1.0;
		ss_missionStatusAlpha = -0.5;
		
		ss_partOffset[0] = 1.0;
		ss_partOffset[1] = 1.0;
		ss_partOffset[2] = 1.0;
		
		int time = level.totaltime/35;
		
		int hours = time/3600;
		time -= hours*3600;
		int minutes = time/60;
		time -= minutes*60;
		
		ss_hours = ""..hours;
		ss_minutes = ""..minutes;
		if(minutes<10)
		{
			ss_minutes = "0"..ss_minutes;
		}
		ss_seconds = ""..time;
		if(time<10)
		{
			ss_seconds = "0"..ss_seconds;
		}
		
		ss_statsDelay = 35;
		
		switch(gamemode)
		{
			case 0:
				ss_tallyLeft[0] = "Kills:";
				ss_tallyLeft[1] = "Items:";
				ss_tallyLeft[2] = "Secrets:";
				ss_tallyLeft[3] = "Clear Time:";
				ss_tallyRight[0] = level.killed_monsters.." / "..level.total_monsters;
				ss_tallyRight[1] = level.found_items.." / "..level.total_items;
				ss_tallyRight[2] = level.found_secrets.." / "..level.total_secrets;
				ss_tallyRight[3] = ss_hours..":"..ss_minutes..":"..ss_seconds;
		
				ss_rankCalc = (double(level.killed_monsters)/max(1,level.total_monsters))
				+(double(level.found_items)/max(1,level.total_items))
				+(double(level.found_secrets)/max(1,level.total_secrets));
				
				ss_rankCalc = int(ss_ranks.Size()*(ss_rankCalc/4));
				break;
			case 1:
				ss_tallyLeft[0] = "Kills:";
				ss_tallyLeft[1] = "Max. Combo:";
				ss_tallyLeft[2] = "Score:";
				ss_tallyLeft[3] = "----:";
				ss_tallyRight[0] = ""..ss_player.tsp_bh_kills;
				ss_tallyRight[1] = ""..ss_player.CountInv("TSP_Hunters_MaxCombo");
				ss_tallyRight[2] = ""..players[0].mo.score;
				ss_tallyRight[3] = "----";
				
				ss_rankCalc = ss_player.tsp_bh_rating * ss_ranks.size();
				break;
		}
		
		ss_missionStatus = "Mission Complete!";
		if(players[0].mo.health<0)
		{
			ss_missionFailed = true;
			ss_missionStatus = "Mission Failed!";
		}
	}
	
	override void Ticker(void)
	{
		// counter for general background animation
		bcnt++;  
	
		if (bcnt == 1)
		{
			StartMusic();
		}
		
		checkForAccelerate();
		
		if ( ss_shakeAmount > 0.0 )
		{
			ss_shakeAmount -= 0.25;
		}
		
		if ( ss_shakeAmount_header > 0.0 )
		{
			ss_shakeAmount_header -= 0.5;
		}
		
		ss_bgPos = (cos(bcnt),sin(bcnt*1.2))*16;
		
		if ( bcnt < 5 )
		{
			return;
		}
		
		for ( int i = 0; i < ss_partOffset.size(); i++ )
		{
			if ( ss_partOffset[i] > 0)
			{
				ss_partOffset[i] -= 0.1;
				if ( ss_partOffset[i] < 0.5 )
				{
					continue;
				}
				return;
			}
		}
		
		if(bcnt>12)
		{
			if ( ss_mapNameAlpha < 1.0 )
			{
				ss_mapNameAlpha += 0.1;
				if ( ss_mapNameAlpha >= 1.0 )
				{
					ss_shakeAmount_header = 4.0;
					S_Sound("intermission/mapname",0);
				}
				return;
			}
			
			if ( ss_missionStatusAlpha < 1.0 )
			{
				if ( ss_missionStatusAlpha > -0.1 && ss_missionStatusAlpha <= 0.0 )
				{
					S_Sound("intermission/mapstatus", 0);
				}
				ss_missionStatusAlpha += 0.1;
			}
			
			if ( ss_statsDelay > 0 )
			{
				ss_statsDelay -= 1;
				return;
			}
			
			for ( int i = 0; i < ss_tallyAlphaLeft.size(); i++ )
			{
				if ( ss_tallyAlphaLeft[i] < 1.0 )
				{
					if ( ss_tallyAlphaLeft[i] <= 0.0 )
					{
						S_Sound("intermission/tally", 0, pitch: 1.0 + (i * 0.1));
					}
					ss_tallyAlphaLeft[i] += 0.25;
					return;
				}
				else if ( ss_tallyAlphaRight[i] < 1.0 )
				{
					if ( ss_tallyAlphaRight[i] <= 0.0 )
					{
						S_Sound("intermission/tick", 0, pitch: 1.0 + (i * 0.1));
					}
					ss_tallyAlphaRight[i] += 0.1;
					return;
				}
				else
				{
					continue;
				}
			}
			
			if ( ss_textAlpha < 1.0 )
			{
				ss_textAlpha += 0.1;
			}
			else if ( ss_rankLerp < 1.0 )
			{
				ss_rankLerp += 0.1;
				Console.Printf(""..ss_rankLerp);
				if ( ss_rankLerp >= 1.0 )
				{
					ss_shakeAmount = 4.0;
					S_Sound("intermission/skillrating",0);
				}
			}
		}
		
		/*if(bcnt==13)
		{
		}*/
		
		if ( tsp_ss_endScreen )
		{
			psxHandler.tsp_psxFadeProc = true;
			if ( tsp_ss_endTimer == 24 )
			{
				psxHandler.tsp_psxFadeProc = false;
				End();
				level.WorldDone();
			}
			tsp_ss_endTimer++;
			//tsp_ss_endScreen = false;
		}
		
		if(bcnt>12 && accelerateStage && !(gamemode == 1))
		{
			tsp_ss_endScreen = true;
			//End();
			//level.WorldDone();
		}
	}
	
	const SS_RIGHTSTATSX = 160;

	override void updateStats ()
	{
	}
		
	const BOX_X = 164;
	const BOX_Y = 314;
	const BOX_WIDTH = 524;
	const BOX_HEIGHT = 324;
	const BOX_PADDING = 24;
	
	override void Drawer (void)
	{
		UpdateViewport();
		
		Font boldFont = "tsp_bold";
		
		float shakeOffset = ( bcnt % 2 == 0 ? 1 : -1 ) * ss_shakeAmount;
		float shakeOffsetHeader = ( bcnt % 2 == 0 ? 1 : -1 ) * ss_shakeAmount_header;
		
		float boxX = BOX_X + ease_inQuart(ss_partOffset[2]) * -1280;
		float boxY = shakeOffset + BOX_Y;
		
		TextureID spacebg = TexMan.CheckForTexture("tsps_e",TexMan.Type_MiscPatch);
		TextureID melbg = TexMan.CheckForTexture("graphics/intermission/int_melody.png", TexMan.Type_MiscPatch);
		
		Color secondColor = Font.FindFontColor("TSPGreen");
		
		int finalRank = clamp(ss_rankCalc, 0, ss_ranks.size()-1);
		/*if(ss_missionFailed)
		{
			secondColor = Font.FindFontColor("TSPRed");
		}*/
		
		screen.DrawTexture (spacebg, true, 160+ss_bgPos.x, 0+ss_bgPos.y, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240, DTA_CenterOffset, true);
		
		Draw9Slice(ease_inQuart(ss_partOffset[0]) * -1280 + 128, 48+shakeOffsetHeader, 1280 - 256, 96, "graphics/demo/char_slice.png", 24);
		
		screen.DrawTexture(melbg, false, ease_inQuart(ss_partOffset[1]) * 1280, 0,
			DTA_Desaturate, ss_missionFailed ? 255 : 0,
			DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
			DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
			DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));
		
		double titleSlamScale = (1.0 + (1.0 - ease_inQuart(ss_mapNameAlpha)) * 1);
		//double statusSlamScale = (1.0 + 1.0 - ease_inQuart(ss_missionStatusAlpha));
		DrawStringHack("tsp_bold", ease_inQuart(ss_partOffset[0]) * -1280 + 206, shakeOffsetHeader + 58, ss_levelName, alpha: ss_mapNameAlpha, scale: (titleSlamScale, titleSlamScale));
		DrawStringHack("tsp_small", ease_inQuart(ss_partOffset[0]) * -1280 + 230, shakeOffsetHeader + 104, ss_missionStatus, alpha: ss_missionStatusAlpha);
		
		//screen.DrawText(BigFont, Font.CR_WHITE, 16, 18, ss_levelName, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240, DTA_Alpha, ss_mapNameAlpha);
		//screen.DrawText(SmallFont, secondColor, 24, 20+BigFont.GetHeight()+2, ss_missionStatus, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240, DTA_Alpha, ss_mapNameAlpha);
		
		Draw9Slice(boxX, boxY, BOX_WIDTH, BOX_HEIGHT, "graphics/demo/char_slice.png", 24);
		
		int rankY = boxY + BOX_HEIGHT - BOX_PADDING - boldFont.GetHeight();
		
		DrawStringHack("tsp_bold", boxX + BOX_PADDING, rankY, "Rank:", alpha: ss_textAlpha);//"Rank:");
		
		double rankSlamScale = (1.0 + (1.0 - ease_inQuart(ss_rankLerp)) * 4);
		DrawStringHack("tsp_bold", boxX + BOX_WIDTH - BOX_PADDING, rankY, ss_ranks[finalRank], alpha: ss_rankLerp, scale: (rankSlamScale, rankSlamScale), hAlign: TSP_ALIGN_RIGHT);
		
		for(int i = 0;i<4;i++)
		{
			DrawStringHack("tsp_small", BOX_X + BOX_PADDING, boxY + BOX_PADDING + 24 * i, ss_tallyLeft[i], alpha: ss_tallyAlphaLeft[i]);
			DrawStringHack("tsp_small", BOX_X + BOX_WIDTH - BOX_PADDING, boxY + BOX_PADDING + 24 * i, ss_tallyRight[i], alpha: ss_tallyAlphaRight[i], hAlign: TSP_ALIGN_RIGHT);
			/*screen.DrawText(SmallFont, secondColor, 16, 112+18*i, ss_tallyLeft[i], DTA_VirtualWidth, 320, DTA_VirtualHeight, 240, DTA_Alpha, ss_textAlpha);
			screen.DrawText(SmallFont, Font.CR_WHITE, SS_RIGHTSTATSX-SmallFont.StringWidth(""..ss_tallyRight[i]), 112+18*i, ""..ss_tallyRight[i], DTA_VirtualWidth, 320, DTA_VirtualHeight, 240, DTA_Alpha, ss_textAlpha);*/
		}
		
		//screen.DrawText(BigFont, secondColor, 8, 188, "Rank:", DTA_VirtualWidth, 320, DTA_VirtualHeight, 240, DTA_Alpha, ss_textAlpha);
		//screen.DrawText(BigFont, Font.CR_WHITE, SS_RIGHTSTATSX+8-BigFont.StringWidth(ss_ranks[finalRank]), 188, ss_ranks[finalRank], DTA_VirtualWidth, 320, DTA_VirtualHeight, 240, DTA_Alpha, ss_textAlpha);
	}
	
	void DrawStringHack(Font fnt, int x, int y, string text, double alpha = 1.0, Vector2 scale = (1.0, 1.0), int hAlign = TSP_ALIGN_LEFT)
	{
		int xPos;
		int yPos = y + (fnt.GetHeight() * (1.0 - scale.y)) / 2;
		int stringWidth = fnt.StringWidth(text) * scale.x;
		
		switch(hAlign)
		{
			case TSP_ALIGN_LEFT: xPos = x; break;
			case TSP_ALIGN_CENTER: xPos = x - stringWidth/2; break;
			case TSP_ALIGN_RIGHT: xPos = x - stringWidth; break;
		}
		
		screen.DrawText(fnt, Font.CR_UNTRANSLATED, xPos, yPos, text,
			DTA_Alpha, alpha, DTA_ScaleX, scale.x, DTA_ScaleY, scale.y,
			DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
			DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
			DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));
	}
}