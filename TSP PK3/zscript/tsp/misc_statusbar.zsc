Class TSP_StatusBar : BaseStatusBar
{
	HUDFont mHUDFont;
	HUDFont mSmallFont;
	HUDFont mAmountFont;
	HUDFont mTinyFont;
	InventoryBarState diparms;
	LinearValueInterpolator mHealthInterpolator;
	LinearValueInterpolator mShieldInterpolator;
	LinearValueInterpolator mMoneyInterpolator;
	
	TSP_PlayerPawn_ZSCBase tsp_player;
	
	double mTraitAlpha;
	
	bool isDebug;
	
	static const string mUpgBar[] =
	{
		"HUD_UPGE","HUD_UPG1","HUD_UPG2","HUD_UPGF"
	};

	override void Init()
	{
		Super.Init();
		SetSize(0, 320, 240);

		// Create the font used for the fullscreen HUD
		Font fnt = "TSP_HUDFONT";
		mHUDFont = HUDFont.Create(fnt,1,false);
		fnt = "SmallFont";
		mSmallFont = HUDFont.Create(fnt);
		mTinyFont = HUDFont.Create("TINYFONT",0,Mono_off,1,1);
		mAmountFont = HUDFont.Create("INDEXFONT");
		diparms = InventoryBarState.Create();
		mHealthInterpolator = LinearValueInterpolator.Create(0, 8);
		mShieldInterpolator = LinearValueInterpolator.Create(0, 8);
		mMoneyInterpolator = LinearValueInterpolator.Create(0, 8);
	}
	
	override void Tick()
	{
		super.Tick();
		mHealthInterpolator.Update(CPlayer.health);
		mShieldInterpolator.Update(CPlayer.mo.CountInv("TSP_PlayerPawn_Shield"));
		mMoneyInterpolator.Update(CPlayer.mo.CountInv("TSP_GlobalDollars"));
		
		tsp_player = TSP_PlayerPawn_ZSCBase(CPlayer.mo);
		
		mTraitAlpha = mTraitAlpha + (tsp_player.pp_traitMode - mTraitAlpha)/4;
		
		if(level.maptime%35==0)
		{
			isDebug = CVar.GetCVar("tsp_debug",players[consoleplayer]).GetBool();
		}
	}
	
	const HUDLEFT_X = 7;
	const HUDLEFT_Y = -71;
	const HUDRIGHT_X = -148;
	const HUDRIGHT_Y = -60;

	override void Draw (int state, double TicFrac)
	{
		Super.Draw (state, TicFrac);

		if (state == HUD_StatusBar||state == HUD_Fullscreen)
		{
			BeginHUD(1.0);//,true,320,240);
			
			alpha = 1.0;
			
			int health = mHealthInterpolator.GetValue();
			int shield = mShieldInterpolator.GetValue();
			int money = mMoneyInterpolator.GetValue();
			int maxShield = CPlayer.mo.CountInv("TSP_PlayerPawn_MaxShield");
			
			// Monet
			DrawImage("HUD_GBD1", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS);
			DrawString(mSmallFont, FormatNumber(money, 180000), (HUDLEFT_X+113, HUDLEFT_Y+25), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW, Font.CR_WHITE);
			
			DrawImage("HUD_MELE", (HUDLEFT_X+115, HUDLEFT_Y+25), DI_ITEM_OFFSETS);
			DrawImage("HUD_MELF", (HUDLEFT_X+115, HUDLEFT_Y+25), DI_ITEM_OFFSETS, mTraitAlpha);
			
			// Main Stats
			DrawBar("HUD_SHDF", "HUD_SHDE", shield, maxShield, (HUDLEFT_X+61, HUDLEFT_Y+46), 0, 0, DI_ITEM_OFFSETS);
			DrawBar("HUD_HLTF", "HUD_HLTE", health, 100, (HUDLEFT_X+61, HUDLEFT_Y+35), 0, 0, DI_ITEM_OFFSETS);
			
			DrawImage("HUD_BAS1", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS);
			
			switch(CPlayer.mo.CountInv("TSP_Upgrade_Shield"))
			{
				case 0: DrawImage("HUD_SHUE", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS); break;
				case 1: DrawImage("HUD_SHU1", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS); break;
				case 2: DrawImage("HUD_SHU2", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS); break;
				case 3: DrawImage("HUD_SHU3", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS); break;
			}
			
			if(CPlayer.mo is "SpacePirate")
			{
				DrawImage("HUD_MELB", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS);
			}
			
			//Melody Crosswell
			
			if(CPlayer.mo is "TSP_DummyPlayer")
			{
				DrawImage("EPICMEL", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS);
				//DrawString(mSmallFont, "DUMMY", (HUDLEFT_X+35, HUDLEFT_Y+30), DI_TEXT_ALIGN_CENTER|DI_NOSHADOW, Font.CR_YELLOW);
			}
			else
			{
				DrawTexture(GetMugShot(5), (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS);
			}
			
			Color hpColor;
			if(health>100)
			{
				hpColor = Font.CR_GOLD;
			}
			else if(health>75)
			{
				hpColor = Font.CR_LIGHTBLUE;
			}
			else if(health>50)
			{
				hpColor = Font.CR_CYAN;
			}
			else
			{
				hpColor = Font.CR_RED;
			}
			DrawString(mSmallFont, ""..health, (HUDLEFT_X+75, HUDLEFT_Y+36), DI_TEXT_ALIGN_LEFT|DI_NOSHADOW, hpColor);
			
			// sheld number stats
			DrawString(mSmallFont, ""..shield, (HUDLEFT_X+75, HUDLEFT_Y+47), DI_TEXT_ALIGN_LEFT|DI_NOSHADOW, Font.CR_GREEN);
			
			// kiz
			
			//Vector2 keypos = (HUDRIGHT_X+25, HUDRIGHT_Y+21);
			Vector2 keypos = (HUDRIGHT_X+22, HUDRIGHT_Y+21);
			int rowc = 0;
			double roww = 0;
			for(let i = CPlayer.mo.Inv; i != null; i = i.Inv)
			{
				if (i is "Key" && i.Icon.IsValid())
				{
					DrawTexture(i.Icon, keypos, DI_ITEM_LEFT_BOTTOM);
					Vector2 size = TexMan.GetScaledSize(i.Icon);
					keypos.X += size.X + 2;
					roww = max(roww, size.X);
					/*if (++rowc == 3)
					{
						keypos.Y = 2;
						keypos.X -= roww + 2;
						roww = 0;
						rowc = 0;
					}*/
				}
			}
			
			// rIGHT HAND SIDE
			
			
			// HOW CAN I KILL NOOBS WITHOUT ANY AMMO
			
			DrawImage("HUD_MELC", (HUDRIGHT_X, HUDRIGHT_Y), DI_ITEM_OFFSETS);
			DrawImage("HUD_MLN1", (HUDRIGHT_X, HUDRIGHT_Y), DI_ITEM_OFFSETS);
			
			Inventory a1 = GetCurrentAmmo();
			if(CPlayer.ReadyWeapon)
			{
				DrawInventoryIcon(CPlayer.ReadyWeapon,(HUDRIGHT_X+22, HUDRIGHT_Y+42),DI_ITEM_LEFT,0.5);
				DrawString(mTinyFont, CPlayer.ReadyWeapon.GetTag(), (HUDRIGHT_X+105, HUDRIGHT_Y+48), DI_TEXT_ALIGN_RIGHT);
			}
			
			for(int i = 0;i<10;i++)
			{
				if(CPlayer.HasWeaponsInSlot(i+1))
				{
					DrawString(mTinyFont, ""..i+1, (HUDRIGHT_X+99+6*i, HUDRIGHT_Y+15), DI_TEXT_ALIGN_LEFT|DI_NOSHADOW, Font.CR_GREY);
				}
			}
			
			if (a1 != null)
			{
				if(CPlayer.ReadyWeapon is "TSP_Weapon_Core")
				{
					TSP_Weapon_Core wepon = TSP_Weapon_Core(CPlayer.ReadyWeapon);
					DrawImage("HUD_UPGT", (HUDRIGHT_X, HUDRIGHT_Y), DI_ITEM_OFFSETS);
					
					DrawImage(mUpgBar[wepon.tspw_reloadlevel], (HUDRIGHT_X+51, HUDRIGHT_Y+28), DI_ITEM_OFFSETS);
					DrawImage(mUpgBar[wepon.tspw_ammolevel], (HUDRIGHT_X+51+13, HUDRIGHT_Y+28), DI_ITEM_OFFSETS);
					DrawImage(mUpgBar[wepon.tspw_powerlevel], (HUDRIGHT_X+51+26, HUDRIGHT_Y+28), DI_ITEM_OFFSETS);
					if(wepon.tspw_clipsize>0)
					{
						int ammoRed = wepon.tspw_clipsize*0.4;
						Color ammoColor;
						if(TSP_Weapon_Core(CPlayer.ReadyWeapon).tspw_curclip<ammoRed)
						{
							ammoColor = Font.FindFontColor("TSPRed");
						}
						else
						{
							ammoColor = Font.FindFontColor("TSPLimeGreen");
						}
						DrawString(mHUDFont, FormatNumber(TSP_Weapon_Core(CPlayer.ReadyWeapon).tspw_curclip, 3), (HUDRIGHT_X+133, HUDRIGHT_Y+25), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW, ammoColor);
						alpha = 0.6;
						DrawString(mSmallFont, FormatNumber(a1.Amount, 3), (HUDRIGHT_X+132, HUDRIGHT_Y+41), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW, Font.FindFontColor("TSPYeller"));
					}
				}
			}
			
			TSP_PlayerPawn_ZSCBase playerObj = TSP_PlayerPawn_ZSCBase(CPlayer.mo);
			if(playerObj.pp_notificationTime>0)
			{
				Centering = true;
				DrawString(mSmallFont, playerObj.pp_notification, (0,-36), DI_TEXT_ALIGN_CENTER|DI_NOSHADOW|DI_SCREEN_CENTER_BOTTOM, Font.CR_GREEN);
				Centering = false;
			}
			
			for(int i = 0;i<playerObj.tsp_logs.Size();i++)
			{
				//DrawString(mTinyFont, playerObj.tsp_logs[i].whatugot, (HUDLEFT_X+17, HUDLEFT_Y-15-(8*i)), DI_TEXT_ALIGN_LEFT, Font.CR_UNTRANSLATED);
				DrawString(mTinyFont, playerObj.tsp_logs[i].whatugot, (HUDLEFT_X+12, HUDLEFT_Y-12-(8*i)), DI_TEXT_ALIGN_LEFT, Font.CR_UNTRANSLATED);
			}
			
			if(isDebug)
			{
				string targetName = "N/A";
				if(playerObj.theZoop!=null)
				{
					targetName = playerobj.theZoop.GetClassName();
				}
				DrawString(mSmallFont, "\ccTarget: \c-"..targetName, (-2, 2), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW, Font.FindFontColor("TSPGreen"));
			}
		}
	}
}

/*LowerHealthCap false;
statusbar fullscreen, fullscreenoffsets
{
    //main stats
    drawimage "HUDBASE", 5, -69;
    drawbar "HUD_ABR1", "HUD_ABR2", TSP_PlayerPawn_Shield, horizontal, interpolate(5), 61, -15;
	drawbar "HUD_HBR1", "HUD_HBR2", Health, horizontal, interpolate(5), 61, -61;
	//
	
	InInventory IsMel
	{
    drawimage "HUD_MEL1", 5, -69;
	drawmugshot 5, 5, -69;
	}
	
    // helf number stats
    InInventory not Over100Health
    {
	drawnumber 3, TSP_HUDFONT, Gold, health, alignment(right), interpolate(6), 121, -52, 1, Red, 50, LightBlue, 75;
	}
	
	InInventory Over100Health
    {
	drawnumber 3, TSP_HUDFONT, Cyan, health, alignment(right), interpolate(6), 121, -52, 1;
	}
	// armer number stats
	drawnumber 3, TSP_HUDFONT, Green, TSP_PlayerPawn_Shield, alignment(right), interpolate(6), whennotzero, 121, -34, 1, Green, 50, Orange, 101;
    // kiz
    drawkeybar 6, vertical, reverserows, auto, -10, 2, 0, 3, auto;
	
	// ammo number stats
	
   usesammo
    {
	      Alpha 0.3
	      drawimage "HUD_AMOE", -102, -72;
		  Alpha 0.5
		  drawimage "HUD_AMOD", -64, -70;
    }
	drawnumber 3, TSP_HUDFont, Blue, ammo1, alignment(right), drawshadow(0,1), -68, -70, 1;
    Alpha 0.6
    drawnumber 3, TSP_HUDFont, Green, ammo2, alignment(right), drawshadow(0,1), -8, -70, 1;
}*/
