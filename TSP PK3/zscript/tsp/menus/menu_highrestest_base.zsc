Mixin Class TSP_HiResBase
{
	Vector2 viewportSize;
	Vector2 screenSize;
	Vector2 viewportPos;
	
    void UpdateViewport ()
    {
		double scaleY;
		
		if ( screen.GetHeight() < 720 )
		{
			scaleY = screen.GetHeight()/720.;
		}
		else
		{
			scaleY = floor(screen.GetHeight()/720.);
		}
		
		viewportSize = (1280 * scaleY, 720 * scaleY);
		screenSize = (screen.GetWidth(), screen.GetHeight());
		viewportPos = (screenSize - viewportSize)/2;
    }
	
	void SetClipRect(int x, int y, int width, int height)
	{
		Vector2 pos = (x / 1280., y / 720.);
		pos.x *= viewportSize.x;
		pos.y *= viewportSize.y;
		
		Vector2 size = (width / 1280., height / 720.);
		size.x *= viewportSize.x;
		size.y *= viewportSize.y;
				
		screen.SetClipRect(int(viewportPos.x + pos.x) , int(viewportPos.y + pos.y), int(size.x), int(size.y));
	}
	
	Vector2 ConvertMousePos(Vector2 mouse)
	{
		//debugMouse = mouse -= viewportPos;
		Vector2 getPos = (mouse - viewportPos);
		getPos = (getPos.x / viewportSize.x, getPos.y / viewportSize.y);
		getPos = (getPos.x * 1280, getPos.y * 720);
		
		return getPos;
	}
	
	bool CheckMousePos(Vector2 mousePos, Vector2 start, Vector2 size)
	{
		return (mousePos.x >= start.x && mousePos.y >= start.y) && (mousePos.x < start.x+size.x && mousePos.y < start.y+size.y);
	}
	
	void Draw9Slice(int x, int y, int width, int height, string bgPic = "graphics/menu/tsp_menuborder0.png", int cornerSize = 5)
	{
		TextureID tex = TexMan.CheckForTexture(bgPic);
		
		int texSizeX, texSizeY;
		[texSizeX, texSizeY] = TexMan.GetSize(tex);
		Vector2 texSize = (texSizeX, texSizeY);
		
		screen.DrawTexture(tex, false, x, y,
			DTA_DestWidth, cornerSize, DTA_DestHeight, cornerSize,
			DTA_SrcWidth, cornerSize, DTA_SrcHeight, cornerSize,
			
				DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
				DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
				DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));
		
		screen.DrawTexture(tex, false, x+width-cornerSize, y,
			DTA_SrcX, texSize.X-cornerSize,
			DTA_DestWidth, cornerSize, DTA_DestHeight, cornerSize,
			DTA_SrcWidth, cornerSize, DTA_SrcHeight, cornerSize,
			
				DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
				DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
				DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));
		
		screen.DrawTexture(tex, false, x, y+height-cornerSize,
			DTA_SrcY, texSize.Y-cornerSize,
			DTA_DestWidth, cornerSize, DTA_DestHeight, cornerSize,
			DTA_SrcWidth, cornerSize, DTA_SrcHeight, cornerSize,
			
				DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
				DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
				DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));
		
		screen.DrawTexture(tex, false, x+width-cornerSize, y+height-cornerSize,
			DTA_SrcX, texSize.X-cornerSize, DTA_SrcY, texSize.Y-cornerSize,
			DTA_DestWidth, cornerSize, DTA_DestHeight, cornerSize,
			DTA_SrcWidth, cornerSize, DTA_SrcHeight, cornerSize,
			
				DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
				DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
				DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));
			
		//parallels
		
		screen.DrawTexture(tex, false, x+cornerSize, y,
			DTA_SrcX, cornerSize,
			DTA_DestWidth, width - (cornerSize*2), DTA_DestHeight, cornerSize,
			DTA_SrcWidth, texSize.X - (cornerSize*2), DTA_SrcHeight, cornerSize,
			
				DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
				DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
				DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));
			
		screen.DrawTexture(tex, false, x+cornerSize, y+height-cornerSize,
			DTA_SrcX, cornerSize, DTA_SrcY, texSize.y-cornerSize,
			DTA_DestWidth, width - (cornerSize*2), DTA_DestHeight, cornerSize,
			DTA_SrcWidth, texSize.X - (cornerSize*2), DTA_SrcHeight, cornerSize,
			
				DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
				DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
				DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));
		
		screen.DrawTexture(tex, false, x, y+cornerSize,
			DTA_SrcY, cornerSize,
			DTA_DestWidth, cornerSize, DTA_DestHeight, height - (cornerSize*2),
			DTA_SrcWidth, cornerSize, DTA_SrcHeight, texSize.Y - (cornerSize*2),
			
				DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
				DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
				DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));
		
		screen.DrawTexture(tex, false, x+width-cornerSize, y+cornerSize,
			DTA_SrcX, texSize.x-cornerSize, DTA_SrcY, cornerSize,
			DTA_DestWidth, cornerSize, DTA_DestHeight, height - (cornerSize*2),
			DTA_SrcWidth, cornerSize, DTA_SrcHeight, texSize.Y - (cornerSize*2),
			
				DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
				DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
				DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));
			
		//mid
		
		screen.DrawTexture(tex, false, x+cornerSize, y+cornerSize,
			DTA_SrcX, cornerSize, DTA_SrcY, cornerSize,
			DTA_DestWidth, width-cornerSize*2, DTA_DestHeight, height-cornerSize*2,
			DTA_SrcWidth, texSize.X-cornerSize*2, DTA_SrcHeight, texSize.Y-cornerSize*2,
			
				DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
				DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
				DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));
	}
}

Class TSP_MenuBase : GenericMenu
{
	mixin TSP_HiResBase;
	
	override void Init(Menu parent)
	{
		Super.Init(parent);
	}
	
	Vector2 debugMouse;
	
	override void Drawer()
	{
		UpdateViewport();
		
		TSP_MenuDrawer();
		
		//screen.DrawText("BigFont", Font.CR_RED, 0, 0, ""..debugMouse);
		
		let fuckNugget = TexMan.CheckForTexture("SFXAB0");
		screen.DrawTexture (fuckNugget, true, debugMouse.x, debugMouse.y,
			DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
			DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
			DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));
	}
		
	virtual void TSP_MenuDrawer()
	{
	}
	
	void DrawText(Font fnt, int x, int y, string text, Color color = Font.CR_UNTRANSLATED, bool centered = false)
	{
		screen.DrawText(fnt, color, centered ? x - fnt.StringWidth(text)/2 : x, y, text,
			DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
			DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
			DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));
	}
}