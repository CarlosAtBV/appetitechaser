Class TSP_BountyHuntersMap
{
	TextureID preview;
	string name;
	string maplump;
	string desc;
	TextureID image_menu;
	bool isSelected;
}

Class TSP_BountyHuntersMapMenu : GenericMenu
{
	static const string hardcoded_maps[] =
	{
		"BH_BZ",
		"BH_BZ",
		"MAP32"
	};
	
	mixin TSP_UIDrawMixin;
	
	Vector2 mapListPos;
	
	int curSelection;
	int episodeID;
	
	const BUTTONHEIGHT = 12;
	const BUTTONDIST = 1;
	
	Array<TSP_BountyHuntersMap > bhmaps;
	Array<TSP_UIButton> bh_buttons;
	
	/*override void Ticker()
	{
		super.Ticker();
		if ( GetCurrentMenu() == self && psxHandler.tsp_psxFadeAmt == 1.0 )
		{
			SetMenu("SkillMenu",episodeID);
		}
	}*/
	
	const MAPLIST_X = 72;
	const MAPLIST_Y = 192;
	
	override void Init(Menu parent)
	{
		Super.Init(parent);
		
		bhmaps.Clear();
		
		TSP_BountyHuntersMap newMap;
		
		for ( int i = 0; i < Wads.GetNumLumps(); i++ )
		{
			if ( Wads.GetLumpFullName(i).Left("resources/tsp_bhmaps".Length()) ~== "resources/tsp_bhmaps")
			{
				Console.Printf("Found new lump");
				string mapData = Wads.ReadLump(i);
				TSP_Tokenizer mapTokens = TSP_Tokenizer.Init(mapData);
				
				while ( mapTokens.Next() )
				{
					if ( mapTokens.Current().type == TSPT_Identifier )
					{
						if ( mapTokens.Current().value == "addmap" ) // New map discovered
						{
							newMap = new("TSP_BountyHuntersMap");
							mapTokens.Next();
							newMap.maplump = mapTokens.Current().value;
							while ( mapTokens.Next() && mapTokens.Current().type != TSPT_BraceC )
							{
								if ( mapTokens.Current().type == TSPT_Identifier )
								{
									switch(Name(mapTokens.Current().value))
									{
										case 'name':
											while ( mapTokens.Next().type != TSPT_String ) {}
											newMap.name = mapTokens.Current().value;
											break;
										case 'desc':
											while ( mapTokens.Next().type != TSPT_String ) {}
											newMap.desc = mapTokens.Current().value;
											break;
										case 'image_menu':
											while ( mapTokens.Next().type != TSPT_String ) {}
											newMap.image_menu = TexMan.CheckForTexture(mapTokens.Current().value);
											break;
									}
								}
							}
							bhmaps.Push(newMap);
							TSP_UIButton newButton = new("TSP_UIButton");
							newButton.pos = (MAPLIST_X, MAPLIST_Y + 48 * bh_buttons.Size());
							newButton.size = (256, 32);
							bh_buttons.Push(newButton);
							Console.Printf("Defined new map: '"..newMap.name.."' ("..newMap.maplump..")");
						}
					}
				}
			}
		}
	}
	
	override bool MouseEvent(int type, int x, int y)
	{
		Vector2 mousePos = ConvertMousePos((x, y));
		
		for ( int i = 0; i < bh_buttons.Size(); i++ )
		{
			if ( CheckMousePos(mousePos, bh_buttons[i].pos, bh_buttons[i].size) )
			{
				if ( i != curSelection )
				{
					S_Sound("menu/cursor",CHAN_UI);
				}
				curSelection = i;
			}
		}
		
		if ( type == Menu.MOUSE_Release )
		{
			MenuEvent(MKEY_Enter,false);
			return true;
		}
		
		return Super.MouseEvent(type, x, y);
	}
	
	override bool MenuEvent (int mkey, bool fromcontroller)
	{
		switch (mkey)
		{
			case MKEY_Up:
				if(curSelection>0)
				{
					curSelection--;
				}
				S_Sound("menu/cursor",CHAN_UI);
				return true;
			case MKEY_Down:
				if(curSelection<bhmaps.Size()-1)
				{
					curSelection++;
				}
				S_Sound("menu/cursor",CHAN_UI);
				return true;
				
			case MKEY_Enter:
				if ( curSelection != -1 )
				{
					S_Sound("menu/choose",CHAN_UI);
					if ( tsp_debug ) Console.Printf("[BH] Setting map to "..bhmaps[curSelection].maplump);
					CVar.GetCVar("_tsp_bhmap", players[0]).SetString(bhmaps[curSelection].maplump);
					Console.Printf(""..episodeID);
					SetMenu("SkillMenu",episodeID);
				}
				return true;
		}
		return super.MenuEvent(mkey, fromcontroller);
	}
	
	override void Drawer()
	{
		UpdateMenuStuff();
		
		//TextureID bg = TexMan.CheckForTexture("SPSKILL",TexMan.Type_MiscPatch);
		
		//screen.DrawTexture (bg, true, 103, 39, DTA_Clean, true);
		
		TextureID bg = TexMan.CheckForTexture("graphics/placeholder/sickomode.png",TexMan.Type_MiscPatch);
		
		/*string curName = bhmaps[curSelection];
		Font fnt = "SmallFont";
		screen.DrawText(SmallFont, Font.CR_WHITE, 160-fnt.StringWidth(curName)/2, 180, curName,
				DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);*/
				
		TSP_MenuCommon.Draw9Slice(12, 38, 320 - 24, 240 - 38 * 2);
		
		UI_DrawTexture(bhmaps[curSelection].image_menu, (640, MAPLIST_Y));
				
		UI_DrawString("tsp_bold", "MAP SELECT", (640, TSP_MENUHEADERY), TDF_ALIGN_CENTER);
		
		Vector2 mapPos = mapListPos;
		for ( int i = 0; i < bhmaps.Size(); i++ )
		{
			bh_buttons[i].Tick(ui_delta, i == curSelection);
			int buttonWidth = SmallFont.StringWidth(bhmaps[i].name);
			UI_DrawString("tsp_bold", bhmaps[i].name, bh_buttons[i].GetPos(),
				color: i == curSelection ? Color(255,255,255,0) : Color(255,255,255,255));
		}
		
		Font fnt = "tsp_small";
		BrokenLines desc = fnt.BreakLines(bhmaps[curSelection].desc, 580);
		for ( int i = 0; i < desc.Count(); i++ )
		{
			UI_DrawString("tsp_small", desc.StringAt(i), (640, 560+i*fnt.GetHeight()), TDF_ALIGN_LEFT);
		}
	}
}