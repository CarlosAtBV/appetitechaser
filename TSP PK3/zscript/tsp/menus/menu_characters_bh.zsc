Class TSP_CharMenu_Button
{
	Vector2 pos;
	Vector2 size;
	double scale;
	TextureID icon;
	bool isSelected;
	
	Class<Actor> pickClass;
	
	TSP_CharMenu_Button goLeft;
	TSP_CharMenu_Button goRight;
	
	void Tick()
	{
		scale = scale + ((isSelected ? 1.1 : 1.0) - scale) / 4;
	}
}

Class TSP_CharacterMenu_BH : TSP_MenuBase
{
	const CSS_X = 1280/2;
	const CSS_Y = 162*3;
	
	const CSS_ICONW = 68;
	const CSS_ICONH = 188;
	
	const CSS_ICONPAD = 4;//3*3;
	
	TSP_CharMenu_Button cm_curSelection;
	int css_gamemode;
	
	Array<TSP_CharMenu_Button > css_buttons;
	
	static const string gamemodeNames[] =
	{
		"$TSP_GAMEMODE_STANDARD",
		"$TSP_GAMEMODE_HUNTERS",
		"$TSP_GAMEMODE_TRAINING"
	};
	
	override void Init(Menu parent)
	{
		Super.Init(parent);
		
		css_gamemode = -1;
	}
	
	override void Ticker()
	{
		super.Ticker();
		for ( int i = 0; i < css_buttons.Size(); i ++ )
		{
			css_buttons[i].isSelected = (css_buttons[i] == cm_curSelection);
			css_buttons[i].Tick();
		}
	}
	
	void generateChars()
	{
		TSP_CharMenu_Button newChar;
		
		Array<Class<Actor> > baseGameChars;
		Array<Class<Actor> > bountyChars;
		Array<Class<Actor> > bonusChars;
		
		for ( int i = 0; i < PlayerClasses.Size(); i++ )
		{
			let thisChar = TSP_PlayerPawn_ZSCBase(GetDefaultByType(PlayerClasses[i].Type));
			
			if ( thisChar == null )
			{
				continue;
			}
			
			if ( thisChar.bBonusCharacter )
			{
				bonusChars.Push(PlayerClasses[i].Type);
			}
			else if ( thisChar.bBountyHuntersOnly && css_gamemode == 1 )
			{
				bountyChars.Push(PlayerClasses[i].Type);
			}
			else if ( !thisChar.bBountyHuntersOnly )
			{
				baseGameChars.Push(PlayerClasses[i].Type);
			}
		}
		
		int xwidth = (CSS_ICONW + CSS_ICONPAD) * (5 + bountyChars.Size());//PlayerClasses.Size();
		int xoff = (CSS_X - xwidth / 2) + CSS_ICONPAD/2;
		
		for ( int i = 0; i < 5; i++ )
		{
			newChar = new("TSP_CharMenu_Button");
			
			if ( i < baseGameChars.Size() )
			{
				let thisChar = TSP_PlayerPawn_ZSCBase(GetDefaultByType(baseGameChars[i]));
				newChar.icon = TexMan.CheckForTexture(thisChar.css_button);
				newChar.pickClass = baseGameChars[i];
			}
			else
			{
				newChar.icon = TexMan.CheckForTexture("CSS_UNKN");
			}
			newChar.pos = (xoff + (CSS_ICONW + CSS_ICONPAD) * i, CSS_Y);
			newChar.size = (CSS_ICONW, CSS_ICONH);
			
			if ( i > 0 )
			{
				newChar.goLeft = css_buttons[i-1];
				css_buttons[i-1].goRight = newChar;
			}
			
			if ( cm_curSelection == null )
			{
				cm_curSelection = newChar;
			}
			
			css_buttons.Push(newChar);
		}
		
		for ( int i = 0; i < bountyChars.Size(); i++ )
		{
			newChar = new("TSP_CharMenu_Button");
			
			if ( i < baseGameChars.Size() )
			{
				let thisChar = TSP_PlayerPawn_ZSCBase(GetDefaultByType(bountyChars[i]));
				newChar.icon = TexMan.CheckForTexture(thisChar.css_button);
				newChar.pickClass = bountyChars[i];
			}
			else
			{
				newChar.icon = TexMan.CheckForTexture("CSS_UNKN");
			}
			newChar.pos = (xoff + (CSS_ICONW + CSS_ICONPAD) * (5 + i), CSS_Y);
			newChar.size = (CSS_ICONW, CSS_ICONH);
			
			newChar.goLeft = css_buttons[5 + i -1];
			css_buttons[5 + i - 1].goRight = newChar;
			css_buttons.Push(newChar);
		}
		
		int xoff_left = xoff - (CSS_ICONW + CSS_ICONPAD);
		
		for ( int i = 0; i < bonusChars.Size(); i++ )
		{
			newChar = new("TSP_CharMenu_Button");
			newChar.pickClass = bonusChars[i];
			
			let thisChar = TSP_PlayerPawn_ZSCBase(GetDefaultByType(bonusChars[i]));
			newChar.icon = TexMan.CheckForTexture(thisChar.css_button);
			newChar.pos = (xoff_left - (CSS_ICONW + CSS_ICONPAD) * i, CSS_Y);
			newChar.size = (CSS_ICONW, 30*3);
			
			if ( i > 0 )
			{
				newChar.goRight = css_buttons[i-1];
				css_buttons[i-1].goLeft = newChar;
			}
			else
			{
				newChar.goRight = css_buttons[0];
				css_buttons[0].goLeft = newChar;
			}
			
			css_buttons.Push(newChar);
		}
	}
	
	override bool MouseEvent(int type, int x, int y)
	{
		// convert x/y from screen to virtual coordinates, according to CleanX/Yfac use in DrawTexture
		Vector2 mousePos = ConvertMousePos((x, y));
		
		Console.Printf(""..mousePos);
		
		for( int i = 0; i<css_buttons.Size(); i++ )
		{
			if ( CheckMousePos(mousePos, css_buttons[i].pos, css_buttons[i].size) )
			{
				if ( css_buttons[i] != cm_curSelection )
				{
					S_Sound("menu/cursor",CHAN_UI);
				}
				cm_curSelection = css_buttons[i];
			}
		}
		
		if ( type == Menu.MOUSE_Release )
		{
			MenuEvent(MKEY_Enter,false);
			return true;
		}
		
		return Super.MouseEvent(type, x, y);
	}
	
	override bool MenuEvent (int mkey, bool fromcontroller)
	{
		switch (mkey)
		{
			case MKEY_Left:
				if ( cm_curSelection.goLeft != null )
				{
					cm_curSelection = cm_curSelection.goLeft;
				}
				S_Sound("menu/cursor",CHAN_UI);
				return true;
			case MKEY_Right:
				if ( cm_curSelection.goRight != null )
				{
					cm_curSelection = cm_curSelection.goRight;
				}
				S_Sound("menu/cursor",CHAN_UI);
				return true;
				
			case MKEY_Enter:
				S_Sound("menu/choose",CHAN_UI);
				for ( int i = 0; i < PlayerClasses.Size(); i++ )
				{
					if ( PlayerClasses[i].Type == cm_curSelection.pickClass )
					{
						SetMenu("EpisodeMenu", i);
						return true;
					}
				}
				return true;
		}
		return super.MenuEvent(mkey, fromcontroller);
	}
	
	override void TSP_MenuDrawer()
	{
		//Draw9Slice(213*3, 34*3, 161*3, 134*3, "graphics/menu/common/border/border_bg_green.png", 8);
		Draw9Slice(0, 478, 1280, 210, "graphics/menu/common/border/border_bg_green.png", 8);
		
		//int gamemode = Cvar.GetCVar("tsp_gamemode",players[0]).GetInt();
		DrawText("tsp_bold", 1280/2, 8, gamemodeNames[css_gamemode].MakeUpper(), centered: true);
		//screen.DrawText(SmallFont, Font.CR_WHITE, 0, 4, gamemodeNames[css_gamemode], DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
		
		//TextureID warnlimt = TexMan.CheckForTexture("WARNLIMT",TexMan.Type_MiscPatch);
		//screen.DrawTexture (warnlimt, true, 0, 0, DTA_VirtualWidth, 320, DTA_VirtualHeight, 200);
		
		//TextureID dd_slotBG = TexMan.CheckForTexture("HUD_MELB",TexMan.Type_MiscPatch);
		//TextureID dd_charBG = TexMan.CheckForTexture("TESTMEL2",TexMan.Type_MiscPatch);
		
		//screen.DrawTexture (dd_charBG, true, 0, 0, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
		
		//let curChar = GetDefaultByType(PlayerClasses[cm_curSelection].Type);
		
		for( int cx = 0; cx < css_buttons.Size(); cx++ )
		{	
			let curButton = css_buttons[cx];
			bool isSelected = cm_curSelection == curButton;
			int texH = TexMan.GetSize(curButton.icon);
			screen.DrawTexture (curButton.icon, true, curButton.pos.x + curButton.size.x/2, curButton.pos.y + curButton.size.y/2,
				DTA_DestWidth, int(curButton.size.x), DTA_DestHeight, int(curButton.size.y),
				DTA_SrcX, texH/2 - curButton.size.x / 2,
				DTA_SrcWidth, curButton.size.x, DTA_SrcHeight, curButton.size.y,
				
				//DTA_LeftOffsetF, curButton.size.x/2,
				DTA_CenterOffset, true,
				DTA_ScaleX, curButton.scale,
				DTA_ScaleY, curButton.scale,
				
				DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
				DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
				DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));
		}
		
	}
}