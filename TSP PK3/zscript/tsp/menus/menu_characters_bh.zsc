Class TSP_CharacterMenu_BH : GenericMenu
{
	const CSS_X = 10;
	const CSS_Y = 150;
	
	const CSS_ICONW = 56;
	const CSS_ICONH = 31;
	
	int cm_curSelection;
	
	static const string gamemodeNames[] =
	{
		"$TSP_GAMEMODE_STANDARD",
		"$TSP_GAMEMODE_HUNTERS",
		"$TSP_GAMEMODE_TRAINING"
	};
	
	override bool MenuEvent (int mkey, bool fromcontroller)
	{
		switch (mkey)
		{
			case MKEY_Left:
				cm_curSelection = 0;
				S_Sound("menu/cursor",CHAN_UI);
				return true;
			case MKEY_Right:
				cm_curSelection = 1;
				S_Sound("menu/cursor",CHAN_UI);
				return true;
				
			case MKEY_Enter:
				S_Sound("menu/choose",CHAN_UI);
				SetMenu("EpisodeMenu",cm_curSelection);
				return true;
		}
		return super.MenuEvent(mkey, fromcontroller);
	}
	
	override void Drawer()
	{
		bool side = false;
		int dd_it = 0;
		
		//int gamemode = Cvar.GetCVar("tsp_gamemode",players[0]).GetInt();
		//screen.DrawText(SmallFont, Font.CR_WHITE, 160-SmallFont.StringWidth(StringTable.Localize(gamemodeNames[gamemode]))/2, 4, gamemodeNames[gamemode], DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
		
		TextureID warnlimt = TexMan.CheckForTexture("WARNLIMT",TexMan.Type_MiscPatch);
		//screen.DrawTexture (warnlimt, true, 0, 0, DTA_VirtualWidth, 320, DTA_VirtualHeight, 200);
		
		TextureID dd_slotBG = TexMan.CheckForTexture("HUD_MELB",TexMan.Type_MiscPatch);
		TextureID dd_charBG = TexMan.CheckForTexture("TESTMEL2",TexMan.Type_MiscPatch);
		
		
		
		screen.DrawTexture (dd_charBG, true, 0, 0, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
		screen.Dim("#000000", 0.5, 0, screen.GetHeight()*(128.0/240.0), screen.GetWidth(), screen.GetHeight()*(105.0/240.0));
		
		let curChar = GetDefaultByType(PlayerClasses[cm_curSelection].Type);
		
		for(int v = 0;v<2;v++)
		{
			int xoff = (CSS_ICONW/2)*side;
			for(int i = 0;i<5;i++)
			{
				int xpos = CSS_X+((CSS_ICONW/2)+xoff+(CSS_ICONW*i));
				int ypos = CSS_Y+(15+((CSS_ICONH+18)*v));
				
				TextureID charslot;
				
				if(dd_it<PlayerClasses.Size())
				{
					let thisChar = GetDefaultByType(PlayerClasses[i].Type);
					charslot = TexMan.CheckForTexture(PlayerPawn(thisChar).Portrait,TexMan.Type_MiscPatch);
				}
				else
				{
					charslot = TexMan.CheckForTexture("unk_port",TexMan.Type_MiscPatch);
				}
				
				screen.DrawTexture (dd_slotBG, true, xpos, ypos, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240, DTA_LeftOffset, 37, DTA_TopOffset, 47);
				screen.DrawTexture (charslot, true, xpos, ypos, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240, DTA_LeftOffset, 37, DTA_TopOffset, 47);
				dd_it++;
			}
			side = !side;
		}
		
		//screen.DrawTexture (charicon, true, -10, 100, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
		
		Font dd_tinyfont = Font.FindFont("TinyFont");
		string selectionName = PlayerPawn.GetPrintableDisplayName(PlayerClasses[cm_curSelection].Type);
		string selectionTitle = TSP_PlayerPawn_ZSCBase(curChar).pp_menutitle;
		BrokenLines selectionDesc = dd_tinyfont.BreakLines(StringTable.Localize(TSP_PlayerPawn_ZSCBase(curChar).pp_menudesc),320-128);
		int c = selectionDesc.Count();
		for (int g = 0; g < c; g++)
		{
			screen.DrawText(dd_tinyfont, Font.CR_WHITE, 16, 16+BigFont.GetHeight()+8+(dd_tinyfont.GetHeight()+1)*g, selectionDesc.StringAt(g), DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
		}
		
		screen.DrawText(BigFont, Font.FindFontColor("TSPGreen1"), 16, 10, selectionName, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
		screen.DrawText(SmallFont, Font.FindFontColor("TSPGreen1"), 16, 29, selectionTitle, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
		
	}
}