Class TSP_MenuBase_ListButton : TSP_UIButton
{
	string desc;
	ListMenuItemSelectable item;
	Font fnt;
	bool isSelected;
	double flash;
	Color color;
	
	TSP_MenuBase_ListButton buttonUp;
	TSP_MenuBase_ListButton buttonDown;
	
	override void Tick(float delta, int state)
	{
		super.Tick(delta, state);
		if ( flash > 0 )
		{
			flash -= delta*5;
			if ( flash < 0 )
			{
				flash = 0;
			}
		}
	}
}

Class TSP_ListMenuHiRes : ListMenu
{
	//mixin TSP_HiResBase;
	mixin TSP_UIDrawMixin;
	
	Array<TSP_MenuBase_ListButton> tsp_buttons;
	
	TSP_MenuBase_ListButton mb_curSelection;
	double buttonFlash;
	
	double tsp_lerpX;
	double tsp_bgDim;
	string tsp_menuTitle;
	
	ListMenuItemSelectable tsp_storedMenu;
	bool isQuitting;
	
	const MENUBUTX = 73;
	const MENUBUTY = 228;
	const MENUBUTH = 57;
	
	double easeOutBack (double x)
	{
		double c1 = 1.70158;
		double c3 = c1 + 1;

		return 1 + c3 * ((x - 1) ** 3) + c1 * ((x - 1) ** 2);
	}
	
	double easeOutExpo (double x)
	{
		return (x == 1) ? 1 : 1 - ((2) ** (-10 * x));
	}
	
	void AddButton(string name, string desc = "Add description pls", ListMenuItemSelectable item = null, Color color = Font.CR_UNTRANSLATED)
	{
		TSP_MenuBase_ListButton newButton;
		newButton = new("TSP_MenuBase_ListButton");
		newButton.text = StringTable.Localize(name);//.MakeUpper();
		newButton.desc = desc;
		newButton.item = item;
		newButton.fnt = "tsp_bold";
		newButton.color = color;
		newButton.size = (newButton.fnt.StringWidth(name), 35);
		newButton.pos = (MENUBUTX, MENUBUTY + MENUBUTH * tsp_buttons.Size());
		
		if ( tsp_buttons.Size() > 0 )
		{
			newButton.buttonUp = tsp_buttons[tsp_buttons.Size()-1];
			tsp_buttons[tsp_buttons.Size()-1].buttonDown = newButton;
		}
		
		tsp_buttons.Push(newButton);
	}
	
	override void Init(Menu parent, ListMenuDescriptor desc)
	{
		Super.Init(parent, desc);
		
		DontDim = true;
		
		tsp_buttons.Clear();
		
		tsp_menuTitle = "";
		
		Vector2 basePos = (MENUBUTX, MENUBUTY);
		
		for( int i = 0; i < mDesc.mItems.Size(); i++ )
		{
			let menuitem = ListMenuItemTextItem(mDesc.mItems[i]);
			if ( menuitem )
			{
				AddButton(menuitem.mText, menuitem.mText.."_SUB", ListMenuItemSelectable(mDesc.mItems[i]), Font.FindFontColor("TSPMenuGreen"));
				continue;
			}
			
			if ( ListMenuItemStaticText(mDesc.mItems[i]) && tsp_menuTitle == "" )
			{
				tsp_menuTitle = ListMenuItemStaticText(mDesc.mItems[i]).mText;
				continue;
			}
		}
		
		if ( tsp_buttons.Size() > 0 )
		{
			mb_curSelection = tsp_buttons[0];
		}
		
		tsp_bgDim = (mParentMenu == null) ? 0.0 : 1.0;
		tsp_storedMenu = null;
		
		animated = true;
	}
	
	override void OnReturn()
	{
		tsp_storedMenu = null;
	}
	
	override void Ticker()
	{
		super.Ticker();
		
		if ( tsp_storedMenu == null && isQuitting == false )
		{
			/*if ( tsp_lerpX < 1.0 )
			{
				tsp_lerpX += 0.05;
			}*/
			
			if ( mParentMenu == null && tsp_bgDim < 1.0 )
			{
				tsp_bgDim += 0.1;
				if ( tsp_bgDim > 1.0 )
				{
					tsp_bgDim = 1.0;
				}
			}
		}
	}
	
	override bool MouseEvent(int type, int x, int y)
	{
		Vector2 mousePos = ConvertMousePos((x, y));
		
		TSP_MenuBase_ListButton newSel = null;
		
		for( int i = 0; i < tsp_buttons.Size(); i++ )
		{
			if ( CheckMousePos(mousePos, tsp_buttons[i].pos, tsp_buttons[i].size) )
			{
				newSel = tsp_buttons[i];
			}
		}
		
		if ( newSel != mb_curSelection )
		{
			if ( newSel != null )
			{
				newSel.flash = 1.0;
				//S_Sound("menu/cursor",CHAN_UI);
				MenuSound("menu/cursor");
			}
		}
		mb_curSelection = newSel;
		
		if ( type == Menu.MOUSE_Release )
		{
			if ( mb_curSelection != null )
			{
				MenuEvent(MKEY_Enter,false);
			}
			return true;
		}
		
		return Super.MouseEvent(type, x, y);
	}
	
	override bool MenuEvent (int mkey, bool fromcontroller)
	{
		if ( mb_curSelection == null )
		{
			mb_curSelection = tsp_buttons[0];
		}
		
		switch (mkey)
		{
			case MKEY_Up:
				if ( mb_curSelection.buttonUp != null )
				{
					mb_curSelection = mb_curSelection.buttonUp;
				}
				mb_curSelection.flash = 1.0;
				MenuSound("menu/cursor");
				return true;
				
			case MKEY_Down:
				if ( mb_curSelection.buttonDown != null )
				{
					mb_curSelection = mb_curSelection.buttonDown;
				}
				mb_curSelection.flash = 1.0;
				S_Sound("menu/cursor",CHAN_UI);
				return true;
				
			case MKEY_Enter:
				S_Sound("menu/choose",CHAN_UI);
				if ( mb_curSelection != null )
				{
					mb_curSelection.item.Activate();
					//tsp_storedMenu = mb_curSelection.item;
					//SetMenu(mb_curSelection.menu, 0);
					return true;
				}
				
			case MKEY_Back:
				Close();
				let m = GetCurrentMenu();
				MenuSound(m != null ? "menu/backup" : "menu/clear");
				if ( !m )
				{
					menuDelegate.MenuDismissed();
				}
				else if ( TSP_ListMenuHiRes(m) )
				{
					TSP_ListMenuHiRes(m).tsp_lerpX = 0.0;
				}
				//isQuitting = true;
				//tsp_storedMenu = "shut the fuck up";
				return true;
		}
		return super.MenuEvent(mkey, fromcontroller);
	}
	
	override void Drawer()
	{	
		UpdateMenuStuff();
		
		screen.Dim("#000000", tsp_bgDim * 0.5, 0, 0, screen.GetWidth(), screen.GetHeight());
		
		if ( tsp_storedMenu == null && isQuitting == false )
		{
			if ( tsp_lerpX < 1.0 )
			{
				tsp_lerpX += ui_delta*2;
			}
		}
		
		Vector2 menuOffset = (-1280 + 1280 * easeOutExpo(tsp_lerpX), 0);
		Font fnt_header = "tsp_bold";
		int offset = 192 + fnt_header.StringWidth(tsp_menuTitle);
		
		UI_DrawImage("graphics/menu/menu_listheader.png", (menuOffset.x - 1280 + offset, 0));
		UI_DrawString("tsp_bold", tsp_menuTitle, (menuOffset.x + 87, 114));
		
		UI_DrawImage("graphics/menu/menu_listbg.png", (menuOffset.x, 0));
		
		//screen.Dim("#00FF00", 1.0, 0, 0, screen.GetWidth(), screen.GetHeight());
			
		/*screen.DrawText("tsp_bold", Font.CR_WHITE, 0, 0, ""..CVar.FindCVar("playerclass").GetString(),
			DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
			DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
			DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));*/
		
		Font fnt = "tsp_bold";
		String testString = "FUCK";
		for ( int i = 0; i < tsp_buttons.Size(); i++ )
		{
			let button = tsp_buttons[i];
			button.Tick(ui_delta, button == mb_curSelection);
			UI_DrawMenuButton(button.text, menuOffset + button.GetPos(), button == mb_curSelection);
		}
		
		if ( mb_curSelection )
		{
			UI_DrawImage("graphics/menu/menu_listflash.png", mb_curSelection.pos + (16, 35/2), alpha: mb_curSelection.flash / 4, style: STYLE_Add);
			UI_DrawString("tsp_small", mb_curSelection.desc, (menuOffset.x + 87, 579));
			/*screen.DrawText("tsp_small", Font.CR_UNTRANSLATED, menuOffset.x + 87, 579, mb_curSelection.desc,
				DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
				DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
				DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));*/
		}
	}
}