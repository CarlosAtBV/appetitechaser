Class TSP_EpisodeMenu_Item
{
	TextureID patch;
	string name;
	string sub;
	int id;
	
	int mYpos;
	int mXpos;
	int mWidth;
	int mHeight;
	
	/*virtual int GetWidth()
	{
		//return max(1, max(mFont.StringWidth(StringTable.Localize(name)),mFont.StringWidth(StringTable.Localize(sub)))); 
	}*/
}

Class TSP_EpisodeMenu : GenericMenu
{
	Array<TSP_EpisodeMenu_Item > episodes;
	
	int em_itemSelected;
	int em_itemHovered;
	
	static const string numerals[] =
	{
		"I",
		"II",
		"III",
		"IV",
		"V",
		"VI",
		"VII",
		"VIII",
		"IX",
		"X",
		"XI",
		"XII",
		"XIII",
		"XIV",
		"XV",
		"XVI",
		"XVII",
		"XVII",
		"XIX"
	};
	
	void updateShit()
	{
		int maxSize = episodes.Size();
		int gamemode = CVar.GetCVar("tsp_gamemode",players[0]).GetInt();
		int selHeight = BigFont.GetHeight()+3+SmallFont.GetHeight()+1;
		for(int i = 0;i<episodes.Size();i++)
		{
			Console.Printf(""..episodes[i].name);
			switch(gamemode)
			{
				case 0:
					if(episodes[i].name.Left(3)=="TSP")
					{
						episodes.Delete(i);
						i--;
					}
					break;
				case 1:
					if(episodes[i].name.Left(5)!="TSPBH")
					{
						episodes.Delete(i);
						i--;
					}
					else
					{
						array<string > fucker;
						fucker.Clear();
						episodes[i].name.Split(fucker,":");
						episodes[i].name = StringTable.Localize("$TSPMAP_"..fucker[1].."_NAME");
						episodes[i].sub = StringTable.Localize("$TSPMAP_"..fucker[1].."_DESC");
					}
					break;
			}
		}
		
		int sx = 20;
		int sy = 17;
		for(int i = 0;i<episodes.Size();i++)
		{
			if(i==6)
			{
				sx += 140;
				sy = 17;
			}
			episodes[i].mXpos = sx;
			episodes[i].mYpos = sy;
			episodes[i].mWidth = 160;
			episodes[i].mHeight = selHeight-2;
			sy += selHeight;
		}
		
		if(gamemode==2)
		{
			SetMenu("SkillMenu",maxSize-1);
		}
	}
	
	void DrawTextOutline(Font font, Color color, int x, int y, string text)
	{
		Color color_outline = Font.FindFontColor("TSPVantaBlack");
		
		screen.DrawText(font, color_outline, x-1, y, text, DTA_Clean, true);
		screen.DrawText(font, color_outline, x, y-1, text, DTA_Clean, true);
		screen.DrawText(font, color_outline, x+1, y, text, DTA_Clean, true);
		screen.DrawText(font, color_outline, x, y+1, text, DTA_Clean, true);
		
		screen.DrawText(font, color, x, y, text, DTA_Clean, true);
	}
	
	override void Drawer()
	{
		TextureID bg = TexMan.CheckForTexture("SPSKILL",TexMan.Type_MiscPatch);
		TextureID header = TexMan.CheckForTexture("SP_EPIS",TexMan.Type_MiscPatch);
		
		screen.DrawTexture (bg, true, 103, 39, DTA_Clean, true);
		screen.DrawTexture (header, true, 103, 39, DTA_Clean, true);
		
		int sx = 20;
		int sy = 17;
		
		bool getout;
		int iterator = 0;
		for(int i = 0;i<2;i++)
		{
			for(int v = 0;v<6;v++)
			{
				string bTitle, bSub;
				
				sx = episodes[iterator].mXpos;
				sy = episodes[iterator].mYpos;
				
				if(episodes[iterator].sub=="")
				{
					bTitle = "Chapter "..iterator+1;
					bSub = episodes[iterator].name;
				}
				else
				{
					bTitle = episodes[iterator].name;
					bSub = episodes[iterator].sub;
				}
				DrawTextOutline(BigFont, em_itemSelected == iterator ? Font.CR_YELLOW : Font.FindFontColor("TSPGreen"), sx, sy, bTitle);
				sy += BigFont.GetHeight()+3;
				screen.DrawText(SmallFont, Font.CR_WHITE, sx, sy, bSub, DTA_Clean, true);
				sy += SmallFont.GetHeight()+1;
				iterator++;
				if(iterator>=episodes.Size())
				{
					getout = true;
					break;
				}
			}
			//sy = 17;
			//sx += 140;
			if(getout) break;
		}
	}

	override bool MenuEvent (int mkey, bool fromcontroller)
	{
		switch (mkey)
		{
			case MKEY_Up:
				if(em_itemSelected!=6&&em_itemSelected>0)
				{
					em_itemSelected--;
					S_Sound("menu/cursor",CHAN_UI);
				}
				return true;
			
			case MKEY_Down:
				if(em_itemSelected!=5&&em_itemSelected<episodes.Size()-1)
				{
					em_itemSelected++;
					S_Sound("menu/cursor",CHAN_UI);
				}
				return true;
			
			case MKEY_Left:
				em_itemSelected-=6;
				while(em_itemSelected<0)
				{
					em_itemSelected++;
				}
				S_Sound("menu/cursor",CHAN_UI);
				return true;
			case MKEY_Right:
				em_itemSelected+=6;
				while(em_itemSelected>=episodes.Size())
				{
					em_itemSelected--;
				}
				S_Sound("menu/cursor",CHAN_UI);
				return true;
				
			case MKEY_Enter:
				S_Sound("menu/choose",CHAN_UI);
				SetMenu("SkillMenu",episodes[em_itemSelected].id);
				return true;
		}
		return super.MenuEvent(mkey, fromcontroller);
	}
	
	override bool MouseEvent(int type, int x, int y)
	{
		int sel = -1;

		// convert x/y from screen to virtual coordinates, according to CleanX/Yfac use in DrawTexture
		x = ((x - (screen.GetWidth() / 2)) / CleanXfac) + 160;
		y = ((y - (screen.GetHeight() / 2)) / CleanYfac) + 100;
		
		int iterator = 0;
		for(int i = 0;i<episodes.Size();i++)
		{
			if(x>episodes[i].mXpos
			&& x<episodes[i].mXpos+episodes[i].mWidth
			&& y>episodes[i].mYpos
			&& y<episodes[i].mYpos+episodes[i].mHeight)
			{
				em_itemSelected = i;
				break;
			}
		}

		if (type == Menu.MOUSE_Release)
		{
			MenuEvent(MKEY_Enter,false);
			return true;
		}
		return Super.MouseEvent(type, x, y);
	}
}