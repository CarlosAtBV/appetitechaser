Class TSP_EpisodeMenu_Item
{
	TextureID patch;
	string name;
	string sub;
	int id;
	
	int mYpos;
	int mXpos;
	int mWidth;
	int mHeight;
	
	/*virtual int GetWidth()
	{
		//return max(1, max(mFont.StringWidth(StringTable.Localize(name)),mFont.StringWidth(StringTable.Localize(sub)))); 
	}*/
}

Class TSP_EpisodeMenu : GenericMenu
{
	Array<TSP_EpisodeMenu_Item > episodes;
	
	int em_itemSelected;
	int em_itemHovered;
	
	static const string numerals[] =
	{
		"I",
		"II",
		"III",
		"IV",
		"V",
		"VI",
		"VII",
		"VIII",
		"IX",
		"X",
		"XI",
		"XII",
		"XIII",
		"XIV",
		"XV",
		"XVI",
		"XVII",
		"XVII",
		"XIX"
	};
	
	int maxSize;
	
	void updateShit()
	{
		maxSize = episodes.Size();
		int gamemode = CVar.GetCVar("tsp_gamemode",players[0]).GetInt();
		int selHeight = BigFont.GetHeight()+3+SmallFont.GetHeight()+1;
		
		if ( gamemode == 1 )
		{
			//SetMenu("SkillMenu",episodes[episodes.Size()-1].id);
			//CVar.GetCVar("tsp_internal_bhepisode", players[0]).SetInt(episodes[episodes.Size()-1].id);
			Menu father = Menu.GetCurrentMenu().mParentMenu;
			//SetMenu("TSP_BountyHuntersMapMenu");
			for ( int i = 0; i < episodes.size(); i++ )
			{
				if ( episodes[i].name == "TSPSpecialMapWarp" )
				{
					SetMenu("TSP_BountyHuntersMapMenu", i);
					Menu.GetCurrentMenu().mParentMenu = father;
					Console.Printf("Set that gotdamn episode to "..episodes[episodes.Size()-1].id);
					TSP_BountyHuntersMapMenu(Menu.GetCurrentMenu()).episodeID = episodes[episodes.Size()-1].id;
					return;
				}
			}
			return;
		}
		
		for(int i = 0;i<episodes.Size();i++)
		{
			Console.Printf(""..episodes[i].name);
			
			if(episodes[i].name=="TSPSpecialMapWarp")
			{
				episodes.Delete(i);
				i--;
			}
		}
		
		int sx = 20-3;
		int sy = 17;
		for(int i = 0;i<episodes.Size();i++)
		{
			if(i==6)
			{
				sx += 140;
				sy = 17;
			}
			episodes[i].mXpos = sx;
			episodes[i].mYpos = sy;
			episodes[i].mWidth = 160;
			episodes[i].mHeight = selHeight-2;
			sy += selHeight;
		}
	}
	
	override void Drawer()
	{
		TextureID bg = TexMan.CheckForTexture("SPMENUG6",TexMan.Type_MiscPatch); //like a g6
		TextureID header = TexMan.CheckForTexture("SP_EPIS",TexMan.Type_MiscPatch);
		
		screen.DrawTexture (bg, true, 103, 39, DTA_Clean, true);
		screen.DrawTexture (header, true, 103, 39, DTA_Clean, true);
		
		int sx = 20;
		int sy = 17;
		
		bool getout;
		int iterator = 0;
		for(int i = 0;i<2;i++)
		{
			for(int v = 0;v<6;v++)
			{
				string bTitle, bSub;
				
				sx = episodes[iterator].mXpos;
				sy = episodes[iterator].mYpos;
				
				if(episodes[iterator].sub=="")
				{
					bTitle = "Chapter "..iterator+1;
					bSub = episodes[iterator].name;
				}
				else
				{
					bTitle = episodes[iterator].name;
					bSub = episodes[iterator].sub;
				}
				screen.DrawText(BigFont, em_itemSelected == iterator ? Font.FindFontColor("TSP_Yellow") : Font.FindFontColor("TSP_Green"), sx, sy, bTitle, DTA_Clean, true);
				sy += BigFont.GetHeight()+3;
				screen.DrawText(SmallFont, Font.CR_WHITE, sx+2, sy, bSub, DTA_Clean, true);
				sy += SmallFont.GetHeight()+1;
				iterator++;
				if(iterator>=episodes.Size())
				{
					getout = true;
					break;
				}
			}
			//sy = 17;
			//sx += 140;
			if(getout) break;
		}
	}

	override bool MenuEvent (int mkey, bool fromcontroller)
	{
		switch (mkey)
		{
			case MKEY_Up:
				if(em_itemSelected!=6&&em_itemSelected>0)
				{
					em_itemSelected--;
					S_Sound("menu/cursor",CHAN_UI);
				}
				return true;
			
			case MKEY_Down:
				if(em_itemSelected!=5&&em_itemSelected<episodes.Size()-1)
				{
					em_itemSelected++;
					S_Sound("menu/cursor",CHAN_UI);
				}
				return true;
			
			case MKEY_Left:
				em_itemSelected-=6;
				while(em_itemSelected<0)
				{
					em_itemSelected++;
				}
				S_Sound("menu/cursor",CHAN_UI);
				return true;
			case MKEY_Right:
				em_itemSelected+=6;
				while(em_itemSelected>=episodes.Size())
				{
					em_itemSelected--;
				}
				S_Sound("menu/cursor",CHAN_UI);
				return true;
				
			case MKEY_Enter:
				S_Sound("menu/choose",CHAN_UI);
				SetMenu("SkillMenu",episodes[em_itemSelected].id);
				return true;
		}
		return super.MenuEvent(mkey, fromcontroller);
	}
	
	override bool MouseEvent(int type, int x, int y)
	{
		int sel = -1;

		// convert x/y from screen to virtual coordinates, according to CleanX/Yfac use in DrawTexture
		x = ((x - (screen.GetWidth() / 2)) / CleanXfac) + 160;
		y = ((y - (screen.GetHeight() / 2)) / CleanYfac) + 100;
		
		int iterator = 0;
		for(int i = 0;i<episodes.Size();i++)
		{
			if(x>episodes[i].mXpos
			&& x<episodes[i].mXpos+episodes[i].mWidth
			&& y>episodes[i].mYpos
			&& y<episodes[i].mYpos+episodes[i].mHeight)
			{
				em_itemSelected = i;
				break;
			}
		}

		if (type == Menu.MOUSE_Release)
		{
			MenuEvent(MKEY_Enter,false);
			return true;
		}
		return Super.MouseEvent(type, x, y);
	}
}

struct TSP_MenuCommon native
{
	static void Draw9Slice(int x, int y, int width, int height, string bgPic = "graphics/menu/tsp_menuborder0.png", int cornerSize = 5)
	{
		/*TextureID tex = TexMan.CheckForTexture(bgPic);
		//int cornerSize = 5;
		int texSizeX, texSizeY;
		[texSizeX, texSizeY] = TexMan.GetSize(tex);
		Vector2 texSize = (texSizeX, texSizeY);
		
		screen.DrawTexture(tex, false, x, y,
			//DTA_VirtualWidth, 320, DTA_VirtualHeight, 240,
			DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
			DTA_DestWidth, cornerSize, DTA_DestHeight, cornerSize,
			DTA_SrcWidth, cornerSize, DTA_SrcHeight, cornerSize);
		
		screen.DrawTexture(tex, false, x+width-cornerSize, y,
			//DTA_VirtualWidth, 320, DTA_VirtualHeight, 240,
			DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
			DTA_SrcX, texSize.X-cornerSize,
			DTA_DestWidth, cornerSize, DTA_DestHeight, cornerSize,
			DTA_SrcWidth, cornerSize, DTA_SrcHeight, cornerSize);
		
		screen.DrawTexture(tex, false, x, y+height-cornerSize,
			//DTA_VirtualWidth, 320, DTA_VirtualHeight, 240,
			DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
			DTA_SrcY, texSize.Y-cornerSize,
			DTA_DestWidth, cornerSize, DTA_DestHeight, cornerSize,
			DTA_SrcWidth, cornerSize, DTA_SrcHeight, cornerSize);
		
		screen.DrawTexture(tex, false, x+width-cornerSize, y+height-cornerSize,
			//DTA_VirtualWidth, 320, DTA_VirtualHeight, 240,
			DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
			DTA_SrcX, texSize.X-cornerSize, DTA_SrcY, texSize.Y-cornerSize,
			DTA_DestWidth, cornerSize, DTA_DestHeight, cornerSize,
			DTA_SrcWidth, cornerSize, DTA_SrcHeight, cornerSize);
			
		//parallels
		
		screen.DrawTexture(tex, false, x+cornerSize, y,
			DTA_SrcX, cornerSize,
			DTA_DestWidth, width - (cornerSize*2), DTA_DestHeight, cornerSize,
			DTA_SrcWidth, texSize.X - (cornerSize*2), DTA_SrcHeight, cornerSize,
				DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
				DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
				DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));
			
		screen.DrawTexture(tex, false, x+cornerSize, y+height-cornerSize,
			DTA_SrcX, cornerSize, DTA_SrcY, texSize.y-cornerSize,
			DTA_DestWidth, width - (cornerSize*2), DTA_DestHeight, cornerSize,
			DTA_SrcWidth, texSize.X - (cornerSize*2), DTA_SrcHeight, cornerSize,
				DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
				DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
				DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));
		
		screen.DrawTexture(tex, false, x, y+cornerSize,
			DTA_SrcY, cornerSize,
			DTA_DestWidth, cornerSize, DTA_DestHeight, height - (cornerSize*2),
			DTA_SrcWidth, cornerSize, DTA_SrcHeight, texSize.Y - (cornerSize*2),
				DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
				DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
				DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));
		
		screen.DrawTexture(tex, false, x+width-cornerSize, y+cornerSize,
			DTA_SrcX, texSize.x-cornerSize, DTA_SrcY, cornerSize,
			DTA_DestWidth, cornerSize, DTA_DestHeight, height - (cornerSize*2),
			DTA_SrcWidth, cornerSize, DTA_SrcHeight, texSize.Y - (cornerSize*2),
				DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
				DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
				DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));
			
		//mid
		
		screen.DrawTexture(tex, false, x+cornerSize, y+cornerSize,
			DTA_SrcX, cornerSize, DTA_SrcY, cornerSize,
			DTA_DestWidth, width-cornerSize*2, DTA_DestHeight, height-cornerSize*2,
			DTA_SrcWidth, texSize.X-cornerSize*2, DTA_SrcHeight, texSize.Y-cornerSize*2,
				DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
				DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
				DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));*/
	}
	
	static Vector2 ConvertMousePos(Vector2 mouse)
	{
		Vector2 start, size;
		[start, size] = Screen.VirtualToRealCoords((0, 0), (1280, 720), (1280, 720));
		Vector2 adjustedMPos = mouse - start;
		Vector2 virtualMPos = (adjustedMPos.x * 1280 / size.x, adjustedMPos.y * 720 / size.y);
		return virtualMPos;
	}
	
	static bool CheckMousePos(Vector2 mousePos, Vector2 start, Vector2 size)
	{
		return (mousePos.x >= start.x && mousePos.y >= start.y) && (mousePos.x < start.x+size.x && mousePos.y < start.y+size.y);
	}
}