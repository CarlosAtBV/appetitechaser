Class TSP_MessageBoxButton
{
	int id;
	String text;
	Vector2 pos;
	Vector2 size;
	double mult;
	bool isSelected;
	
	Vector2 GetPos()
	{
		return pos - (8,8) * mult;
	}
	
	Vector2 GetSize()
	{
		return size + (16,16) * mult;
	}
	
	void Tick()
	{
		mult = mult + ((isSelected ? 1.0 : 0.0) - mult) / 3;
	}
}

Class TSP_MessageBoxMenu : MessageBoxMenu
{
	mixin TSP_HiResBase;
	
	double mm_alpha;
	
	Array<TSP_MessageBoxButton> tsp_buttons;
	TSP_MessageBoxButton tsp_curSelection;
	
	//const BUTTONWIDTH = 256;
	const BUTTONHEIGHT = 72;
	
	Font fnt;
	int fontHeight;
	int c;
	int boxWidth, boxHeight;
	
	const PADDING = 32;
	
	override void Init(Menu parent, String message, int messagemode, bool playsound, Name cmd, voidptr native_handler)
	{
		super.Init(parent, message, messagemode, playsound, cmd, native_handler);
		DontDim = true;
		
		fnt = "tsp_small";
		fontHeight = fnt.GetHeight();
		c = mMessage.Count();
		mm_alpha = 0.0;
		
		boxWidth = 0;
		boxHeight = c * fontHeight + PADDING + BUTTONHEIGHT;
		
		for ( int i = 0; i < c; i++ )
		{
			int lineWidth = fnt.StringWidth(mMessage.StringAt(i));
			
			if ( boxWidth < lineWidth )
			{
				boxWidth = lineWidth;
			}
		}
		
		int BUTTONWIDTH = (boxWidth / 2) - PADDING;
		int BUTTONDIST = boxWidth/4;
		
		boxWidth += PADDING*2;
		boxHeight += PADDING*2;
		
		TSP_MessageBoxButton newButton;
		
		int buttonY = 360 + (boxHeight/2) - PADDING - BUTTONHEIGHT;
		
		newButton = new("TSP_MessageBoxButton");
		newButton.text = "$TXT_YES";
		newButton.pos = (640-BUTTONDIST-(BUTTONWIDTH/2), buttonY);
		newButton.size = (BUTTONWIDTH, BUTTONHEIGHT);
		newButton.id = 1;
		tsp_buttons.Push(newButton);
		
		newButton = new("TSP_MessageBoxButton");
		newButton.text = "$TXT_NO";
		newButton.pos = (640+BUTTONDIST-(BUTTONWIDTH/2), buttonY);
		newButton.size = (BUTTONWIDTH, BUTTONHEIGHT);
		newButton.id = 0;
		tsp_buttons.Push(newButton);
		
		tsp_curSelection = tsp_buttons[0];
		
		UpdateViewport();
	}
	
	override void Ticker()
	{
		super.Ticker();
		if ( mm_alpha < 1.0 )
		{
			mm_alpha += 0.2;
		}
		
		for ( int i = 0; i < tsp_buttons.Size(); i++ )
		{
			tsp_buttons[i].isSelected = (tsp_buttons[i] == tsp_curSelection);
			tsp_buttons[i].Tick();
		}
	}
	
	override bool MenuEvent(int mkey, bool fromcontroller)
	{
		if (mMessageMode == 0)
		{
			if ( tsp_curSelection )
			{
				if (mkey == MKEY_Left || mkey == MKEY_Right)
				{
					MenuSound("menu/cursor");
					tsp_curSelection = tsp_buttons[!tsp_curSelection.id];
					return true;
				}
				else if (mkey == MKEY_Enter)
				{
					HandleResult(tsp_curSelection.id);
					return true;
				}
				else if (mkey == MKEY_Back)
				{
					HandleResult(false);
					return true;
				}
			}
			return false;
		}
		else
		{
			Close();
			CloseSound();
			return true;
		}
	}
	
	override bool MouseEvent(int type, int x, int y)
	{
		Vector2 mousePos = ConvertMousePos((x, y));

		for ( int i = 0; i < tsp_buttons.Size(); i++ )
		{
			if ( CheckMousePos(mousePos, tsp_buttons[i].pos, tsp_buttons[i].size) )
			{
				if ( tsp_curSelection != tsp_buttons[i] )
				{
					MenuSound("menu/cursor");
				}
				tsp_curSelection = tsp_buttons[i];
			}
		}
		
		if ( type == MOUSE_Release )
		{
			return MenuEvent(MKEY_Enter, true);
		}
		
		return true;
	}
	
	override void Drawer()
	{
		mParentMenu.Drawer();
		
		UpdateViewport();
		
		Draw9Slice(640-(boxWidth/2), 360-(boxHeight/2), boxWidth, boxHeight, "graphics/menu/common/slice_default.png", 16);
		
		for ( int i = 0; i < tsp_buttons.Size(); i++ )
		{
			let button = tsp_buttons[i];
			Vector2 pos = button.GetPos();
			Vector2 size = button.GetSize();
			Draw9Slice(pos.x, pos.y, size.x, size.y, "graphics/menu/common/slice_button.png", 16);
			
			screen.DrawText(fnt, Font.CR_UNTRANSLATED,
				button.pos.x + (button.size.x / 2) - fnt.StringWidth(button.text)/2,
				button.pos.y + (button.size.y / 2) - fnt.GetHeight()/2,
				button.text,
				DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
				DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
				DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));
		}
		
		int y = 360-(boxHeight/2)+PADDING;

		for ( int i = 0; i < c; i++ )
		{
			int lineWidth = fnt.StringWidth(mMessage.StringAt(i));
			
			screen.DrawText(fnt, Font.CR_UNTRANSLATED, 640-lineWidth/2, y, mMessage.StringAt(i),
				DTA_Alpha, mm_alpha,
				DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
				DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
				DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));
				
				y += fontHeight;
		}
		
		/*screen.DrawText(fnt, Font.CR_UNTRANSLATED, 0, 0, "fuck nugget",
			DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
			DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
			DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));*/
	}
}