Class TSP_OptionMenu_Item ui
{
	Vector2 pos;
	Vector2 size;
	TSP_OptionMenu parent;
	
	string text;
	string desc;
	OptionMenuItem item;
	
	TSP_OptionMenu_Item goUp;
	TSP_OptionMenu_Item goDown;
	
	virtual void Init()
	{
		desc = item.mLabel.."_SUB";
	}
	
	virtual int GetHeight()
	{
		return 32;
	}
	
	virtual void Draw(bool isSelected, Vector2 off = (0,0))
	{
		if ( isSelected )
		{
			parent.Draw9Slice(pos.x, off.y+pos.y, size.x, size.y, "graphics/menu/common/slice_button_active.png", 16);
		}
		else
		{
			parent.Draw9Slice(pos.x, off.y+pos.y, size.x, size.y, "graphics/menu/common/slice_button.png", 16);
		}
		parent.DrawText(off+(pos.x+16, pos.y+6), text);
	}
}

Class TSP_OptionMenu_Selectable : TSP_OptionMenu_Item
{
}

const OPTIONOPTWIDTH = 316;

Class TSP_OptionMenu_Toggle : TSP_OptionMenu_Selectable
{
	override void Draw(bool isSelected, Vector2 off)
	{
		int optX = pos.x + size.x-OPTIONOPTWIDTH+8;
		parent.Draw9Slice(pos.x, off.y+pos.y, size.x-OPTIONOPTWIDTH, size.y, "graphics/menu/common/slice_default.png", 16);
		
		if ( isSelected )
		{
			parent.Draw9Slice(optX, off.y+pos.y, OPTIONOPTWIDTH, size.y, "graphics/menu/common/slice_button_active.png", 16);
		}
		else
		{
			parent.Draw9Slice(optX, off.y+pos.y, OPTIONOPTWIDTH, size.y, "graphics/menu/common/slice_button.png", 16);
		}
		
		let fuckItem = OptionMenuItemOptionBase(item);
		int selection = fuckItem.GetSelection();
		string fuckNugget = StringTable.Localize(OptionValues.GetText(fuckItem.mValues, selection));
		parent.DrawText(off+(pos.x+16, pos.y+6), text);
		parent.DrawText(off+(optX+16, pos.y+6), fuckNugget);
	}
}

Class TSP_OptionMenu_Control : TSP_OptionMenu_Selectable
{
	override void Init()
	{
		desc = "Set the desired binding for '"..item.mLabel.."'.";
	}
	
	override void Draw(bool isSelected, Vector2 off)
	{
		let controlItem = OptionMenuItemControlBase(item);
		
		if ( controlItem != null )
		{
			Array<int> keys;
			controlItem.mBindings.GetAllKeysForCommand(keys, controlItem.GetAction());
			string value = KeyBindings.NameAllKeys(keys);
			
			int optX = pos.x + size.x-OPTIONOPTWIDTH+8;
			parent.Draw9Slice(pos.x, off.y+pos.y, size.x-OPTIONOPTWIDTH, size.y, "graphics/menu/common/slice_default.png", 16);
			
			if ( isSelected )
			{
				parent.Draw9Slice(optX, off.y+pos.y, OPTIONOPTWIDTH, size.y, "graphics/menu/common/slice_button_active.png", 16);
			}
			else
			{
				parent.Draw9Slice(optX, off.y+pos.y, OPTIONOPTWIDTH, size.y, "graphics/menu/common/slice_button.png", 16);
			}
			
			parent.DrawText(off+(pos.x+16, pos.y+6), text);
			parent.DrawText(off+(optX+16, pos.y+6), value);
		}
	}
}

Class TSP_OptionMenu_Slider : TSP_OptionMenu_Selectable
{
	override void Init()
	{
		desc = "Set the desired binding for '"..item.mLabel.."'.";
	}
	
	const SLIDEROFFX = 88;
	
	override void Draw(bool isSelected, Vector2 off)
	{
		let controlItem = OptionMenuItemSlider(item);
		
		double sliderAmount = controlItem.GetSliderValue();
		
		parent.Draw9Slice(pos.x, off.y+pos.y, size.x-OPTIONOPTWIDTH, size.y, "graphics/menu/common/slice_default.png", 16);
			
		int optX = pos.x + size.x-OPTIONOPTWIDTH+8;
		
		parent.DrawText(off+(pos.x+16, pos.y+6), item.mLabel);
		
		// Slider Part
		
		parent.Draw9Slice(optX, off.y+pos.y, OPTIONOPTWIDTH, size.y, "graphics/menu/common/slice_default.png", 16);
				
		parent.Draw9Slice(optX + SLIDEROFFX + 8, off.y+pos.y+8, OPTIONOPTWIDTH-SLIDEROFFX-16-8, 16, "graphics/menu/common/slider_bg.png", 16);
		
		parent.Draw9Slice(optX + SLIDEROFFX - 2, off.y+pos.y - 2, 32 + 4, size.y + 4, isSelected ? "graphics/menu/common/slice_button_active.png" : "graphics/menu/common/slice_button.png", 16);
		
		parent.DrawText(off+(optX+16, pos.y+6), ""..String.format("%.2f", sliderAmount));
	}
}

Class TSP_OptionMenu_Header : TSP_OptionMenu_Item
{
	override void Draw(bool isSelected, Vector2 off)
	{
		parent.DrawText(off+(pos.x, pos.y+6), text);
	}
}

Class TSP_OptionMenu : OptionMenu
{
	mixin TSP_HiResBase;
	Array<TSP_OptionMenu_Item> tsp_buttons;
	int scrollY;
	double scrollYLerp;
	int maxScroll;
	
	TSP_OptionMenu_Item tsp_curSel;
	
	const CLIPHEIGHT = 470;
	const CLIPY = 128;
	
	override void Init(Menu parent, OptionMenuDescriptor desc)
	{
		super.Init(parent, desc);
		
		TSP_OptionMenu_Item newButton;
		
		int y = 0;
		
		for( int i=0; i<mDesc.mItems.Size(); i++ )
		{
			let item = mDesc.mItems[i];
			if ( item is "OptionMenuItemStaticText" || item is "OptionMenuItemStaticTextSwitchable" )
			{
				newButton = new("TSP_OptionMenu_Header");
			}
			else if ( item is "OptionMenuItemControlBase" )
			{
				newButton = new("TSP_OptionMenu_Control");
			}
			else if ( item is "OptionMenuItemOptionBase" )
			{
				newButton = new("TSP_OptionMenu_Toggle");
			}
			else if ( item is "OptionMenuItemSlider" )
			{
				newButton = new("TSP_OptionMenu_Slider");
			}
			else
			{
				newButton = new("TSP_OptionMenu_Selectable");
			}
			newButton.text = item.mLabel;
			newButton.pos = (64, y);
			newButton.size = (782, 32);
			newButton.item = item;
			newButton.parent = self;
			
			newButton.Init();
			//newButton.desc = "Funny description goes here! Paul Blart: Mall Cop 2.";
			if ( tsp_buttons.Size() > 0 )
			{
				for ( int i = tsp_buttons.Size()-1; i >= 0; i-- )
				{
					if ( tsp_buttons[i] is "TSP_OptionMenu_Selectable" )
					{
						tsp_buttons[i].goDown = newButton;
						newButton.goUp = tsp_buttons[i];
						break;
					}
				}
			}
			tsp_buttons.Push(newButton);
			
			y += 32+10;
		}
		
		let heightRef = tsp_buttons[tsp_buttons.Size()-1];
		maxScroll = heightRef.pos.y + heightRef.size.y - CLIPHEIGHT;
		
		for ( int i = 0; i < tsp_buttons.Size(); i++ )
		{
			if ( tsp_buttons[i] is "TSP_OptionMenu_Selectable" )
			{
				tsp_curSel = tsp_buttons[i];
				break;
			}
		}
	}
	
	override bool OnUIEvent(UIEvent ev)
	{
		if (ev.type == UIEvent.Type_WheelUp && scrollY > 0)
		{
			scrollY = max(0, scrollY-64);
			return true;
		}
		else if (ev.type == UIEvent.Type_WheelDown && scrollY < maxScroll)
		{
			scrollY = min(maxScroll, scrollY+64);
			return true;
		}
		return Super.OnUIEvent(ev);
	}
	
	override void Ticker()
	{
		super.Ticker();
		
		scrollYLerp = scrollYLerp + (scrollY - scrollYLerp) / 2;
		if ( abs(scrollY - scrollYLerp) < 2 )
		{
			scrollYLerp = scrollY;
		}
	}
	
	override bool MenuEvent (int mkey, bool fromcontroller)
	{
		switch (mkey)
		{
			case MKEY_Up:
				if ( tsp_curSel && tsp_curSel.goUp != null )
				{
					tsp_curSel = tsp_curSel.goUp;
					while ( scrollY > (tsp_curSel.pos.y) )
					{
						scrollY--;
					}
					//scrollY = min(scrollY, tsp_curSel.pos.y);
					//scrollY = min(scrollY, tsp_curSel.pos.y+tsp_curSel.size.y);
					S_Sound("menu/cursor",CHAN_UI);
				}
				return true;
				
			case MKEY_Down:
				if ( tsp_curSel && tsp_curSel.goDown != null )
				{
					tsp_curSel = tsp_curSel.goDown;
					while ( scrollY < (tsp_curSel.pos.y + tsp_curSel.size.y - CLIPHEIGHT) )
					{
						scrollY++;
					}
					S_Sound("menu/cursor",CHAN_UI);
				}
				return true;
				
			case MKEY_Enter:
				if ( tsp_curSel != null && tsp_curSel.item.Activate() )
				{
					//S_Sound("menu/choose",CHAN_UI);
					return true;
				}
				return true;
			
			default:
				if ( tsp_curSel && tsp_curSel.item.MenuEvent(mkey, fromcontroller) )
				{
					return true;
				}
				return Super.MenuEvent(mkey, fromcontroller);
		}
		return super.MenuEvent(mkey, fromcontroller);
	}
	
	override bool MouseEvent(int type, int x, int y)
	{
		// convert x/y from screen to virtual coordinates, according to CleanX/Yfac use in DrawTexture
		Vector2 mousePos = ConvertMousePos((x, y));
		
		if ( mousePos.y > CLIPY && mousePos.y < CLIPY + CLIPHEIGHT )
		{
			for( int i = 0; i < tsp_buttons.Size(); i++ )
			{
				if ( tsp_buttons[i] is "TSP_OptionMenu_Selectable" && CheckMousePos(mousePos - (0, (CLIPY - int(scrollYLerp))), tsp_buttons[i].pos, tsp_buttons[i].size) )
				{
					if ( tsp_buttons[i] != tsp_curSel )
					{
						S_Sound("menu/cursor",CHAN_UI);
					}
					tsp_curSel = tsp_buttons[i];
				}
			}
			
			if ( type == Menu.MOUSE_Release && tsp_curSel != null )
			{
				tsp_curSel.item.MouseEvent(type, x, y);
				return true;
			}
		}
		
		return Super.MouseEvent(type, x, y);
	}
	
	override void Drawer ()
	{
		UpdateViewport();
		
		Font fnt = "tsp_small";
		
		DrawText((68, 74), mDesc.mTitle.MakeUpper(), "tsp_bold");
		
		screen.SetClipRect(0, CLIPY, 1280, CLIPHEIGHT);
		
		for ( int i = 0; i < tsp_buttons.Size(); i++ )
		{
			let button = tsp_buttons[i];
			
			button.Draw(button == tsp_curSel, (0, CLIPY - int(scrollYLerp)));
		}
		
		screen.ClearClipRect();
		
		if ( tsp_curSel != null )
		{
			DrawText((84, 614), tsp_curSel.desc);
		}
	}
	
	void DrawText(Vector2 pos, string text, Font fnt = "tsp_small")
	{
		screen.DrawText(fnt, Font.CR_UNTRANSLATED, pos.x, pos.y, text,
			DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720, DTA_KeepRatio, true,
			DTA_ViewportX, int(viewportPos.x), DTA_ViewportY, int(viewportPos.y),
			DTA_ViewportWidth, int(viewportSize.x), DTA_ViewportHeight, int(viewportSize.y));
	}
}