Class TSP_UpgradeBase : Inventory
{
	Default
	{
		Inventory.Amount 1;
		Inventory.PickupMessage "NOPE!";
	}
	
	virtual void UpgradeEffect(Actor victim)
	{
	}
	
	override bool TryPickup (in out Actor other)
	{
		if(super.TryPickup(other))
		{
			TSP_PlayerPawn_ZSCBase(other).AddLogMessage(PickupMsg,0);
			return true;
		}
		return false;
	}
	override String PickupMessage ()
	{
		return "";
	}
}

// MEL

Class TSP_Upgrade_RapidFireInf : TSP_UpgradeBase
{
	Default
	{
		Inventory.PickupMessage "$RapidFireInfPickup";
		Inventory.MaxAmount 3;
	}
}

Class TSP_Upgrade_ChargeStyle : TSP_UpgradeBase
{
	Default
	{
		Inventory.PickupMessage "$ChargeStylePickup";
	}
}
Class TSP_Upgrade_ChargeDunk : TSP_UpgradeBase
{
	Default
	{
		Inventory.PickupMessage "$ChargeDunkPickup";
	}
}

Class TSP_Upgrade_MagSpear : TSP_UpgradeBase

{
	Default
	{
		Inventory.PickupMessage "$MagSpearPickup";
	}
}
Class TSP_Upgrade_MagSling : TSP_UpgradeBase
{
	Default
	{
		Inventory.PickupMessage "$MagSlingPickup";
	}
}
Class TSP_Upgrade_PowerBank : TSP_UpgradeBase
{
	Default
	{
		Inventory.PickupMessage "$PowerBankPickup";
	}
}

// RETROGRADE MEL

Class TSP_Upgrade_KeepAwayCombo : TSP_UpgradeBase
{
	Default
	{
		Inventory.PickupMessage "$KeepAwayPickup";
	}
}

Class TSP_Upgrade_CrossSaber : TSP_UpgradeBase
{
	Default
	{
		Inventory.PickupMessage "$CrossSaberPickup";
	}
}

Class TSP_Upgrade_Shield : TSP_UpgradeBase
{
	Default
	{
		Inventory.PickupMessage "$ShieldUpgradeA";
		Inventory.MaxAmount 3;
	}
	
	override void UpgradeEffect(Actor victim)
	{
		victim.GiveInventory("TSP_PlayerPawn_MaxShield",25);
		//Console.Printf("\ccYour shield is enhanced further... [\cf"..victim.CountInv("TSP_PlayerPawn_MaxShield").."\cc]");
	}
}