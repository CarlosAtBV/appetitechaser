Class TSP_BountyHunters_TimeExtCrystal : Actor
{
	Default
	{
		Health 15;
		Height 68;
		+FLOATBOB
		+ROLLSPRITE
		+ROLLCENTER
		+DONTTHRUST
		+BRIGHT
		+SOLID
		+NOBLOOD
	}
	
	int dmgDone;
	
	States
	{
		Spawn:
			BHTS ABCDEFGHIJKLMNOP 2;
			Loop;
		Death:
			BHTC A 0
			{
				if(target==null)
				{
					return;
				}
				A_FaceTarget();
				int daAngle = angle+90;
				for ( int i = 0; i < 16; i++ )
				{
					int yerAngle = i*(360/16);
					double daX = cos(yerAngle);
					double daY = sin(yerAngle);
					Actor debris = Spawn("TSP_BountyHunters_TimeExtCrystal_Debris", pos + (0, 0, 48) + (daX * cos(daAngle), daX * sin(daAngle), daY) * 12);
					double randangle = daAngle + frandom(-25,25);
					debris.vel = (daX * cos(randangle), daX * sin(randangle), daY) * frandom(4,12);
					debris.roll = (yerAngle)-90;
				}
			}
			Stop;
	}
	
	virtual void CrystalDeathMoment()
	{
		let event = TSP_BHHandler(EventHandler.Find("TSP_BHHandler"));
		if(event)
		{
			event.BH_AddTime(30);
			TSP_PlayerPawn_ZSCBase(target).AddLogMessage("$TimeCrystal",30);
		}
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if(other.player)
		{
			return true;
		}
		return false;
	}
	
	override void Tick()
	{
		super.Tick();
		A_SetRoll(BobSin(FloatBobPhase + level.maptime*1.5),SPF_INTERPOLATE);
	}
	
	override int DamageMobj (Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if(dmgDone<15)
		{
			dmgDone += damage;
			if(dmgDone>=15)
			{
				target = source;
				CrystalDeathMoment();
				SetStateLabel("Death");
			}
		}
		return 0;
	}
}

Class TSP_BountyHunters_ComboCrystal : TSP_BountyHunters_TimeExtCrystal
{
	Default
	{
		+SHOOTABLE
	}
	
	States
	{
		Spawn:
			BHCS ABCDEFGHIJKLMNOP 2;
			Loop;
		Death:
			BHCC A 0
			{
				if(target==null)
				{
					return;
				}
				A_FaceTarget();
				int daAngle = angle+90;
				for ( int i = 0; i < 16; i++ )
				{
					int yerAngle = i*(360/16);
					double daX = cos(yerAngle);
					double daY = sin(yerAngle);
					Actor debris = Spawn("TSP_BountyHunters_ComboCrystal_Debris", pos + (0, 0, 48) + (daX * cos(daAngle), daX * sin(daAngle), daY) * 12);
					double randangle = daAngle + frandom(-25,25);
					debris.vel = (daX * cos(randangle), daX * sin(randangle), daY) * frandom(4,12);
					debris.roll = (yerAngle)-90;
				}
			}
			Stop;
	}
	
	override void CrystalDeathMoment()
	{
		let event = TSP_BHHandler(EventHandler.Find("TSP_BHHandler"));
		if(event)
		{
			event.BH_AddComboTime(30);
			TSP_PlayerPawn_ZSCBase(target).AddLogMessage("$ComboCrystal",30);
		}
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if ( other.player || other.target is "PlayerPawn" )
		{
			return true;
		}
		return false;
	}
}

Class TSP_BountyHunters_TimeExtCrystal_Debris : Actor
{
	Default
	{
		+NOBLOCKMAP
		//+NOINTERACTION
		+ROLLSPRITE
		+BRIGHT
		+MISSILE
		BounceType "Doom";
		BounceFactor 0.5;
		WallBounceFactor 0.5;
		//Gravity 0.9;
	}
	
	override void Tick()
	{
		super.Tick();
		A_SetRoll(roll+abs(vel.z/4), SPF_INTERPOLATE);
	}
	
	States
	{
		Spawn:
			BHTF A 0;
			BHTF A -1
			{
				frame = random(0,14);
			}
			Stop;
		Death:
			"----" A 1 A_FadeOut(0.05);
			Loop;
	}
}

Class TSP_BountyHunters_ComboCrystal_Debris : TSP_BountyHunters_TimeExtCrystal_Debris
{
	States
	{
		Spawn:
			BHCF A 0;
			BHCF A -1
			{
				frame = random(0,14);
			}
			Stop;
		Death:
			"----" A 1 A_FadeOut(0.05);
			Loop;
	}
}