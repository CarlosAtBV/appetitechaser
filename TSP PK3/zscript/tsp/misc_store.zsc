Class TSP_ShopListItem
{
}

Class TSP_ShopItem : TSP_ShopListItem
{
	Array<string > names;
	Array<string > descs;
	Array<string > icons;
	string desc;
	int price;
	int price_increment;
	BrokenLines brokendesc;
	Array<Inventory > canthave;
	Array<Inventory > musthave;
	string icon;
	
	Class<Inventory > inv_class;
	int inv_amount;
	
	Class<Weapon > mod_take;
	Class<Weapon > mod_give;
	Class<Weapon > upgrade;
	int upgradeType;
	
	int level;
	int maxlevel;
	
	void updateLevels()
	{
		if(upgrade!=null)
		{
			int tehMax;
			int tehLevel;
			TSP_Weapon_Core wepon = TSP_Weapon_Core(players[0].mo.FindInventory(upgrade,true));
			if(wepon!=null)
			{
				switch(upgradeType)
				{
					case 0:
						tehMax = TSP_Weapon_Core(GetDefaultByType(upgrade)).tspw_maxpowerlevel;
						tehLevel = wepon.tspw_powerlevel;
						break;
					case 1:
						tehMax = TSP_Weapon_Core(GetDefaultByType(upgrade)).tspw_maxammolevel;
						tehLevel = wepon.tspw_ammolevel;
						break;
					case 2:
						tehMax = TSP_Weapon_Core(GetDefaultByType(upgrade)).tspw_maxreloadlevel;
						tehLevel = wepon.tspw_reloadlevel;
						break;
				}
				level = tehLevel;
				maxlevel = tehMax;
			}
		}
		else if(inv_class!=null)
		{
			Inventory moddy = players[0].mo.FindInventory(inv_class,true);
			if(moddy!=null)
			{
				maxlevel = moddy.MaxAmount;
				level = moddy.Amount;
			}
		}
	}
	
	TextureID getIcon()
	{
		string icon;
		if(icons.Size()>0)
		{
			icon = icons[clamp(level,0,icons.Size()-1)];
		}
		return TexMan.CheckForTexture(icon,TexMan.Type_MiscPatch);
	}
	
	void Create()
	{
		updateLevels();
		while(names.Size()<=maxlevel&&names.Size()<99)
		{
			names.Push("\ckNEED NAME FOR LVL "..names.Size()+1);
		}
	}
	
	bool isMax()
	{
		if(level>=maxlevel&&maxlevel!=-1)
		{
			return true;
		}
		return false;
	}
	
	bool, string canBuy()
	{
		if(inv_class == null&&upgrade==null&&mod_give==null)
		{
			return false, StringTable.Localize("$TSP_SHOP_CANTINV");
		}
		
		TSP_PlayerPawn_ZSCBase player = TSP_PlayerPawn_ZSCBase(players[0].mo);
		
		updateLevels();
		
		if(isMax())
		{
			return false, StringTable.Localize("$TSP_SHOP_MAXAMT");
		}
		
		if(player.CountInv("TSP_GlobalDollars")<price+(price_increment*level))
		{
			return false, StringTable.Localize("$TSP_SHOP_NOMONEY");
		}
		
		if(mod_take!=null&&mod_give!=null)
		{
			if(player.CountInv(mod_give)!=0||player.CountInv(mod_take)!=1)
			{
				return false, StringTable.Localize("$TSP_SHOP_MODSEL");
			}
		}
		
		return true, "";
	}
	
	string itemString()
	{
		string giver;
		if(upgrade!=null)
		{
			giver = "upgrade:"..upgrade.GetClassName()..":"..upgradeType..":"..price;
		}
		if(mod_take!=null&&mod_give!=null)
		{
			giver = "shopmod:"..mod_take.GetClassName()..":"..mod_give.GetClassName()..":"..price;
		}
		if(inv_class != null)
		{
			giver = "buyitem:"..inv_class.GetClassName()..":"..inv_amount..":"..price+price_increment*level;
		}
		return giver;
	}
}

Class TSP_ShopEmploy
{
	int employer;
	Vector2 pos;
}

Class TSP_ShopHeader : TSP_ShopListItem
{
	int slot;
	string name;
}

Class TSP_ShopTab
{
	string name;
	string desc;
	Array<TSP_ShopListItem > itemlist;
	Array<TSP_ShopHeader > headers;
	TSP_ShopEmploy employ;
	string bg;
}

Class TSP_ShopPage
{
	Array<TSP_ShopTab > shopTabs;
	string name;
	int employer;
}

Class TSP_ShopMenu : GenericMenu
{
	const SHOP_SHOPLISTX = 162;
	const SHOP_SHOPLISTY = 2;
	const SHOP_SHOPLISTW = 158;
	const SHOP_SHOPLISTH = 22;
	const SHOP_SHOPLISTPADDING = 2;
	
	const SHOP_ITEMHEIGHT = 9;
	const SHOP_ITEMPADDING = 3;
	const SHOP_ITEMPADDINGX = 4;
	const SHOP_ITEMWIDTH = 150;
	
	Array<TSP_ShopPage > shopPages;
	Array<TSP_ShopPage > shopPages_visible;
	
	TSP_ShopPage curPage;
	TSP_ShopTab curTab;
	TSP_ShopHeader curHeader;
	
	int sm_pageSelected;
	int sm_tabSelected;
	int sm_itemSelected;
	
	int sm_pageHovered;
	int sm_tabHovered;
	int sm_itemHovered;
	
	int sm_moveMode;
	
	Font sm_tinyFont;
	
	int sm_employer;
	
	void NewShopPage (string name = "???")
	{
		if(curTab!=null) curPage.shopTabs.Push(curTab);
		curTab = null;
		if(curPage!=null) shopPages.Push(curPage);
		curPage = new("TSP_ShopPage");
		curPage.name = name;
	}
	
	void NewShopTab (string name = "???")
	{
		if(curTab!=null) curPage.shopTabs.Push(curTab);
		curTab = new("TSP_ShopTab");
		curTab.name = name;
	}
	
	void updateShopPages(int employer,int landingPage = 0)
	{
		shopPages_visible.Clear();
		sm_employer = employer;
		for(int i = 0;i<shopPages.Size();i++)
		{
			if(shopPages[i].employer == -1 || shopPages[i].employer == sm_employer)
			{
				shopPages_visible.Push(shopPages[i]);
			}
		}
		sm_pageSelected = landingPage;
		sm_tabSelected = 0;
		sm_itemSelected = 0;
		sm_pageHovered = 0;
		sm_tabHovered = 0;
		sm_itemHovered = 0;
		
		TSP_ShopPage curPage = shopPages_visible[sm_pageSelected];
		TSP_ShopTab curTab = curPage.shopTabs[sm_tabSelected];
		TSP_ShopListItem curItem;
		for(int i = 0;i<curTab.itemlist.Size();i++)
		{
			curItem = curTab.itemlist[i];
			if(curItem is "TSP_ShopItem")
			{
				sm_itemHovered = i;
				sm_itemSelected = i;
				break;
			}
		}
	}
	
	void findBestSelection()
	{
		TSP_ShopPage curPage = shopPages_visible[sm_pageSelected];
		TSP_ShopTab curTab = curPage.shopTabs[sm_tabSelected];
		TSP_ShopListItem curItem;
		sm_itemHovered = 0;
		sm_itemSelected = 0;
		for(int i = 0;i<curTab.itemlist.Size();i++)
		{
			curItem = curTab.itemlist[i];
			if(curItem is "TSP_ShopItem")
			{
				sm_itemHovered = i;
				sm_itemSelected = i;
				Console.Printf(TSP_ShopItem(curItem).names[0].." is the best");
				break;
			}
		}
	}
	
	override void Init(Menu parent)
	{
		Super.Init(parent);
		
		sm_tinyFont = "TinyFont";
		
		parseShopLumps();
		
		updateShopPages(TSP_PlayerPawn_ZSCBase(players[0].mo).gvars.tsp_employer);
	}
	
	void DrawBG(int x, int y, int width, int height, string cbg = "#000000")
	{
		Vector2 start, size;
		[start, size] = screen.VirtualToRealCoords((x,y), (width, height), (320,240));
		screen.Dim(cbg,0.5,start.x,start.y,size.x,size.y);
	}
	
	void DrawButton(string name, Vector2 center, Vector2 size, bool active = false, bool outline = false)
	{
		DrawBG(center.x-size.x/2,center.y-size.y/2,size.x,size.y, "#000000");
		DrawBG(center.x-size.x/2,center.y+(size.y/2)-4,size.x,4, active ? "#00FF00" : "#000000");
		screen.DrawText(SmallFont, active ? Font.CR_GREEN : Font.CR_WHITE, center.x-SmallFont.StringWidth(name)/2, center.y-SmallFont.GetHeight()/2, name, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
		if(outline)
		{
			DrawBG(center.x-size.x/2,center.y-size.y/2,size.x,size.y, "#FFFF00");
		}
	}
	
	override void Drawer () 
	{
		super.Drawer();
		
		string gbd_sign = "\f$";
		
		TSP_ShopPage dd_curPage = shopPages_visible[sm_pageSelected];
		TSP_ShopTab dd_curTab = dd_curPage.shopTabs[sm_tabSelected];
		
		string money = gbd_sign..players[0].mo.CountInv("TSP_GlobalDollars");
		screen.DrawText(SmallFont, Font.CR_WHITE, 4, 4, money, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
		
		DrawBG(160,0,160,240);
		
		int v = 0;
		int pageSize = shopPages_visible.Size();
		for(int i = 0;i<shopPages_visible.Size();i++)
		{
			int px = SHOP_SHOPLISTX+((SHOP_SHOPLISTW/pageSize)/2)+(SHOP_SHOPLISTW/pageSize)*i;
			int py = SHOP_SHOPLISTY+(SHOP_SHOPLISTH/2)+(SHOP_SHOPLISTH+SHOP_SHOPLISTPADDING)*v;
			DrawButton(shopPages_visible[i].name,(px,py),((SHOP_SHOPLISTW/pageSize)-2,22),sm_pageSelected == i,sm_moveMode == 0 && sm_pageHovered == i);
		}
		
		v++;
		int tabSize = shopPages_visible[sm_pageSelected].shopTabs.Size();
		for(int i = 0;i<tabSize;i++)
		{
			int px = SHOP_SHOPLISTX+((SHOP_SHOPLISTW/tabSize)/2)+(SHOP_SHOPLISTW/tabSize)*i;
			int py = SHOP_SHOPLISTY+(SHOP_SHOPLISTH/2)+(SHOP_SHOPLISTH+SHOP_SHOPLISTPADDING)*v;
			DrawButton(dd_curPage.shopTabs[i].name,(px,py),((SHOP_SHOPLISTW/tabSize)-2,22),sm_tabSelected == i,sm_moveMode == 1 && sm_tabHovered == i);
		}
		
		int sy = 52;
		int sx = SHOP_SHOPLISTX+SHOP_ITEMPADDINGX;
		
		if(dd_curTab.desc=="")
		{
			for(int i = 0;i<dd_curTab.itemlist.Size();i++)
			{
				
				TSP_ShopListItem dd_queryItem = dd_curTab.itemlist[i];
				
				if(dd_queryItem is "TSP_ShopItem")
				{
					TSP_ShopItem dd_curItem = TSP_ShopItem(dd_curTab.itemlist[i]);
					DrawBG(sx,sy,SHOP_ITEMWIDTH,SHOP_ITEMHEIGHT, "#000000");
					if(sm_itemSelected == i)
					{
						DrawBG(sx,sy+SHOP_ITEMHEIGHT-2,SHOP_ITEMWIDTH,2, "#00FF00");
					}
					bool dd_canBuy = dd_curItem.canBuy();
					string dd_name;
					if(!dd_curItem.isMax()&&dd_curItem.level<dd_curItem.names.Size())
					{
						dd_name = dd_curItem.names[dd_curItem.level];
					}
					else
					{
						dd_name = "\cm-SOLD OUT-";
					}
					
					screen.DrawText(SmallFont, dd_canBuy ? Font.CR_WHITE : Font.FindFontColor("TSPRed"), sx, sy, dd_name, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
					if(sm_itemSelected==i)
					{
						screen.DrawText(SmallFont, Font.CR_GREEN, sx, sy, dd_name, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240, DTA_Alpha, abs(sin(MenuTime()*5)));
					}
					
					string price;
					if(!dd_curItem.isMax())
					{
						price = gbd_sign..dd_curItem.price+dd_curItem.price_increment*dd_curItem.level;
					}
					else
					{
						price = "\cm---";
					}
					screen.DrawText(SmallFont, dd_canBuy ? Font.CR_GREEN : Font.FindFontColor("TSPRed"), sx+SHOP_ITEMWIDTH-SmallFont.StringWidth(price), sy, price, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
					
					if(sm_moveMode == 2 && sm_itemHovered == i)
					{
						DrawBG(sx,sy,SHOP_ITEMWIDTH,SHOP_ITEMHEIGHT, "#FFFF00");
					}
				}
				else if(dd_queryItem is "TSP_ShopHeader")
				{
					TSP_ShopHeader dd_curItem = TSP_ShopHeader(dd_curTab.itemlist[i]);
					string headText = "\cc[ \c-"..dd_curItem.name.."\cc ]";
					screen.DrawText(SmallFont, Font.FindFontColor("TSPGreen"), 160+80-SmallFont.StringWidth(headText)/2, sy, headText, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
				}
				
				sy+=SHOP_ITEMHEIGHT+SHOP_ITEMPADDING;
			}
		}
		else
		{
			TextureID tabBG = TexMan.CheckForTexture(dd_curTab.bg,TexMan.Type_MiscPatch);
			screen.DrawTexture(tabBG, true, 160, sy, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
			
			screen.DrawText(SmallFont, Font.CR_WHITE, 160+3, sy, dd_curTab.name, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
			BrokenLines tabDesc = sm_TinyFont.BreakLines(dd_curTab.desc,154);
			int c = tabDesc.Count();
			for (int g = 0; g < c; g++)
			{
				screen.DrawText("TinyFont", Font.FindFontColor("TSPVantaBlack"), 160+4, sy+SmallFont.GetHeight()+5+(sm_TinyFont.GetHeight()+1)*g, tabDesc.StringAt(g), DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
				screen.DrawText("TinyFont", Font.FindFontColor("TSPGreen"), 160+3, sy+SmallFont.GetHeight()+4+(sm_TinyFont.GetHeight()+1)*g, tabDesc.StringAt(g), DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
			}
			
			DrawButton("Accept",(curTab.employ.pos.x,curTab.employ.pos.y),(64,22),false,sm_moveMode==2);//210
		}
		
		DrawBG(2,178,156,56);
		
		TSP_ShopListItem dd_queryItem;
		if(dd_curTab.itemlist.Size()>0)
		{
			dd_queryItem = dd_curTab.itemlist[sm_itemSelected];
		}
		
		if(dd_queryItem!=null && dd_curTab.employ==null && dd_queryItem is "TSP_ShopItem")
		{
			TSP_ShopItem dd_curItem = TSP_ShopItem(dd_queryItem);
			
			TextureID dd_icon;
			
			bool dd_validItem;
			string dd_errorMessage;
			[dd_validItem, dd_errorMessage] = dd_curItem.canBuy();
			
			double dd_alpha = dd_validItem ? 1.0 : 0.75;
			
			dd_icon = dd_curItem.getIcon();
			screen.DrawTexture(dd_icon, true, 80+sin(menutime()*1)*8, 100+sin(menutime()*2)*2, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240, DTA_CenterOffset, true, DTA_TranslationIndex, dd_validItem ? 0 : Translation.GetID('TSP_Shop_Darken'), DTA_Alpha, dd_alpha);
			
			string dd_name;
			if(!dd_curItem.isMax()&&dd_curItem.level<dd_curItem.names.Size())
			{
				dd_name = dd_curItem.names[dd_curItem.level];
			}
			else
			{
				dd_name = "\c[TSPRed]-SOLD OUT-";
			}
			screen.DrawText(SmallFont, Font.CR_WHITE, 8, 183, dd_name, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
			
			string desceh;
			if(dd_curItem.level<dd_curItem.descs.Size())
			{
				desceh = StringTable.Localize(dd_curItem.descs[dd_curItem.level]);
			}
			else
			{
				desceh = "No description available.";
			}
			
			BrokenLines curDesc = sm_TinyFont.BreakLines(desceh,138);
			int c = curDesc.Count();
			for (int g = 0; g < c; g++)
			{
				screen.DrawText("TinyFont", Font.CR_WHITE, 13, 196+(SmallFont.GetHeight()*g), curDesc.StringAt(g), DTA_VirtualWidth, 320, DTA_VirtualHeight, 240, DTA_FillColor, Font.CR_BLACK);
				screen.DrawText("TinyFont", Font.FindFontColor("TSPGreen"), 12, 195+(SmallFont.GetHeight()*g), curDesc.StringAt(g), DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
			}
			
			if(!dd_validItem)
			{
				screen.DrawText(SmallFont, Font.FindFontColor("TSPRed"), 80-SmallFont.StringWidth(dd_errorMessage)/2, 100, dd_errorMessage, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
			}
		}
			
			/*int c = dd_curItem.brokendesc.Count();
			for (int g = 0; g < c; g++)
			{
				Screen.DrawText(SmallFont, Font.FindFontColor("TSPGreen"), sx, sy+SmallFont.GetHeight()+(SmallFont.GetHeight()*g), dd_curItem.brokendesc.StringAt(g), DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
			}*/
	}
}