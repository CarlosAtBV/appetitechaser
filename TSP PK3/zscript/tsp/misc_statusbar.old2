Class TSP_NotificationLogger
{
	string message;
	int time;
}

Class TSP_StatusBar : BaseStatusBar
{
	HUDFont mHUDFont;
	HUDFont mSmallFont;
	HUDFont mAmountFont;
	HUDFont mTinyFont;
	InventoryBarState diparms;
	LinearValueInterpolator mHealthInterpolator;
	LinearValueInterpolator mShieldInterpolator;
	LinearValueInterpolator mMoneyInterpolator;
	LinearValueInterpolator mChargeInterpolator;
	
	TSP_PlayerPawn_ZSCBase tsp_player;
	
	double mTraitAlpha;
	
	bool isDebug;
	
	Array<TSP_NotificationLogger> tsp_notifs;
	
	override bool ProcessNotify(EPrintLevel printlevel, String outline)
	{
		if(level.maptime==0) return true;
		if(printlevel == PRINT_MEDIUM||printlevel == PRINT_HIGH)
		{
			TSP_NotificationLogger notif = new("TSP_NotificationLogger");
			notif.message = outline;
			notif.time = 4*35;
			tsp_notifs.Insert(0,notif);
			
			if(tsp_notifs.Size()>4)
			{
				tsp_notifs.Delete(tsp_notifs.Size()-1);
			}
		}
		return true;
	}

	override void Init()
	{
		Super.Init();
		SetSize(0, 320, 240);

		// Create the font used for the fullscreen HUD
		Font fnt = "TSP_HUDFONT";
		mHUDFont = HUDFont.Create(fnt,1,false);
		fnt = "SmallFont";
		mSmallFont = HUDFont.Create(fnt);
		mTinyFont = HUDFont.Create("TINYFONT",0,Mono_off,1,1);
		mAmountFont = HUDFont.Create("INDEXFONT");
		diparms = InventoryBarState.Create();
		mHealthInterpolator = LinearValueInterpolator.Create(0, 8);
		mShieldInterpolator = LinearValueInterpolator.Create(0, 8);
		mMoneyInterpolator = LinearValueInterpolator.Create(0, 8);
		mChargeInterpolator = LinearValueInterpolator.Create(0, 1);
	}
	
	override void Tick()
	{
		super.Tick();
		mHealthInterpolator.Update(CPlayer.health);
		mShieldInterpolator.Update(CPlayer.mo.CountInv("TSP_PlayerPawn_Shield"));
		mMoneyInterpolator.Update(CPlayer.mo.CountInv("TSP_GlobalDollars"));
		mChargeInterpolator.Update(CPlayer.mo.CountInv("TSPChargedAttack"));
		
		tsp_player = TSP_PlayerPawn_ZSCBase(CPlayer.mo);
		
		mTraitAlpha = mTraitAlpha + (tsp_player.pp_traitMode - mTraitAlpha)/4;
		
		if(level.maptime%35==0)
		{
			isDebug = CVar.GetCVar("tsp_debug",players[consoleplayer]).GetBool();
		}
		
		for(int i = 0;i<tsp_notifs.Size();i++)
		{
			tsp_notifs[i].time--;
			if(tsp_notifs[i].time<=0)
			{
				tsp_notifs.Delete(i);
			}
		}
	}
	
	const HUDLEFT_X = 0;
	const HUDLEFT_Y = -70;
	const HUDRIGHT_X = -135;
	const HUDRIGHT_Y = -70;

	override void Draw (int state, double TicFrac)
	{
		Super.Draw (state, TicFrac);
		
		let curWeapon = TSP_Weapon_Core(CPlayer.ReadyWeapon);
		
		if ( curWeapon )
		{
			curWeapon.TSP_DrawWeaponHud(TicFrac);
		}

		if (state == HUD_StatusBar||state == HUD_Fullscreen)
		{
			BeginHUD(1.0);//,true,320,240);
			
			alpha = 1.0;
			
			int health = mHealthInterpolator.GetValue();
			int shield = mShieldInterpolator.GetValue();
			int money = mMoneyInterpolator.GetValue();
			int maxShield = CPlayer.mo.CountInv("TSP_PlayerPawn_MaxShield");
			int charge = mChargeInterpolator.GetValue();
            //DrawImage("H_GUIDER", (-135, -70), DI_ITEM_OFFSETS);
			
			// MEL HUD
			if(CPlayer.mo is "TSP_MelPlayer" ||CPlayer.mo is "TSP_MelRetroPlayer")
			{
				DrawImage("MEL_HUDA", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS);
			}
			
			// Monet
			//DrawImage("HUD_LMON", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS);
			//DrawString(mSmallFont, FormatNumber(money, 180000), (HUDLEFT_X, HUDLEFT_Y+25), DI_TEXT_ALIGN_LEFT|DI_NOSHADOW, Font.CR_WHITE);
			
			if(CPlayer.mo.InvSel)
			{
				DrawImage("HUD_IBOX", (0, -16), DI_ITEM_CENTER|DI_SCREEN_CENTER_BOTTOM);
				DrawInventoryIcon(CPlayer.mo.InvSel,(0, -16),DI_ITEM_CENTER|DI_SCREEN_CENTER_BOTTOM,0.5);
				//DrawString(mSmallFont, CPlayer.mo.InvSel.GetTag().." ("..CPlayer.mo.InvSel.Amount..")", (HUDLEFT_X, HUDLEFT_Y-40), DI_TEXT_ALIGN_LEFT|DI_NOSHADOW, Font.CR_WHITE);
			}
			
			// Main Stats
			
			// BOX SHADOW
			DrawImage("HUD_VITC", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS);
			
			// HEALTH
				Color hpColor;
				if(health>100)
				{
					hpColor = Font.FindFontColor("TSPHealthGold");
				}
				else if(health>75)
				{
					hpColor = Font.FindFontColor("TSPHealthBlue");
					DrawBar("HUD_VHPA", "HUD_VHPC", health, 100, (HUDLEFT_X+68.5, HUDLEFT_Y+41), 0, 0, DI_ITEM_OFFSETS);
				}
				else if(health>50)
				{
					hpColor = Font.FindFontColor("TSPHudYeller");
					DrawBar("HUD_VHPE", "HUD_VHPC", health, 100, (HUDLEFT_X+68.5, HUDLEFT_Y+41), 0, 0, DI_ITEM_OFFSETS);
				}
				else
				{
					hpColor = Font.FindFontColor("TSPHudRed");
					DrawBar("HUD_VHPG", "HUD_VHPC", health, 100, (HUDLEFT_X+68.5, HUDLEFT_Y+41), 0, 0, DI_ITEM_OFFSETS);
				}
				

			// SHIELD
			switch(CPlayer.mo.CountInv("TSP_Upgrade_Shield"))
			{
				case 0: DrawBar("HUD_VSHM", "HUD_VSHC", shield, maxShield, (HUDLEFT_X+71, HUDLEFT_Y+51.5), 0, 0, DI_ITEM_OFFSETS); break;
				case 1: DrawBar("HUD_VSHE", "HUD_VSHC", shield, maxShield, (HUDLEFT_X+71, HUDLEFT_Y+51.5), 0, 0, DI_ITEM_OFFSETS); break;
				case 2: DrawBar("HUD_VSHG", "HUD_VSHC", shield, maxShield, (HUDLEFT_X+71, HUDLEFT_Y+51.5), 0, 0, DI_ITEM_OFFSETS); break;
				case 3: DrawBar("HUD_VSHI", "HUD_VSHC", shield, maxShield, (HUDLEFT_X+71, HUDLEFT_Y+51.5), 0, 0, DI_ITEM_OFFSETS); break;
				case 4: DrawBar("HUD_VSHK", "HUD_VSHC", shield, maxShield, (HUDLEFT_X+71, HUDLEFT_Y+51.5), 0, 0, DI_ITEM_OFFSETS); break;
				case 5: DrawBar("HUD_VSHA", "HUD_VSHC", shield, maxShield, (HUDLEFT_X+71, HUDLEFT_Y+51.5), 0, 0, DI_ITEM_OFFSETS); break;
			}
			
			// MONEY
			DrawImage("HUD_VMNA", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS); // Money Box
			//DrawString(mSmallFont, FormatNumber(money, 180000), (HUDLEFT_X, HUDLEFT_Y+25), DI_TEXT_ALIGN_LEFT|DI_NOSHADOW, Font.CR_WHITE); //Money Stuff
			
			// MEL/RETROGRADE MEL HUD CHUNK
			if(CPlayer.mo is "TSP_MelPlayer" ||CPlayer.mo is "TSP_MelRetroPlayer")
			{
				DrawImage("MEL_HUDA", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS);
			}
			
			// HUD LEFT STATS OVERLAY
			DrawImage("HUD_VITA", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS);
			
			// SHIELD CONT
			if(CPlayer.mo is "TSP_MelPlayer")
			{
				DrawImage("SHD_3A", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS);
			}
			if(CPlayer.mo is "TSP_MelRetroPlayer")
			{
				DrawImage("SHD_2A", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS);
			}
			switch(CPlayer.mo.CountInv("TSP_Upgrade_Shield"))
			{
				case 1: DrawImage("SHD_1C", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS); break;
				case 2: DrawImage("SHD_2C", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS); break;
				case 3: DrawImage("SHD_3C", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS); break;
				case 4: DrawImage("SHD_4C", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS); break;
				case 5: DrawImage("SHD_5C", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS); break;
			}
			
			//================
			// Mel Mugshot
			//================			

			switch(CVar.GetCVar("tsp_melhudmod", players[0]).GetInt())
			{
				case 1: 
					DrawTexture(GetMugShot(6, MugShot.CUSTOM, "MC1"), (HUDLEFT_X+14.5, HUDLEFT_Y+1.5), DI_ITEM_OFFSETS); break;// Default Mel
				case 2:
					DrawTexture(GetMugShot(6, MugShot.CUSTOM, "MR1"), (HUDLEFT_X+14.5, HUDLEFT_Y+1.5), DI_ITEM_OFFSETS); break;// Retrograde Mel
				case 3: 
					DrawTexture(GetMugShot(6, MugShot.CUSTOM, "RR1"), (HUDLEFT_X+14.5, HUDLEFT_Y+1.5), DI_ITEM_OFFSETS); break;// Retro/Robo Mel
				case 4: 
					DrawImage("MELOBYPA", (HUDLEFT_X+14.5, HUDLEFT_Y+1.5), DI_ITEM_OFFSETS); break;							   // Meloby
				default:		
					if(CPlayer.mo is "TSP_MelRetroPlayer") //RETROGRADE MEL
					{
						if(cplayer.getgender()==2) // Are you a robot?
						{
						DrawTexture(GetMugShot(6, MugShot.CUSTOM, "RR1"), (HUDLEFT_X+14.5, HUDLEFT_Y+1.5), DI_ITEM_OFFSETS);
						}
						else // You are not a robot
						{
						DrawTexture(GetMugShot(6), (HUDLEFT_X+14.5, HUDLEFT_Y+1.5), DI_ITEM_OFFSETS);
						}
					}
					
					else if(CPlayer.mo is "TSP_DummyPlayer") // Are you a dummy?
					{
						DrawImage("MELOBYPA", (HUDLEFT_X+14.5, HUDLEFT_Y+1.5), DI_ITEM_OFFSETS);
						//DrawString(mSmallFont, "DUMMY", (HUDLEFT_X+35, HUDLEFT_Y+30), DI_TEXT_ALIGN_CENTER|DI_NOSHADOW, Font.CR_YELLOW);
					}
					else // Draw default player mugshot
					{
						DrawTexture(GetMugShot(6), (HUDLEFT_X+14.5, HUDLEFT_Y+1.5), DI_ITEM_OFFSETS);
					}
					

					if(CPlayer.mo is "TSP_MelPlayer")
					{
						/*if(CVar.GetCVar("tsp_supersecret", players[0]).GetBool())
						{
						DrawImage("MCWSTZZ", (HUDLEFT_X+9, HUDLEFT_Y-1), DI_ITEM_OFFSETS);
						}*/
					}
				
			}

			//================
			// GOD MODE SPARKS (Mel/Retro Mel)
			//================
			
			if(CPlayer.cheats & (CF_GODMODE | CF_GODMODE2) || CPlayer.mo.bInvulnerable)
			{
				switch(CVar.GetCVar("tsp_melhudmod", players[0]).GetInt())
				{
					case 1: 
						DrawImage("HUDSPA00", (HUDLEFT_X+16, HUDLEFT_Y-2), DI_ITEM_OFFSETS); break; // Green Sparks (Default Mel)
					case 2:
						DrawImage("HUDSPA00", (HUDLEFT_X+16, HUDLEFT_Y-2), DI_ITEM_OFFSETS); break; // Green Sparks (Retrograde Mel)
					case 3: 
						DrawImage("HUDSPB00", (HUDLEFT_X+16, HUDLEFT_Y-2), DI_ITEM_OFFSETS); break; // Pink Sparks  (Retro/Robo Mel)
					default:
								if(CPlayer.mo is "TSP_MelRetroPlayer" && cplayer.getgender()==2) // Are you Robo/Retro Mel?
								{
								DrawImage("HUDSPB00", (HUDLEFT_X+16, HUDLEFT_Y-2), DI_ITEM_OFFSETS); // Pink Sparks
								}
								else // You are not a robot
								{
								DrawImage("HUDSPA00", (HUDLEFT_X+16, HUDLEFT_Y-2), DI_ITEM_OFFSETS); // Green Sparks
								}
							
				}
			}
			/*
			//================
			// Health
			//================
			
				Color hpColor;
				if(health>100)
				{
					hpColor = Font.FindFontColor("TSPHealthGold");
				}
				else if(health>75)
				{
					hpColor = Font.FindFontColor("TSPHealthBlue");
				}
				else if(health>50)
				{
					hpColor = Font.FindFontColor("TSPHudYeller");
				}
				else
				{
					hpColor = Font.FindFontColor("TSPHudRed");
				}
				DrawString(mSmallFont, ""..health, (HUDLEFT_X+84, HUDLEFT_Y+36), DI_TEXT_ALIGN_LEFT|DI_NOSHADOW, hpColor);
				
				// sheld number stats
				DrawString(mSmallFont, ""..shield, (HUDLEFT_X+84, HUDLEFT_Y+47), DI_TEXT_ALIGN_LEFT|DI_NOSHADOW, Font.FindFontColor("TSPShieldOrange"));
			
			//================
			// Keys
			//================
			
				Vector2 keypos = (HUDRIGHT_X+22, HUDRIGHT_Y+21);
				int rowc = 0;
				double roww = 0;
				for(let i = CPlayer.mo.Inv; i != null; i = i.Inv) //go thru the player's inventory to find some keys
				{
					if (i is "Key" && i.Icon.IsValid())
					{
						DrawTexture(i.Icon, keypos, DI_ITEM_LEFT_BOTTOM);
						Vector2 size = TexMan.GetScaledSize(i.Icon);
						keypos.X += size.X + 2;
						roww = max(roww, size.X);
					}
				}
			*/
			// RIGHT HAND SIDE
			
			// HOW CAN I KILL NOOBS WITHOUT ANY AMMO
			
			//================
			// TRAIT
			//================
			
			DrawImage("MEL_TRTE", (HUDRIGHT_X, HUDRIGHT_Y), DI_ITEM_OFFSETS);
			DrawImage("MEL_TRTF", (HUDRIGHT_X, HUDRIGHT_Y), DI_ITEM_OFFSETS, mTraitAlpha);
			
			//================
			// RIGHT SIDE BASE
			//================
			
			if(CVar.GetCVar("tsp_easyauto", players[0]).GetBool()) //Auto-Assist Enabled
			{
			DrawString(mTinyFont, "\cfAuto", (HUDRIGHT_X+109, HUDRIGHT_Y+58), DI_TEXT_ALIGN_CENTER, Font.CR_GOLD);
			}
			
			DrawImage("HUD_RBAS", (HUDRIGHT_X, HUDRIGHT_Y), DI_ITEM_OFFSETS);
			
			// MEL MELEE HUD BASE
			int maxCharge;
			
			// BARE KNUCKLE - Stasis Uppercut
			if(CPlayer.mo.FindInventory("MelMelee") && CPlayer.mo.CountInv("TSPPrimaryCombo")==1)
			{
				maxCharge = 9;
			}
			
			if(CPlayer.ReadyWeapon && CPlayer.ReadyWeapon is "MelMelee")
			{
				DrawBar("MEL_HAGF", "MEL_HAGE", shield, maxShield, (HUDRIGHT_X+3, HUDRIGHT_Y+37), 0, 1, DI_ITEM_OFFSETS);
				DrawBar("MEL_HCHB", "MEL_HCHE", charge, maxCharge, (HUDRIGHT_X+3, HUDRIGHT_Y+46), 0, 1, DI_ITEM_OFFSETS);
				DrawImage("MEL_WEPB", (HUDRIGHT_X, HUDRIGHT_Y), DI_ITEM_OFFSETS);
			}
			
			
			if(CPlayer.ReadyWeapon && CPlayer.ReadyWeapon is "MelChargeStyle")
			{
				if(CPlayer.mo.CountInv("TSPPrimaryCombo")==1)
				{
					maxCharge = 6;
				}
				else if(CPlayer.mo.CountInv("TSPPrimaryCombo")==2)
				{
					maxCharge = 5;
				}
				else if(CPlayer.mo.CountInv("TSPAlternateCombo")==3)
				{
					maxCharge = 8;
				}
			}
			
			
			if(CPlayer.ReadyWeapon && CPlayer.ReadyWeapon is "MelChargeStyle")
			{
				DrawBar("MEL_HAGF", "MEL_HAGE", shield, maxShield, (HUDRIGHT_X+3, HUDRIGHT_Y+37), 0, 1, DI_ITEM_OFFSETS);
				DrawBar("MEL_HCHC", "MEL_HCHE", charge, maxCharge, (HUDRIGHT_X+3, HUDRIGHT_Y+46), 0, 1, DI_ITEM_OFFSETS);
				DrawImage("MEL_WEPC", (HUDRIGHT_X, HUDRIGHT_Y), DI_ITEM_OFFSETS);
			}
		
		
			
			//================
			// WEAPON PIP
			//================
			
			// MEL
			if(CPlayer.mo is "TSP_MelPlayer")
			{
				DrawImage("MEL_WPIE", (HUDRIGHT_X, HUDRIGHT_Y), DI_ITEM_OFFSETS);
				for(int i = 0;i<7;i++)
				{
					if(CPlayer.HasWeaponsInSlot(i+1))
					{
						DrawImage("MEL_WPI"..i, (HUDRIGHT_X, HUDRIGHT_Y), DI_ITEM_OFFSETS);
					}
				}
				
				if(CPlayer.mo.FindInventory("MelChargeStyle"))
				{
					DrawImage("MEL_WPIX", (HUDRIGHT_X, HUDRIGHT_Y), DI_ITEM_OFFSETS);
				}
			}
			
			// RETRO MEL
			if(CPlayer.mo is "TSP_MelRetroPlayer")
			{
				DrawImage("MRG_WPIE", (HUDRIGHT_X, HUDRIGHT_Y), DI_ITEM_OFFSETS);
				for(int i = 0;i<8;i++)
				{
					if(CPlayer.HasWeaponsInSlot(i+1))
					{
						DrawImage("MRG_WPI"..i, (HUDRIGHT_X, HUDRIGHT_Y), DI_ITEM_OFFSETS);
					}
				}
				
					if(CPlayer.mo.FindInventory("SuperShotgun")) //temp for testing
					{
					DrawImage("MRG_WPI3", (HUDRIGHT_X, HUDRIGHT_Y), DI_ITEM_OFFSETS);
					}
					
					/*if(CPlayer.mo.FindInventory("Chainsaw")) //temp for testing
					{
					DrawImage("MRG_WPI7", (HUDRIGHT_X, HUDRIGHT_Y), DI_ITEM_OFFSETS);
					}*/
			}


			
			//================
			// WEAPON BASE
			//================
			
			Inventory a1 = GetCurrentAmmo();
			if(CPlayer.ReadyWeapon)
			{
				//DrawInventoryIcon(CPlayer.ReadyWeapon,(HUDRIGHT_X+22, HUDRIGHT_Y+42),DI_ITEM_LEFT,0.5);
				DrawString(mTinyFont, CPlayer.ReadyWeapon.GetTag(), (HUDRIGHT_X+63, HUDRIGHT_Y+58), DI_TEXT_ALIGN_RIGHT);
			}
			
			if (a1 != null)
			{
				if(CPlayer.ReadyWeapon is "TSP_Weapon_Core")
				{
					TSP_Weapon_Core wepon = TSP_Weapon_Core(CPlayer.ReadyWeapon);
					if(wepon.tspw_clipsize>0)
					{
						int ammoRed = wepon.tspw_clipsize*0.4;
						Color ammoColor;
						if(TSP_Weapon_Core(CPlayer.ReadyWeapon).tspw_curclip<ammoRed)
						{
							ammoColor = Font.FindFontColor("TSPHudRed");
						}
						else
						{
							ammoColor = Font.FindFontColor("TSPWhite");
						}
						DrawString(mHUDFont, FormatNumber(TSP_Weapon_Core(CPlayer.ReadyWeapon).tspw_curclip, 3), (HUDRIGHT_X+38, HUDRIGHT_Y+38), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW, ammoColor);
						alpha = 0.6;
						DrawString(mSmallFont, FormatNumber(a1.Amount, 3), (HUDRIGHT_X+49, HUDRIGHT_Y+45), DI_TEXT_ALIGN_CENTER|DI_NOSHADOW, Font.FindFontColor("TSPGold"));
					}
					
					let crossTex = TexMan.CheckForTexture(wepon.tspw_crosshair);
					
					screen.DrawTexture(crossTex, false, screen.GetWidth()/2, screen.GetHeight()/2,
						DTA_CenterOffset, true);
				}
			}
			
			//================
			// Weapon Mod
			//================
			
				TSP_PlayerPawn_ZSCBase playerObj = TSP_PlayerPawn_ZSCBase(CPlayer.mo);
				if(playerObj.pp_notificationTime>0)
				{
					Centering = true;
					DrawString(mSmallFont, playerObj.pp_notification, (0,-36), DI_TEXT_ALIGN_CENTER|DI_NOSHADOW|DI_SCREEN_CENTER_BOTTOM, Font.CR_GREEN);
					Centering = false;
				}
			
			//================
			// Pickup Log
			//================
			
				for(int i = 0;i<playerObj.tsp_logs.Size();i++)
				{
					let thisone  = playerObj.tsp_logs[i];
					int yoff = 0;
					double alpher = 1.0;
					if(thisone.timeleft>138)
					{
						yoff = thisone.timeleft-138; //thunk
					}
					else if (thisone.timeleft<12)
					{
						alpher = thisone.timeleft/12.; //whoosh
					}
					DrawString(mTinyFont, String.Format(thisone.whatugot,thisone.howmany), (HUDLEFT_X+67, HUDLEFT_Y+15-(8*i)+yoff), DI_TEXT_ALIGN_LEFT, Font.CR_UNTRANSLATED, alpher);
				}
			
			//================
			// Notification Log
			//================
			
				for(int i = 0;i<tsp_notifs.Size();i++)
				{
					let thisone  = tsp_notifs[i];
					double alpher = 1.0;
					if(thisone.time>136)
					{
						alpher = (140.-thisone.time)/(140.-136.); //thunk
					}
					else if (thisone.time<35)
					{
						alpher = thisone.time/35.; //whoosh
					}
					DrawString(mSmallFont, thisone.message, (0, 4+9*i), DI_TEXT_ALIGN_CENTER|DI_SCREEN_HCENTER, Font.CR_UNTRANSLATED, alpher);
				}
			
			//================
			// Debug Shit
			//================
			
				/*if(isDebug)
				{
					string targetName = "N/A";
					if(playerObj.theZoop!=null)
					{
						targetName = playerobj.theZoop.GetClassName();
					}
					DrawString(mSmallFont, "\ccTarget: \c-"..targetName, (-2, 2), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW, Font.FindFontColor("TSP_Green"));
				}*/
				
				if(playerobj.pp_nextModSwitch != null)
				{
					bool foundIt;
					int slot; int alsoSlot; int index;
					int iconWidth = 32;
					[foundIt, slot] = CPlayer.weapons.LocateWeapon(CPlayer.ReadyWeapon.GetClass());
					[foundIt, alsoSlot, index] = CPlayer.weapons.LocateWeapon(playerobj.pp_nextModSwitch.GetClass());
					int slotMax = CPlayer.weapons.SlotSize(slot);
					for(int i = 0;i<slotMax;i++)
					{
						//let fucker = GetDefaultByType(CPlayer.weapons.GetWeapon(slot,i));
						bool hasIt = playerobj.pp_haveTheseWeapons.Find(CPlayer.weapons.GetWeapon(slot,i))!=playerobj.pp_haveTheseWeapons.Size();
						DrawImage("graphics/HUD3.0/weapons/weapon_mod_ph.png", (( ((-iconWidth*slotMax)/2)+iconWidth*i)+iconWidth/2 , -58), DI_SCREEN_CENTER_BOTTOM|DI_ITEM_CENTER, hasIt ? 1.0 : 0.5, (-1,-1), index==i ? (0.75,0.75) : (0.5,0.5));
							//DTA_DestWidth, 32, DTA_DestHeight, 32, DTA_TranslationIndex, hasIt ? -1 : Translation.GetID('TSP_Shop_Darken'));
					}
					DrawString(mSmallFont, "\cj[\cd"..playerobj.pp_nextModSwitch.tspw_altname.."\cj]", (0, -32), DI_TEXT_ALIGN_CENTER|DI_SCREEN_CENTER_BOTTOM, Font.CR_UNTRANSLATED, 1.0);
				}
		}
	}
}
