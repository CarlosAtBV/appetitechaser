Class TSP_NotificationLogger
{
	string message;
	int time;
}

Class TSP_StatusBar : BaseStatusBar
{
	HUDFont mHUDFont;
	HUDFont mSmallFont;
	HUDFont mAmountFont;
	HUDFont mTinyFont;
	
	HUDFont fnt_bold;
	HUDFont fnt_ammoBig;
	HUDFont fnt_ammoSmall;
	HUDFont fnt_ammoTag;
	HUDFont fnt_pickupLog;
	
	const FONT_AMMOTAG = "tsp_ammo_tag";
	const FONT_AMMOBIG = "tsp_ammo_big";
	const FONT_AMMOSMALL = "tsp_ammo_small";
	
	InventoryBarState diparms;
	LinearValueInterpolator mHealthInterpolator;
	LinearValueInterpolator mShieldInterpolator;
	LinearValueInterpolator mChargeInterpolator;
	
	int hud_money_target;
	int hud_money_lerp;
	float hud_weaponport_offset;
	float hud_weaponport_offsetLast;
	
	TSP_BHHandler handler_bh;
	
	TSP_PlayerPawn_ZSCBase tsp_player;
	
	double mTraitAlpha;
	
	bool isDebug;
	
	Vector2 screenSize;
	
	const CLR_WHITE = Color(255, 255, 255, 255);
	const CLR_AMMO_LOW = Color(255, 255, 0, 0);
	const CLR_AMMO_NORMAL = Color(255, 255, 213, 144);
	const CLR_CLIP_NORMAL = Color(255, 255, 255, 208);
	const CLR_CLIP_LOW = Color(255, 255, 179, 66);
	const CLR_BH_TIMER = Color(255, 255, 183, 57);
	
	Array<TSP_NotificationLogger> tsp_notifs;
	
	override bool ProcessNotify(EPrintLevel printlevel, String outline)
	{
		if(level.maptime==0) return true;
		if(printlevel == PRINT_MEDIUM||printlevel == PRINT_HIGH)
		{
			TSP_NotificationLogger notif = new("TSP_NotificationLogger");
			notif.message = outline;
			notif.time = 4*35;
			tsp_notifs.Insert(0,notif);
			
			if(tsp_notifs.Size()>4)
			{
				tsp_notifs.Delete(tsp_notifs.Size()-1);
			}
		}
		return true;
	}

	override void Init()
	{
		Super.Init();
		SetSize(0, 1280, 720);

		// Create the font used for the fullscreen HUD
		//Font fnt = "TSP_HUDFONT";
		//mHUDFont = HUDFont.Create(fnt,1,false);
		mSmallFont = HUDFont.Create("tsp_small");
		mTinyFont = HUDFont.Create("TINYFONT",0,Mono_off,1,1);
		mAmountFont = HUDFont.Create("INDEXFONT");
		fnt_ammoBig = HUDFont.Create("tsp_ammo_big");
		fnt_ammoSmall = HUDFont.Create("tsp_ammo_small");
		//FONT_AMMOTAG = HUDFont.Create("tsp_ammo_tag");
		fnt_bold = HUDFont.Create("tsp_bold");
		fnt_pickupLog = HUDFont.Create("tsp_pickup");
		
		diparms = InventoryBarState.Create();
		mHealthInterpolator = LinearValueInterpolator.Create(0, 8);
		mShieldInterpolator = LinearValueInterpolator.Create(0, 8);
		mChargeInterpolator = LinearValueInterpolator.Create(0, 1);
		
		InitTextColors();
	}
	
	override void Tick()
	{
		super.Tick();
		
		if ( !handler_bh ) handler_bh = TSP_BHHandler( EventHandler.Find("TSP_BHHandler") );
		
		mHealthInterpolator.Update(CPlayer.health);
		mShieldInterpolator.Update(CPlayer.mo.CountInv("TSP_PlayerPawn_Shield"));
		//mMoneyInterpolator.Update(CPlayer.mo.CountInv("TSP_GlobalDollars"));
		hud_money_target = CPlayer.mo.CountInv("TSP_GlobalDollars");
		
		if ( hud_money_lerp != hud_money_target )
		{
			hud_money_lerp = hud_money_lerp + ( hud_money_target - hud_money_lerp ) * 0.99;
			if ( (hud_money_target - hud_money_lerp) < 10 )
			{
				hud_money_lerp = hud_money_target;
			}
		}
		
		mChargeInterpolator.Update(CPlayer.mo.CountInv("TSPChargedAttack"));
		
		tsp_player = TSP_PlayerPawn_ZSCBase(CPlayer.mo);
		
		mTraitAlpha = mTraitAlpha + (tsp_player.pp_traitMode - mTraitAlpha)/4;
		
		if(level.maptime%35==0)
		{
			isDebug = CVar.GetCVar("tsp_debug",players[consoleplayer]).GetBool();
		}
		
		for(int i = 0;i<tsp_notifs.Size();i++)
		{
			tsp_notifs[i].time--;
			if(tsp_notifs[i].time<=0)
			{
				tsp_notifs.Delete(i);
			}
		}
		
		hud_weaponport_offsetLast = hud_weaponport_offset;
		string weaponName = CPlayer.PendingWeapon ? CPlayer.PendingWeapon.GetClassName().."" : "NIL";
		float targ = weaponName != "Object" ? 72.0 : 0.0;
		hud_weaponport_offset = hud_weaponport_offset + ( targ - hud_weaponport_offset ) / 3;
	}
	
	const HUDLEFT_X = 0;
	const HUDLEFT_Y = 720-140;//-140;
	const HUDRIGHT_X = -270;
	const HUDRIGHT_Y = 720-140;
	
	double hud_scale;

	override void Draw (int state, double TicFrac)
	{
		Super.Draw (state, TicFrac);
		
		if ( level.mapname == "TSP_BH" )
		{
			return;
		}
		
		let curWeapon = TSP_Weapon_Core(CPlayer.ReadyWeapon);
		
		if ( curWeapon )
		{
			curWeapon.TSP_DrawWeaponHud(TicFrac);
		}
		
		let tsp_player = TSP_PlayerPawn_ZSCBase(CPlayer.mo);
		
		if ( tsp_player )
		{
			//tsp_player.TSP_DrawPlayerDebug();
			float hitTime = tsp_player.pp_hitMult;
			drawOffset = (hitTime > 0) ? (round(frandom(-5,5) * hitTime), round(frandom(-5,5) * hitTime)) : (0, 0);
		}

		if (state == HUD_StatusBar||state == HUD_Fullscreen)
		{
			BeginHUD(1.0, true);//,true,320,240);
			
			Vector2 hudScale = GetHUDScale();
			hud_scale = screen.GetHeight() / 720.0;
			
			screenSize = ( screen.GetWidth()/hudScale.x, screen.GetHeight()/hudScale.y );
			
			TSP_DrawImage("graphics/testoby_wipswell.png", (0, 0));
			
			alpha = 1.0;
			
			int health = mHealthInterpolator.GetValue();
			int shield = mShieldInterpolator.GetValue();
			int money = hud_money_lerp;
			int maxShield = CPlayer.mo.CountInv("TSP_PlayerPawn_MaxShield");
			int charge = mChargeInterpolator.GetValue();
            //DrawImage("H_GUIDEL", (0, -140), DI_ITEM_OFFSETS); // guide
            //DrawImage("H_GUIDER", (-270, -140), DI_ITEM_OFFSETS); // guide
			
			//LEFT SIDE OF THE HUD (Health, Armor, Armor Pips, Money)
			
			// SHADOW
			TSP_DrawImage("HUD_LBG", (HUDLEFT_X, HUDLEFT_Y));
			
			// MEL HUD
			if(CPlayer.mo is "TSP_MelPlayer" ||CPlayer.mo is "TSP_MelRetroPlayer")
			{
				DrawImage("HUD_LMEL", (HUDLEFT_X, HUDLEFT_Y), DI_ITEM_OFFSETS);
			}
			
			if(CPlayer.mo.InvSel)
			{
				DrawImage("HUD_IBOX", (0, -16), DI_ITEM_CENTER|DI_SCREEN_CENTER_BOTTOM);
				DrawInventoryIcon(CPlayer.mo.InvSel,(0, -16),DI_ITEM_CENTER|DI_SCREEN_CENTER_BOTTOM,0.5);
				//DrawString(mSmallFont, CPlayer.mo.InvSel.GetTag().." ("..CPlayer.mo.InvSel.Amount..")", (HUDLEFT_X, HUDLEFT_Y-40), DI_TEXT_ALIGN_LEFT|DI_NOSHADOW, Font.CR_WHITE);
			}
			
			// Main Stats
			
			
			// HEALTH
				Color hpColor;
				
				bool overheal = (health > 100);
				int healthWidth = 121;
				int healthOffset_base = ( health / 100. ) * healthWidth;
				
				string healthBarTex;
				
				// [Py] Get the best graphic for the healthbar depending on the amount of HP
				if ( overheal )
				{
					healthBarTex = "HUD_VITO";
					healthOffset_base -= healthWidth;
				}
				else if ( health>70 )
				{
					healthBarTex = "HUD_VITF";
				}
				else if ( health>40 )
				{
					healthBarTex = "HUD_VITM";
				}
				else
				{
					healthBarTex = "HUD_VITR";
				}
				
				// [Py] Draw the background
				// [Py] This swaps over to VITF for the overheal so that we only have to write this one line because uhhhhhhh
				DrawImage(overheal ? "HUD_VITF" : "HUD_VITE", (HUDLEFT_X+122, HUDLEFT_Y+75), DI_ITEM_LEFT_TOP|DI_SCREEN_LEFT_BOTTOM);
				
				if ( health > 0 )
				{
					// [Py] just a mini fucked up hack for masking the bars ...
					Vector2 clipPos, clipSize;
					for ( int i = 0; i < 3; i++ )
					{
						switch ( i )
						{
							case 0:
								clipPos = (HUDLEFT_X+122, HUDLEFT_Y+75);
								clipSize = (123, 6);
								break;
							case 1:
								clipPos = (HUDLEFT_X+125, HUDLEFT_Y+81);
								clipSize = (125, 6);
								break;
							case 2:
								clipPos = (HUDLEFT_X+128, HUDLEFT_Y+87);
								clipSize = (125, 12);
								break;
						}
						clipPos *= hud_scale;
						clipSize *= hud_scale;
						SetClipRect(clipPos.x, clipPos.y, clipSize.x, clipSize.y);
						TSP_DrawImage(healthBarTex, (HUDLEFT_X+121 + (-healthWidth + healthOffset_base), HUDLEFT_Y+75));
					}
					ClearClipRect();
				}
				

			// SHIELD BAR
			switch(CPlayer.mo.CountInv("TSP_Upgrade_Shield"))
			{
				case 0: DrawBar("HUD_SHD0", "HUD_SHDE", shield, maxShield, (HUDLEFT_X+122, HUDLEFT_Y+95), 0, 0, DI_ITEM_OFFSETS); break;
				case 1: DrawBar("HUD_SHD1", "HUD_SHDE", shield, maxShield, (HUDLEFT_X+122, HUDLEFT_Y+95), 0, 0, DI_ITEM_OFFSETS); break;
				case 2: DrawBar("HUD_SHD2", "HUD_SHDE", shield, maxShield, (HUDLEFT_X+122, HUDLEFT_Y+95), 0, 0, DI_ITEM_OFFSETS); break;
				case 3: DrawBar("HUD_SHD3", "HUD_SHDE", shield, maxShield, (HUDLEFT_X+122, HUDLEFT_Y+95), 0, 0, DI_ITEM_OFFSETS); break;
				case 4: DrawBar("HUD_SHD4", "HUD_SHDE", shield, maxShield, (HUDLEFT_X+122, HUDLEFT_Y+95), 0, 0, DI_ITEM_OFFSETS); break;
				case 5: DrawBar("HUD_SHD5", "HUD_SHDE", shield, maxShield, (HUDLEFT_X+122, HUDLEFT_Y+95), 0, 0, DI_ITEM_OFFSETS); break;
			}
			
			// MAIN HUD GRAPHIC (LEFT)
			TSP_DrawImage("HUD_LBAS", (HUDLEFT_X, HUDLEFT_Y));
			
			// MONEY
			TSP_DrawImage("HUD_LMON", (HUDLEFT_X, HUDLEFT_Y));
			TSP_DrawString(FONT_AMMOTAG, ""..money, (HUDLEFT_X+224, HUDLEFT_Y+49), TDF_ALIGN_RIGHT);
			
			// SHIELD PIPS
			if(CPlayer.mo is "TSP_MelPlayer")
			{
				TSP_DrawImage("SHD_3A", (HUDLEFT_X, HUDLEFT_Y));
			}
			if(CPlayer.mo is "TSP_MelRetroPlayer")
			{
				TSP_DrawImage("SHD_2A", (HUDLEFT_X, HUDLEFT_Y));
			}
			switch(CPlayer.mo.CountInv("TSP_Upgrade_Shield"))
			{
				case 1: TSP_DrawImage("SHD_1B", (HUDLEFT_X, HUDLEFT_Y)); break;
				case 2: TSP_DrawImage("SHD_2B", (HUDLEFT_X, HUDLEFT_Y)); break;
				case 3: TSP_DrawImage("SHD_3B", (HUDLEFT_X, HUDLEFT_Y)); break;
				case 4: TSP_DrawImage("SHD_4B", (HUDLEFT_X, HUDLEFT_Y)); break;
				case 5: TSP_DrawImage("SHD_5B", (HUDLEFT_X, HUDLEFT_Y)); break;
			}
			
			//================
			// MUGSHOTS
			//================
			
			// MEL (MEL, RETROGRADE MEL)

			switch(CVar.GetCVar("tsp_melhudmod", players[0]).GetInt())
			{
				case 1: 
					TSP_DrawTexture(GetMugShot(6, MugShot.CUSTOM, "MC1"), (HUDLEFT_X+20, HUDLEFT_Y-12)); break;// Default Mel
				case 2:
					TSP_DrawTexture(GetMugShot(6, MugShot.CUSTOM, "MR1"), (HUDLEFT_X+20, HUDLEFT_Y-12)); break;// Retrograde Mel
				case 3: 
					TSP_DrawTexture(GetMugShot(6, MugShot.CUSTOM, "RR1"), (HUDLEFT_X+20, HUDLEFT_Y-12)); break;// Retro/Robo Mel
				case 4: 
					TSP_DrawImage("MELOBYPA", (HUDLEFT_X+20, HUDLEFT_Y-12)); break;							   // Meloby
				default:		
					if(CPlayer.mo is "TSP_MelRetroPlayer") //RETROGRADE MEL
					{
						if(cplayer.getgender()==2) // Are you a robot?
						{
						DrawTexture(GetMugShot(6, MugShot.CUSTOM, "RR1"), (HUDLEFT_X+20, HUDLEFT_Y-12), DI_ITEM_OFFSETS);
						}
						else // You are not a robot
						{
						DrawTexture(GetMugShot(6), (HUDLEFT_X+20, HUDLEFT_Y-12), DI_ITEM_OFFSETS);
						}
					}
					
					else if(CPlayer.mo is "TSP_DummyPlayer") // Are you a dummy?
					{
						DrawImage("MELOBYPA", (HUDLEFT_X+20, HUDLEFT_Y-12), DI_ITEM_OFFSETS);
						//DrawString(mSmallFont, "DUMMY", (HUDLEFT_X+35, HUDLEFT_Y+30), DI_TEXT_ALIGN_CENTER|DI_NOSHADOW, Font.CR_YELLOW);
					}
					else // Draw default player mugshot
					{
						TSP_DrawTexture(GetMugShot(6), (HUDLEFT_X+20, HUDLEFT_Y-12));
					}
					

					/*if(CPlayer.mo is "TSP_MelPlayer")
					{
						if(CVar.GetCVar("tsp_supersecret", players[0]).GetBool())
						{
						DrawImage("MCWSTZZ", (HUDLEFT_X+20, HUDLEFT_Y-12), DI_ITEM_OFFSETS);
						}
					}*/
				
			}

			//================
			// GOD MODE SPARKS (Mel/Retro Mel)
			//================
			
			if(CPlayer.cheats & (CF_GODMODE | CF_GODMODE2) || CPlayer.mo.bInvulnerable)
			{
				switch(CVar.GetCVar("tsp_melhudmod", players[0]).GetInt())
				{
					case 1: 
						TSP_DrawImage("HUDSPA0", (HUDLEFT_X+20, HUDLEFT_Y-12)); break; // Green Sparks (Default Mel)
						break;
					case 2:
						TSP_DrawImage("HUDSPA0", (HUDLEFT_X+20, HUDLEFT_Y-12)); break; // Green Sparks (Retrograde Mel)
						break;
					case 3: 
						TSP_DrawImage("HUDSPB0", (HUDLEFT_X+20, HUDLEFT_Y-12)); break; // Pink Sparks  (Retro/Robo Mel)
						break;
					default:
						if ( CPlayer.mo is "TSP_MelRetroPlayer" && cplayer.getgender()==2 ) // Are you Robo/Retro Mel?
						{
							TSP_DrawImage("HUDSPB0", (HUDLEFT_X+20, HUDLEFT_Y-12)); // Pink Sparks
						}
						else // You are not a robot
						{
							TSP_DrawImage("HUDSPA0", (HUDLEFT_X+20, HUDLEFT_Y-12)); // Green Sparks
						}
						break;
				}
			}
			
/*
			//================
			// Keys
			//================
			
				Vector2 keypos = (HUDRIGHT_X+22, HUDRIGHT_Y+21);
				int rowc = 0;
				double roww = 0;
				for(let i = CPlayer.mo.Inv; i != null; i = i.Inv) //go thru the player's inventory to find some keys
				{
					if (i is "Key" && i.Icon.IsValid())
					{
						DrawTexture(i.Icon, keypos, DI_ITEM_LEFT_BOTTOM);
						Vector2 size = TexMan.GetScaledSize(i.Icon);
						keypos.X += size.X + 2;
						roww = max(roww, size.X);
					}
				}
*/

			// RIGHT HAND SIDE
			
			// HOW CAN I KILL NOOBS WITHOUT ANY AMMO
			
			//================
			// RIGHT SIDE BASE
			//================
			
			// SHADOW
			TSP_DrawImage("HUD_RBG", (HUDRIGHT_X, HUDRIGHT_Y));
			
			//================
			// TRAIT
			//================
			
			TSP_DrawImage("MEL_TRTE", (HUDRIGHT_X, HUDRIGHT_Y), TDF_HUDRIGHT);
			TSP_DrawImage("MEL_TRTF", (HUDRIGHT_X, HUDRIGHT_Y), TDF_HUDRIGHT, mTraitAlpha);
			
			
			// MEL SHENANIGANS
			int maxCharge;
			
			// BARE KNUCKLE - Stasis Uppercut
			if(CPlayer.mo.FindInventory("MelBareKnuckle"))
			{
				maxCharge = 9;
			}
			
			if(CPlayer.ReadyWeapon && CPlayer.ReadyWeapon is "MelBareKnuckle")
			{
				DrawBar("HUD_MELB", "HUD_MELE", charge, maxCharge, (HUDRIGHT_X+42, HUDRIGHT_Y+74), 0, 0, DI_ITEM_OFFSETS);
				TSP_DrawImage("MEL_WEPB", (HUDRIGHT_X, HUDRIGHT_Y), TDF_HUDRIGHT);
			}
			
/*
			if(CPlayer.ReadyWeapon && CPlayer.ReadyWeapon is "MelChargeStyle")
			{
				if(CPlayer.mo.CountInv("TSPPrimaryCombo")==1)
				{
					maxCharge = 6;
				}
				else if(CPlayer.mo.CountInv("TSPPrimaryCombo")==2)
				{
					maxCharge = 5;
				}
				else if(CPlayer.mo.CountInv("TSPAlternateCombo")==3)
				{
					maxCharge = 8;
				}
			}
			
			
			if(CPlayer.ReadyWeapon && CPlayer.ReadyWeapon is "MelChargeStyle")
			{
				DrawBar("MEL_HAGF", "MEL_HAGE", shield, maxShield, (HUDRIGHT_X+3, HUDRIGHT_Y+37), 0, 1, DI_ITEM_OFFSETS);
				DrawBar("MEL_HCHC", "MEL_HCHE", charge, maxCharge, (HUDRIGHT_X+3, HUDRIGHT_Y+46), 0, 1, DI_ITEM_OFFSETS);
				DrawImage("MEL_WEPC", (HUDRIGHT_X, HUDRIGHT_Y), DI_ITEM_OFFSETS);
			}
*/

			//================
			// WEAPON BASE
			//================
			
			Inventory a1 = GetCurrentAmmo();
			let getWeapon = TSP_Weapon_Core(CPlayer.ReadyWeapon);
			
			// MAIN HUD GRAPHIC (AMMO)
			if (a1 != null)
			{
				TSP_DrawImage("HUD_RBGW", (HUDRIGHT_X, HUDRIGHT_Y), TDF_HUDRIGHT);
			}				

			// MAIN HUD GRAPHIC (RIGHT)
			TSP_DrawImage("graphics/hud/hud_rightbit_behindweapon.png", (HUDRIGHT_X, HUDRIGHT_Y), TDF_HUDRIGHT);
			
			float finalWeaponoffset = hud_weaponport_offsetLast + ( hud_weaponport_offset - hud_weaponport_offsetLast ) * TicFrac;
			
			if ( getWeapon )
			{
				Vector2 clipPos, clipSize;
				for ( int i = 0; i < 2; i++ )
				{
					clipPos.x = i == 0 ? 0 : 233;
					clipPos.y = 0;
					clipSize.x = i == 0 ? 233 : 9;
					clipSize.y = i == 0 ? 112 : 98;
					TSP_SetClipRect(HUDRIGHT_X+clipPos.x, HUDRIGHT_Y+clipPos.y, clipSize.x, clipSize.y);
					TSP_DrawImage(getWeapon.tspw_portrait, (HUDRIGHT_X + 135 + finalWeaponoffset, HUDRIGHT_Y + 25 + finalWeaponoffset), TDF_HUDRIGHT);
				}
				
				ClearClipRect();
			}
			
			TSP_DrawImage("graphics/hud/hud_rightbit_infrontofweapon.png", (HUDRIGHT_X, HUDRIGHT_Y), TDF_HUDRIGHT);
			
			if ( getWeapon )
			{
				TSP_DrawString(FONT_AMMOTAG, getWeapon.tspw_altname, (HUDRIGHT_X+149, HUDRIGHT_Y+98), TDF_HUDRIGHT|TDF_ALIGN_RIGHT);
			}

			// POWERBANK
			if(CPlayer.mo.CountInv("TSP_Upgrade_Powerbank")==1)
			{
				if(charge > 9)
				{
					TSP_DrawImage("HUD_RCHG", (HUDRIGHT_X, HUDRIGHT_Y), TDF_HUDRIGHT);
				}
			}
			
			// Draw Weapon Slots
			
			int slotCount = 0;
			int selSlotOffset = -1;
			Color selSlotColor;
			
			int slot_offset = 0;
			bool wepFound; int wepSlot;
			if ( CPlayer.ReadyWeapon )
			{
				[wepFound, wepSlot] = CPlayer.weapons.LocateWeapon(CPlayer.ReadyWeapon.GetClass());
			}
			
			for ( int i = 1; i < 10; i++ )
			{
				int slotSize = CPlayer.weapons.SlotSize(i);
				if ( slotSize > 0 )
				{
					int xPos = HUDRIGHT_X + 31 + (16*slot_offset);// + (19*slot_offset);
					
					if ( wepSlot == i )
					{
						selSlotOffset = xPos;
					}
					
					Color slotColor = "#1D1D1D";
					
					if ( CPlayer.HasWeaponsInSlot(i) )
					{
						let weaponRef = TSP_Weapon_Core(GetDefaultByType(CPlayer.weapons.GetWeapon(i, slotSize-1)));
						
						if ( weaponRef )
						{
							slotColor = weaponRef.tspw_hudcolor;
							
							if ( wepSlot == i )
							{
								selSlotColor = slotColor;
							}
						}
					}
							
					DrawImage("ARM_BOXB", (xPos, HUDRIGHT_Y + 48), DI_ITEM_OFFSETS|DI_SCREEN_RIGHT_BOTTOM, col: Color(255, slotColor.r, slotColor.g, slotColor.b));
					DrawImage("ARM_BOXA", (xPos, HUDRIGHT_Y + 48), DI_ITEM_OFFSETS|DI_SCREEN_RIGHT_BOTTOM);
					DrawImage("ARM_NUM"..(i), (xPos, HUDRIGHT_Y + 48), DI_ITEM_OFFSETS|DI_SCREEN_RIGHT_BOTTOM);
					slot_offset += 1;
				}
			}
			
			if ( selSlotOffset != -1 )
			{
				DrawImage("ARM_BOXD", (selSlotOffset-2, HUDRIGHT_Y + 43), DI_ITEM_OFFSETS|DI_SCREEN_RIGHT_BOTTOM, col: Color(255, selSlotColor.r, selSlotColor.g, selSlotColor.b));
				DrawImage("ARM_BOXC", (selSlotOffset-2, HUDRIGHT_Y + 43), DI_ITEM_OFFSETS|DI_SCREEN_RIGHT_BOTTOM);
				DrawImage("ARM_NUM"..(wepSlot), (selSlotOffset+1, HUDRIGHT_Y + 45), DI_ITEM_OFFSETS|DI_SCREEN_RIGHT_BOTTOM);
			}
			
			DrawImage("ARM_ACCT", (HUDRIGHT_X + 27, HUDRIGHT_Y + 48), DI_ITEM_OFFSETS|DI_SCREEN_RIGHT_BOTTOM);
			
			// Draw Ammo Numbers
			
			if (a1 != null)
			{
				if(CPlayer.ReadyWeapon is "TSP_Weapon_Core")
				{
					TSP_Weapon_Core wepon = TSP_Weapon_Core(CPlayer.ReadyWeapon);
				
					if(wepon.tspw_clipsize>0)
					{
						int ammoRed = wepon.tspw_clipsize*0.4;
						Color ammoColor;
						if(TSP_Weapon_Core(CPlayer.ReadyWeapon).tspw_curclip<ammoRed)
						{
							ammoColor = Font.FindFontColor("TSP_Red");
						}
						else
						{
							ammoColor = Font.FindFontColor("TSPWhite");
						}
						
						
						int maxClip = TSP_Weapon_Core(CPlayer.ReadyWeapon).GetClipCapacity();
						int clipAmount = TSP_Weapon_Core(CPlayer.ReadyWeapon).tspw_curclip;
						float clipLeft = clipAmount / float(maxClip);
						Color baseColor = CLR_CLIP_NORMAL;
						Color lowColor = CLR_CLIP_LOW;
						Color clipColor = Color(
							255,
							int(lowColor.R + (baseColor.R - lowColor.R) * clipLeft),
							int(lowColor.G + (baseColor.G - lowColor.G) * clipLeft),
							int(lowColor.B + (baseColor.B - lowColor.B) * clipLeft)
						);
						string clipString = string.format("%03d", clipAmount);
						for ( int i; i < clipString.length(); i++ )
						{
							TSP_DrawString(FONT_AMMOBIG, clipString.mid(i, 1), (HUDRIGHT_X+72-4 + 21*i, HUDRIGHT_Y+75), TDF_ALIGN_RIGHT|TDF_HUDRIGHT,
								a1.amount == 0 ? CLR_AMMO_LOW : clipColor,
								alpha = (clipAmount == 0 || (""..clipAmount).length() < 3-i) ? 0.25 : 1.0);
						}
						
						int ammoAmount = a1.amount;
						string ammoString = string.format("%03d", ammoAmount);
						for ( int i; i < ammoString.length(); i++ )
						{
							TSP_DrawString(FONT_AMMOSMALL, ammoString.mid(i, 1), (HUDRIGHT_X+128 + 11*i, HUDRIGHT_Y+83), TDF_ALIGN_RIGHT|TDF_HUDRIGHT, a1.amount < maxClip ? CLR_AMMO_LOW : CLR_AMMO_NORMAL,
								alpha: (ammoAmount == 0 || (""..ammoAmount).length() < 3-i) ? 0.25 : 1.0);
						}
					}
					
					let crossTex = TexMan.CheckForTexture(wepon.tspw_crosshair);
					
					screen.DrawTexture(crossTex, false, screen.GetWidth()/2, screen.GetHeight()/2,
						DTA_CenterOffset, true);
				}
			}
			
			// EASY AUTO ACTIVATED
			/*if(CVar.GetCVar("tsp_easyauto", players[0]).GetBool()) //Auto-Assist Enabled
			{
			DrawString(mTinyFont, "\cfAuto", (HUDRIGHT_X+109, HUDRIGHT_Y+58), DI_TEXT_ALIGN_CENTER, Font.CR_GOLD);
			}*/
			
			//================
			// WEAPON PIP
			//================
			
			// MEL
			if(CPlayer.mo is "TSP_MelPlayer")
			{
				DrawImage("MEL_WPIE", (HUDRIGHT_X, HUDRIGHT_Y), DI_ITEM_OFFSETS);
				for(int i = 0;i<7;i++)
				{
					if(CPlayer.HasWeaponsInSlot(i+1))
					{
						DrawImage("MEL_WPI"..i, (HUDRIGHT_X, HUDRIGHT_Y), DI_ITEM_OFFSETS);
					}
				}
				
				if(CPlayer.mo.FindInventory("MelChargeStyle"))
				{
					DrawImage("MEL_WPIX", (HUDRIGHT_X, HUDRIGHT_Y), DI_ITEM_OFFSETS);
				}
			}
			
			//================
			// Weapon Mod
			//================
			
				TSP_PlayerPawn_ZSCBase playerObj = TSP_PlayerPawn_ZSCBase(CPlayer.mo);
				if(playerObj.pp_notificationTime>0)
				{
					Centering = true;
					DrawString(mSmallFont, playerObj.pp_notification, (0,-36), DI_TEXT_ALIGN_CENTER|DI_NOSHADOW|DI_SCREEN_CENTER_BOTTOM, Font.CR_GREEN);
					Centering = false;
				}
				
			// DO the OBunty HUnters HSTUFff!!!!
			
			if ( handler_bh )
			{
				handler_bh.BH_DrawHud(TicFrac);
			}
			
			//================
			// Pickup Log
			//================
			
				for(int i = 0;i<playerObj.tsp_logs.Size();i++)
				{
					let thisone  = playerObj.tsp_logs[i];
					int yoff = 0;
					double alpher = 1.0;
					if(thisone.timeleft>138)
					{
						yoff = thisone.timeleft-138; //thunk
					}
					else if (thisone.timeleft<12)
					{
						alpher = thisone.timeleft/12.; //whoosh
					}
					
					TSP_DrawString("tsp_pickup", String.Format(thisone.whatugot, thisone.howmany), (HUDLEFT_X+130, HUDLEFT_Y+20-(16*i)+yoff), alpha: alpher);
					////TSP_DrawString(fnt_pickupLog, "buh"..String.Format(thisone.whatugot,thisone.howmany), (HUDLEFT_X+140, HUDLEFT_Y+33-(8*i)+yoff), DI_TEXT_ALIGN_LEFT, Font.CR_UNTRANSLATED, alpher);
					//DrawString(mTinyFont, String.Format(thisone.whatugot,thisone.howmany), (HUDLEFT_X+140, HUDLEFT_Y+33-(8*i)+yoff), DI_TEXT_ALIGN_LEFT, Font.CR_UNTRANSLATED, alpher);
				}
			
			//================
			// Notification Log
			//================
			
			int notiOffset = handler_bh ? 134 : 4;
			
				for(int i = 0;i<tsp_notifs.Size();i++)
				{
					let thisone  = tsp_notifs[i];
					double alpher = 1.0;
					if(thisone.time>136)
					{
						alpher = (140.-thisone.time)/(140.-136.); //thunk
					}
					else if (thisone.time<35)
					{
						alpher = thisone.time/35.; //whoosh
					}
					DrawString(mSmallFont, thisone.message, (0, notiOffset+24*i), DI_TEXT_ALIGN_CENTER|DI_SCREEN_HCENTER, Font.CR_UNTRANSLATED, alpher);
				}
			
			//================
			// Debug Shit
			//================
			
				if(isDebug)
				{
					string fuckBalls = CPlayer.attackdown ? "YES" : "no...";
					DrawString(mSmallFont, "\ccAttackDown: \c-"..fuckBalls, (-2, 2), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW, Font.FindFontColor("TSP_Green"));
					//string targetName = "N/A";
					
					/*if(playerObj.theZoop!=null)
					{
						targetName = playerobj.theZoop.GetClassName();
					}
					DrawString(mSmallFont, "\ccTarget: \c-"..targetName, (-2, 2), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW, Font.FindFontColor("TSP_Green"));*/
				}
				
				if(playerobj.pp_nextModSwitch != null)
				{
					bool foundIt;
					int slot; int alsoSlot; int index;
					int iconWidth = 32;
					[foundIt, slot] = CPlayer.weapons.LocateWeapon(CPlayer.ReadyWeapon.GetClass());
					[foundIt, alsoSlot, index] = CPlayer.weapons.LocateWeapon(playerobj.pp_nextModSwitch.GetClass());
					int slotMax = CPlayer.weapons.SlotSize(slot);
					for(int i = 0;i<slotMax;i++)
					{
						//let fucker = GetDefaultByType(CPlayer.weapons.GetWeapon(slot,i));
						bool hasIt = playerobj.pp_haveTheseWeapons.Find(CPlayer.weapons.GetWeapon(slot,i))!=playerobj.pp_haveTheseWeapons.Size();
						DrawImage("graphics/HUD3.0/weapons/weapon_mod_ph.png", (( ((-iconWidth*slotMax)/2)+iconWidth*i)+iconWidth/2 , -58), DI_SCREEN_CENTER_BOTTOM|DI_ITEM_CENTER, hasIt ? 1.0 : 0.5, (-1,-1), index==i ? (0.75,0.75) : (0.5,0.5));
							//DTA_DestWidth, 32, DTA_DestHeight, 32, DTA_TranslationIndex, hasIt ? -1 : Translation.GetID('TSP_Shop_Darken'));
					}
					DrawString(mSmallFont, "\cj[\cd"..playerobj.pp_nextModSwitch.tspw_altname.."\cj]", (0, -32), DI_TEXT_ALIGN_CENTER|DI_SCREEN_CENTER_BOTTOM, Font.CR_UNTRANSLATED, 1.0);
				}
		}
	}
}
