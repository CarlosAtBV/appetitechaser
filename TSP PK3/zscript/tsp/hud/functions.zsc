Extend Class TSP_StatusBar
{
	Dictionary hud_textColors;
	
	enum TSPDrawTextureFlags
	{
		TDF_HUDLEFT = 0,
		TDF_HUDRIGHT = 0x1,
	}
	
	enum TSPDrawTextFlags
	{
		TDF_ALIGN_LEFT = 0,
		TDF_ALIGN_RIGHT = 0x10,
		TDF_ALIGN_CENTER = 0x20,
	}
	
	static Color TSP_GetErrorColor()
	{
		return Color(255, int(255*abs(sin(level.maptime*10))), 0, 0);
	}
	
	void TSP_SetClipRect(int x, int y, int width, int height, int flags = 0)
	{
		float fx = x * hud_scale;
		if ( flags & TDF_HUDRIGHT )
		{
			fx += screen.GetWidth();
		}
		SetClipRect(fx, (y * hud_scale), (width * hud_scale), (height * hud_scale));
	}

	void TSP_DrawImage (String image, Vector2 pos, int flags = 0, float alpha = 1.0)
	{
		let tex = TexMan.CheckForTexture(image);
		TSP_DrawTexture(tex, pos, flags, alpha);
	}
	
	void TSP_DrawTexture (TextureID tex, Vector2 pos, int flags = 0, float alpha = 1.0, Color color = CLR_WHITE)
	{
		pos *= hud_scale;
		pos += drawOffset;
		if ( flags & TDF_HUDRIGHT )
		{
			pos.x += screen.GetWidth();
		}
		screen.DrawTexture(tex, true, pos.x, pos.y,
			DTA_ScaleX, hud_scale, DTA_ScaleY, hud_scale,
			DTA_Alpha, alpha, DTA_Color, color);
	}
	
	void TSP_DrawString (String getFont, String string, Vector2 pos, int flags = 0, Color color = CLR_WHITE, float alpha = 1.0, int wrapwidth = -1, int linespacing = 4, Vector2 scale = (1,1), int pt = 0, ERenderStyle style = STYLE_Translucent)
	{
		Font fnt = Font.GetFont(getFont);
		if ( fnt == null ) ThrowAbortException("Unknown font: '"..getFont.."'");
		int kerning = fnt.GetDefaultKerning();
		
		if ( flags & TDF_ALIGN_RIGHT )
		{
			pos.x -= fnt.StringWidth(string);
			//pos.x -= fnt.GetCharWidth(string.ByteAt(0));
		}
		else if ( flags & TDF_ALIGN_CENTER )
		{
			pos.x -= (fnt.StringWidth(string))/2;
			//pos.x -= fnt.GetCharWidth(string.ByteAt(0)) / 2;
		}
		
		pos *= hud_scale;
		pos += drawOffset;
		
		if ( flags & TDF_HUDRIGHT )
		{
			pos.x += screen.GetWidth();
		}
		
		Color newColor = color;
		
		for ( int i = 0; i < string.Length(); i++ )
		{
			if ( string.ByteAt(i) == 28 )
			{
				if ( string.ByteAt(i+1) == 91 )
				{
					//Console.Printf("~ [] Color Type");
					int startPos = i+2;
					int bt = startPos;
					while( bt < string.Length() && string.ByteAt(bt) != 93 )
					{
						bt++;
					}
					bt -= startPos;
					newColor = Color(ui_textcolors.colors.At(string.Mid(startPos, bt)));
					newColor = Color(255, newColor.r, newColor.g, newColor.b);
					//newColor = TSP_GetErrorColor();//Color(255, 124, 183, 255);
					i = startPos+bt;
					continue;
				}
				else
				{
					//Console.Printf("~ c Color Type");
					newColor = Color(255, 255, 255, 255);
					i += 1;
					continue;
				}
			}
			string charTex = "fonts/"..getFont.."/"..(String.Format("%04x", string.ByteAt(i)))..".png";
			TextureID tex = TexMan.CheckForTexture(charTex);
			screen.DrawTexture(tex, true, pos.x, pos.y, DTA_ScaleX, hud_scale, DTA_ScaleY, hud_scale,
				DTA_Alpha, alpha, DTA_Color, newColor);
			pos.x += ( fnt.GetCharWidth(string.ByteAt(i)) + kerning ) * hud_scale;
		}
		
		/*screen.DrawText(fnt, Font.CR_UNTRANSLATED, pos.x, pos.y-16, string,
			DTA_Alpha, alpha, DTA_COLOR, color, DTA_ScaleX, hud_scale, DTA_ScaleY, hud_scale);*/
	}
	
	void TSP_DrawText (Font fnt, String string, Vector2 pos, int flags = 0, Color color = CLR_WHITE, float alpha = 1.0)
	{
		int xOff = 0;
		int baseX = pos.x;
		
		bool manualPos = flags & DI_SCREEN_HCENTER;
		
		if ( flags & DI_TEXT_ALIGN_RIGHT )
		{
			xOff = -(fnt.StringWidth(string));
		}
		else if ( flags & DI_TEXT_ALIGN_CENTER )
		{
			xOff = -(fnt.StringWidth(string))/2;
		}
		
		if ( flags & DI_SCREEN_HCENTER )
		{
			baseX = screen.GetWidth() / 2;
		}
		
		screen.DrawText(fnt, Font.CR_UNTRANSLATED, drawOffset.x+baseX+xOff, drawOffset.y+pos.y, string,
			DTA_Alpha, alpha, DTA_COLOR, CLR_BH_TIMER);
	}
	
	void TSP_DrawBar (int value, int max, Vector2 pos, string bg, string fg, int slope = 0, int flags = 0)
	{
		let fgTex = TexMan.CheckForTexture(fg);
		let bgTex = TexMan.CheckForTexture(bg);
		int texWidth, texHeight;
		float slopeAbs = max(1,abs(slope));
		[texWidth, texHeight] = TexMan.GetSize(fgTex);
		int daValue = ( value / float(max) ) * texWidth;
		
		/*if ( (texHeight/slopeAbs)*slopeAbs < texHeight )
		{
			texHeight += 1;
		}*/
		
		Vector2 clipPos, clipSize;
		TSP_DrawTexture(bgTex, pos, flags: flags);
		for ( int i = 0; i < slopeAbs; i++ )
		{
			if ( slope>0 )
			{
				clipPos = pos + (i, 0);
			}
			else
			{
				clipPos = pos + ((slopeAbs-i), 0);
			}
			clipPos.y += (texHeight/slopeAbs)*i;
			clipSize = (texWidth, (texHeight/slopeAbs));
			clipPos *= hud_scale;
			clipSize *= hud_scale;
			SetClipRect(clipPos.x, clipPos.y, clipSize.x, clipSize.y);
			TSP_DrawTexture(fgTex, (pos.x + (-texWidth + daValue), pos.y), flags);
			//screen.Dim("#FF0000", 1.0, 0, 0, screen.GetWidth(), screen.GetHeight()); 
		}
		ClearClipRect();
	}
}