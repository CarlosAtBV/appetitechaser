Class TSP_Mel_SlamHandler : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
	
	Actor inflictor;
	bool oldGravity;
	
	override void AttachToOwner (Actor other)
	{
		super.AttachToOwner(other);
		oldGravity = owner.bNoGravity;
		
		owner.vel = (0, 0, -32);
	}
	
	override void DoEffect()
	{
		owner.A_SetTics(-1);
		owner.bTHRUACTORS = true;
		owner.bNoGravity = true;
		
		let fx = TSP_Mel_SlamAfterImage(Spawn("TSP_Mel_SlamAfterImage", owner.pos));
		if ( fx )
		{
			fx.master = owner;
			fx.Initialize();
		}
		
		if ( vel.z == 0 )
		{
			owner.bNoGravity = oldGravity;
			
			BlockThingsIterator MonsterFinder = BlockThingsIterator.Create(owner, 512, 0);
			
			Actor mo;
			
			while ( MonsterFinder.Next() )
			{
				mo = Actor(MonsterFinder.thing);
				if ( mo == inflictor || mo == owner || owner.Distance3D(mo) > 512 )
				{
					continue;
				}
				
				double damageAmount = 1.0 - owner.Distance3D(mo) / 512.;
				mo.vel.z += 4 * damageAmount;
				mo.DamageMobj(inflictor, inflictor, (owner.SpawnHealth() * 0.75) * damageAmount, 'MagSlam', DMG_FORCED);
			}
			
			owner.DamageMobj(inflictor, inflictor, 400, 'MagSlam', DMG_FORCED);
			
			owner.A_QuakeEx(4, 4, 4, 5, 0, 1024, rollintensity: 4);
			
			owner.TakeInventory("TSP_Mel_SlamHandler", 1);
			
			return;
		}
		
		owner.vel = (0, 0, -32);
	}
	
	override void DetachFromOwner ()
	{
		owner.bTHRUACTORS = false;
		if ( owner.health > 0 )
		{
			owner.A_SetTics(12);
		}
		else
		{
			owner.A_SetTics(1);
		}
		super.DetachFromOwner();
	}
}

Class TSP_Mel_SlamAfterImage : Actor
{
	Default
	{
		+BRIGHT
		+NOINTERACTION
		+NOBLOCKMAP
		+ROLLSPRITE
		+ROLLCENTER
		Alpha 1.0;
		RenderStyle "Add";
		Translation "TSP_Targeting_Normal";
	}
	
	void Initialize()
	{
		if ( master != null )//|| player == null )
		{
			angle = master.angle;
			sprite = master.sprite;
			frame = master.frame;
			scale = master.scale;
			roll = master.roll;
		}
		else
		{
			Destroy();
		}
	}
	
	override void Tick()
	{
		super.Tick();
		
		alpha -= 0.1;
		scale.x *= 0.8;
		if ( alpha <= 0.0 )
		{
			Destroy();
		}
	}
	
	States
	{
		Spawn:
			POSS A -1;
			Stop;
	}
}