//------------------------------------------------------------------------------
// Are you tired of [USING GUNS]? Don't you just want to go ape shitt
//------------------------------------------------------------------------------

Extend Class TSP_Weapon_Core
{	
	const HITLAG_BASE = 2;//1;
	const HITLAG_MULT = 0;//0.2;
	
	// add thing to disable hitstun
	
	//==========================================================================
	//
	// A_TSP_Melee(damage, range, puff, thrustHorz, thrustVert, thrustUp, angle)
	//
	//==========================================================================
	
		action void A_TSP_Melee(int mDamage, int mRange = 72, string mPuff = "BasicMeleePuff", double mThrustHorz = 0, double mThrustVert = 0, double mThrustUp = 0, int mAngle = 45, int mPitch = 45, int flags = 0)
		{
			bool hasHit = false;
			bool hasKilled = false;
			
			int baseAddon = HITLAG_BASE*floor(mDamage/20);
			int baseHitlag = (mDamage * 0.05 + 4);//HITLAG_BASE+baseAddon;
			//A_FireBullets(0,0,1,0,"TQB_Puff",0,75);
			//ThinkerIterator MonsterFinder = ThinkerIterator.Create("Actor");
			BlockThingsIterator MonsterFinder = BlockThingsIterator.Create(self,512,0);
			
			Actor mo;
			Array<Actor > freezeUs;
			Array<Actor > hitFreezeUs;
			freezeUs.Clear();
			hitFreezeUs.Clear();
			
			Class<Actor > bulletPuffToSpawn = mPuff;
			string bulletPuffToSpawn_sound = GetDefaultByType(bulletPuffToSpawn).seeSound;
			
			while (MonsterFinder.Next())
			{
				mo = Actor(MonsterFinder.thing);
				
				if ( mo == invoker.owner ) continue;
				
				if ( (invoker.owner.Distance3D(mo)-mo.radius<mRange) && mo.Health>0
				&& (mo.bShootable || mo is "TSP_BountyHunters_TimeExtCrystal") && !mo.bNoDamage && CheckSight(mo)
				&& abs(DeltaAngle(AngleTo(mo),self.angle))<mAngle )
				{
					//Spawn("TSP_HitSpark_Small",mo.pos+(0,0,mo.Height/2));
					Vector3 spawnPos = mo.pos+(0,0,mo.Height/2);
					Actor shine1 = Spawn("TSP_HitSpark_Shine", spawnPos);
					shine1.roll = random(0,360);
					Actor shine2 = Spawn("TSP_HitSpark_Shine", spawnPos);
					shine2.roll = shine1.roll + random(80,100);
					Actor wave = Spawn("TSP_HitSpark_Wave", spawnPos);
					
					shine1.scale *= mDamage/20;
					shine2.scale *= mDamage/20;
					wave.scale *= mDamage/20;
					
					int damageamount = mDamage;
					int myMaxHealth = mo.GetSpawnHealth();
					double stuntime;
					stuntime = baseHitlag;
					
					if(!(flags & TSPM_SUPERFREEZE) && mo.CountInv("TSP_EnemyHandler_IsSupered")==0)
					{
						TSP_EnemyHandler_Freezer handlerFreezer = TSP_EnemyHandler_Freezer(new("TSP_EnemyHandler_Freezer"));
						handlerFreezer.owner = mo;
						handlerFreezer.timeleft = stuntime+2;
					}
					
					if(mThrustUp>0&&mo.health>0&&mo.bIsMonster)
					{
						mo.GiveInventory("TSP_Mel_StasisHandler", 1);
						/*stuntime = -1;
						TSP_EnemyHandler_OnHit handlerThing = TSP_EnemyHandler_OnHit(new("TSP_EnemyHandler_OnHit"));
						if(flags & TSPM_SUPERFREEZE)
						{
							//handlerThing.superfreeze = 35*5;
						}
						handlerThing.owner = mo;
						mo.A_PlaySound(mo.PainSound,CHAN_VOICE);*/
					}
					
					double fugSin = sin(angle);
					double fugCos = cos(angle);
					
					if(!mo.bBoss)
					{
						mo.vel.X = mThrustVert * fugCos + mThrustHorz * fugSin;
						mo.vel.Y = mThrustVert * fugSin - mThrustHorz * fugCos;
						mo.vel.Z = mThrustUp;
					}
					
					int funnyDamage = mo.DamageMobj(invoker.owner,invoker.owner,damageamount,'Melee');
					//mo.A_Quake(2,4,0,750);
					if(!mo.bNoPain&&mo.resolveState("Pain")!=null&&mo.Health>0)
					{
						mo.SetStateLabel("Pain");
						mo.A_SetTics(stuntime); //keep an eye on this conflicting with the freeze code
					}
					if(!mo.bNoBlood)
					{
						for(int i = 0;i<3;i++)
						{
							Actor blood = mo.Spawn("Blood",mo.pos+(0,0,mo.Height/2));
							blood.vel = (frandom(-2,2),frandom(-2,2),frandom(2,6));
						}
					}
					mo.A_PlaySound(bulletPuffToSpawn_sound, CHAN_BODY);
					
					if ( mo.Health <= 0 )
					{
						hasKilled = true;
					}
					
					hashit = true;
					hitFreezeUs.Push(mo);
				}
				else if ( mo.Health > 0 && ( mo.bShootable || mo.bMissile ) )
				{
					freezeUs.Push(mo);
				}
			}
			
			int baseHitlagFinal = baseHitlag;//( hasKilled ? baseHitlag + 3 : baseHitlag );
			
			if(hashit)
			{
				A_SetTics(baseHitlag);
				TSP_PlayerPawn_ZSCBase(invoker.owner).pp_punchWarp = mDamage/10.0;
				TSP_PlayerPawn_ZSCBase(invoker.owner).pp_hitFreeze = baseHitlagFinal;
				TSP_PlayerPawn_ZSCBase(invoker.owner).pp_hitVel = invoker.owner.vel;
			
				for ( int i = 0; i < freezeUs.Size(); i++ )
				{
					TSP_EnemyHandler_Freezer handlerFreezer = TSP_EnemyHandler_Freezer(new("TSP_EnemyHandler_Freezer"));
					handlerFreezer.owner = freezeUs[i];
					handlerFreezer.timeleft = baseHitlagFinal + 2;
				}
				for ( int i = 0; i < hitFreezeUs.Size(); i++ )
				{
					TSP_EnemyHandler_Freezer handlerFreezer = TSP_EnemyHandler_Freezer(new("TSP_EnemyHandler_Freezer"));
					handlerFreezer.owner = hitFreezeUs[i];
					handlerFreezer.timeleft = baseHitlagFinal + 2;
					handlerFreezer.wasHit = true;
				}
			}
			else
			{
				A_FireBullets(0,0,1,0,mPuff,0,mRange);
			}
			
			if ( hasKilled )
			{
				invoker.owner.A_StartSound("misc/meleekill", CHAN_BODY, CHANF_OVERLAP);
			}
		}
}