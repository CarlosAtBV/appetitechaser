Class TSP_Weapon_Core : DoomWeapon
{
	const PSP_TSP_UNDERGUN = -10;
	const PSP_TSP_RELOADHAND = -5;
	const PSP_TSP_UPPERHAND = 5;
	const PSP_TSP_RELOADHACK = 50;
	
	bool tspw_traitmode;
	
	bool tspw_altmode;
	string tspw_altname;
	
	enum E_TSP_WeaponReadyFlags
	{ 
		TSPWRF_NORELOAD = 1,
		TSPWRF_NOFIRE = 2,
		TSPWRF_RELOADHACK = 4,
	}
	
	int tspw_weaponflags;
	flagdef ModFireMode: tspw_weaponflags, 0;
	flagdef HoldDownForMod: tspw_weaponflags, 1;
	flagdef ModFireZooms: tspw_weaponflags, 2;
	flagdef NoModSwitch: tspw_weaponflags, 4;
	property ModTag : tspw_altname;

	int tspw_powerlevel;
	int tspw_maxpowerlevel;
	int tspw_ammolevel;
	int tspw_maxammolevel;
	int tspw_reloadlevel;
	int tspw_maxreloadlevel;
	
	string tspw_spritename;
	
	double tspw_powermult1, tspw_powermult2, tspw_powermult3;
	double tspw_ammomult1, tspw_ammomult2, tspw_ammomult3;
	double tspw_reloadmult1, tspw_reloadmult2, tspw_reloadmult3;
	
	Color tspw_hudcolor;
	
	property MaxLevels : tspw_maxpowerlevel, tspw_maxammolevel, tspw_maxreloadlevel;
	property PowerMult : tspw_powermult1, tspw_powermult2, tspw_powermult3;
	property AmmoMult : tspw_ammomult1, tspw_ammomult2, tspw_ammomult3;
	property ReloadMult : tspw_reloadmult1, tspw_reloadmult2, tspw_reloadmult3;
	property SpriteNameBase : tspw_spritename;
	
	int tspw_curclip;
	int tspw_clipsize;
	property ClipSize : tspw_clipsize;
	
	TSP_PlayerPawn_ZSCBase tspw_owner;
	string tspw_crosshair;
	
	int tspw_lastfire;
	bool tspw_canZoom;
	
	string tspw_firstpickupline;
	Property FirstPickupLine : tspw_firstpickupline;
	Property Crosshair : tspw_crosshair;
	Property HudColor : tspw_hudcolor;
	
	Weapon tsp_desiredModSwitch;
	
	Array<TSP_PyAnim> tspw_animations;
	Vector3 tspw_recoilPos;
	
	string tspw_portrait;
	property Portrait : tspw_portrait;
	
	action void A_TSP_ZoomFactor (double scale = 1.0)
	{
		let tspOwner = TSP_PlayerPawn_ZSCBase(invoker.owner);
		if ( tspOwner != null )
		{
			tspOwner.tsp_fb_zoom = scale;
		}
	}
	
	virtual ui void TSP_DrawWeaponHud (double fractic)
	{
	}
	
	action void A_TSP_DeselectLogic()
	{
		invoker.TSP_ClearWeaponExtras();
		A_TSP_ZoomFactor(1.0);
		invoker.tspw_altmode = false;
		/*for ( int i = 0; i < invoker.tspw_animations.Size(); i++ )
		{
			invoker.tspw_animations[i].Reset();
		}*/
	}
	
	action void A_TSP_AnimLayer (int layer, double x, double y, double angle, bool interpolate = true)
	{
		let psprite = invoker.owner.player.GetPSprite(layer);
		
		let sprTex = TexMan.CheckForTexture(String.Format(psprite.Sprite.."%c0", 65+psprite.frame));
		Vector2 sprOffset = TexMan.GetScaledOffset(sprTex);// - (0, 32);
		Vector2 sprSize = TexMan.GetScaledSize(sprTex);
		
		if ( !interpolate )
		{
			psprite.oldx = x;
			psprite.oldy = y + 32;
		}
		
		psprite.bPivotPercent = false;
		//psprite.bAddWeapon = true;
		//psprite.bAddBob = true;
		
		Vector2 screenCenter = (160, 0);// - 32);
		
		psprite.pivot = sprOffset + screenCenter;
		//psprite.pivot = screenCenter + (sprOffset.x, sprOffset.y);//(160, 100 - 32) + (-sprOffset.x, sprOffset.y);//offset;
		//psprite.x = x;
		psprite.x = x;
		psprite.y = y + 32;
		//psprite.y = y;//layer == PSP_WEAPON ? 32+y : y;
		psprite.rotation = angle;
	}
	
	//Inventory tspw_nextmod; Inventory tspw_prevmod;
	
	Default
	{
		TSP_Weapon_Core.MaxLevels 3, 3, 3;
		TSP_Weapon_Core.PowerMult 1.5, 1.75, 2.0;
		TSP_Weapon_Core.AmmoMult 1.5, 2.0, 2.5;
		TSP_Weapon_Core.ReloadMult 1.5, 2.0, 2.5;
		TSP_Weapon_Core.ReloadMult 1.5, 2.0, 2.5;
		TSP_Weapon_Core.ModTag "Default";
		TSP_Weapon_Core.HudColor "#FF00FF";
		
		TSP_Weapon_Core.Crosshair "graphics/crosshairs/crosshair_nikki.png";
	}
	
	action void A_TSP_AllowZoom(bool theVerdict)
	{
		invoker.tspw_canZoom = theVerdict;
	}
	
	action void A_TSP_SetSpriteIndex(int layer, name theSprite)
	{
		invoker.owner.player.GetPSprite(layer).Sprite = invoker.GetSpriteIndex(theSprite);
	}
	
	action void A_TSP_SetSpriteFrame(int layer, name theSprite)
	{
		invoker.owner.player.GetPSprite(layer).Sprite = invoker.GetSpriteIndex(invoker.tspw_spritename..theSprite);
	}
	
	clearscope int GetClipCapacity()
	{
		int clipcap = tspw_clipsize;
		switch(tspw_ammolevel)
		{
			 case 1: clipcap *= (tspw_ammomult1); break;
			 case 2: clipcap *= (tspw_ammomult2); break;
			 case 3: clipcap *= (tspw_ammomult3); break;
		}
		return clipcap;
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		if(tspw_curclip==0) tspw_curclip = GetClipCapacity();
		tspw_animations.Clear();
		if ( tsp_debug )
		{
			Console.Printf("initializing animations");
		}
		TSP_InitAnimations();
	}
	
	int input_weaponReady;
	int input_weaponReadyType;
	int input_weaponFlags;
	
	override void Tick()
	{
		super.Tick();
		
		if ( owner != null && owner.player.ReadyWeapon == self )
		{
			tspw_traitmode = (owner.player.cmd.buttons & BT_USER1);
			if(tspw_owner==null)
			{
				tspw_owner = TSP_PlayerPawn_ZSCBase(owner);
			}
			
			if ( owner.player.ReadyWeapon == self )
			{
				crosshair = 16;
				for ( int i = 0; i < tspw_animations.Size(); i++ )
				{
					tspw_animations[i].Tick();
				}
			}
			
			InputTick();
			//WeaponTick();
			//A_SetCrosshair(16);
			//FOVScale = 1.0 - 0.4 * (tspw_altmode && bModFireZooms && tspw_canZoom);
		}
	}
	
	void WeaponTick()
	{
		if ( input_weaponReady < 1 ) return;
		
		
	}
	
	void TSP_StopAllAnims()
	{
		for ( int i = 0; i < tspw_animations.Size(); i++ )
		{
			tspw_animations[i].Reset();
		}
	}
	
	bool canReload()
	{
		return (owner.CountInv(ammo1.GetClass())>0);
	}
	
	action void A_TSP_WeaponRecoil(double x, double y, int type = 0)
	{
		if(invoker.owner!=null)
		{
			if(type==0)
			{
				TSP_PlayerPawn_ZSCBase(invoker.owner).pp_weaponRecoil += (x,y);
			}
			else
			{
				TSP_PlayerPawn_ZSCBase(invoker.owner).pp_weaponRecoilSlow += (x,y);
			}
		}
	}
	
	action void A_TSP_WeaponRecoilDir(int angle, double dist, int type = 0)
	{
		if(invoker.owner!=null)
		{
			if(type==0)
			{
				TSP_PlayerPawn_ZSCBase(invoker.owner).pp_weaponRecoil += (cos(angle)*dist,sin(angle)*dist);
			}
			else
			{
				TSP_PlayerPawn_ZSCBase(invoker.owner).pp_weaponRecoilSlow += (cos(angle)*dist,sin(angle)*dist);
			}
		}
	}
	
	void TSP_ClearWeaponExtras()
	{
		for ( int i = -250; i < 250; i++ )
		{
			if ( i == PSP_WEAPON ) continue;
			owner.player.SetPSprite(i, resolveState(null));
		}
		TSP_StopAllAnims();
	}
	
	action void A_TSP_WeaponReady(int tspflags = 0)
	{
		int flags;
		//if ( tspflags & TSPWRF_NOFIRE ) flags &= WRF_NOFIRE;
		A_WeaponReady();
		if ( !(tspflags & TSPWRF_RELOADHACK) )
		{
			invoker.owner.player.SetPSprite(PSP_TSP_RELOADHACK, resolveState(null));
		}
		invoker.input_weaponReadyType = 0;
		invoker.input_weaponFlags = tspflags;
	}
	
	action void A_TSP_MeleeReady(int tspflags = 0)
	{
		int flags;
		//if ( tspflags & TSPWRF_NOFIRE ) flags &= WRF_NOFIRE;
		A_WeaponReady();
		invoker.input_weaponReadyType = 1;
		invoker.input_weaponFlags = tspflags;
		/*invoker.input_weaponReadyType = 1;
		if ( invoker.input_weaponReady < 1 )
		{
			invoker.input_weaponReady++;
		}
		invoker.input_weaponFlags = tspflags;*/
	}
	
	action state A_TSP_GotoReadyState()
	{
		return invoker.GetReadyState();
	}
	
	bool TSP_IsClipEmpty()
	{
		return (tspw_curclip == 0);
	}
	
	action state A_TSP_JumpIfClipEmpty(StateLabel state)
	{
		if(invoker.tspw_curclip==0)
		{
			return resolveState(state);
		}
		return resolveState(null);
	}
	
	action state A_TSP_JumpIfClipLower(int lower,StateLabel state)
	{
		if(invoker.tspw_curclip<lower)
		{
			return resolveState(state);
		}
		return resolveState(null);
	}
	
	action state A_TSP_CheckReload()
	{
		if(invoker.tspw_altmode && invoker.tspw_curclip<invoker.ammouse2)
		{
			if(invoker.owner.CountInv(invoker.ammo1.GetClass())>0)
			{
				return resolveState("Reload");
			}
		}
		else if (invoker.tspw_curclip<invoker.ammouse1)
		{
			if(invoker.owner.CountInv(invoker.ammo1.GetClass())>0)
			{
				return resolveState("Reload");
			}
		}
		return resolveState(null);
	}
	
	action void A_TSP_ReloadAmmo(int amt = 0)
	{
		if(amt<1)
		{
			while(invoker.tspw_curclip<invoker.GetClipCapacity() && invoker.canReload())
			{
				invoker.tspw_curclip++;
				invoker.owner.TakeInventory(invoker.ammo1.GetClass(),1);
			}
		}
		else
		{
			invoker.tspw_curclip += amt;
			invoker.owner.TakeInventory(invoker.ammo1.GetClass(),1);
		}
	}
	
	action state A_TSP_JumpIfModInactive(StateLabel state)
	{
		if(!invoker.tspw_altmode)
		{
			return resolveState(state);
		}
		return resolveState(null);
	}
	
	action void A_TSP_ReloadSpeed(int speedy = 1)
	{
		switch(invoker.tspw_reloadlevel)
		{
			 case 1: speedy /= (invoker.tspw_reloadmult1); break;
			 case 2: speedy /= (invoker.tspw_reloadmult2); break;
			 case 3: speedy /= (invoker.tspw_reloadmult3); break;
		}
		
		A_SetTics(speedy);
	}
	
	action void A_TSP_ReloadMult()
	{
		let psprite = invoker.owner.player.psprites;
		
		int add;
		
		switch(invoker.tspw_reloadlevel)
		{
			 case 0: add = 15; break;
			 case 1: add = 10; break;
			 case 2: add = 5; break;
			 case 3: add = 0; break;
		}
		
		while(psprite)
		{
			if( psprite != null )
			{
				psprite.Tics += add;
				psprite = psprite.Next;
			}
		}
	}
		
	virtual void TSP_InitAnimations()
	{
	}
	
	TSP_PyAnim CreateNewAnimation()
	{
		TSP_PyAnim newAnim = TSP_PyAnim.Init();
		tspw_animations.Push(newAnim);
		return newAnim;
	}
	
	override void AttachToOwner (Actor other)
	{
		super.AttachToOwner(other);
		TSP_InitAnimations();
	}
	
	ui Vector2, double TSP_GetWeaponOffsets(int psprite, double ticFrac)
	{
		let origsprite = owner.player.FindPSprite(PSP_WEAPON);
		
		Vector2 baseOffset = origsprite ? (origsprite.oldx + (origsprite.x - origsprite.oldx) * ticFrac, origsprite.oldy + (origsprite.y - origsprite.oldy) * ticFrac - 32) : (0,0);
		double baseRotate = 0;
		double baseScale = 0;
		
		baseOffset.y += tspw_owner.tsp_lastbob + (tspw_owner.tsp_bob - tspw_owner.tsp_lastbob) * ticFrac;
		
		for ( int i = 0; i < tspw_animations.Size(); i++ )
		{
			//Console.Printf("uhhh the find is "..tspw_animations[i].psprites.Find(psprite));
			if ( tspw_animations[i].psprites.Find(psprite) != tspw_animations[i].psprites.Size() )
			{
				baseOffset += tspw_animations[i].GetPos(ticFrac);
				baseRotate += tspw_animations[i].GetRot(ticFrac);
			}
		}
		
		return baseOffset, baseRotate;
	}

	States
	{
		ModOff:
			"----" A 1 A_WeaponOffset(0, 1, WOF_ADD);
			"----" A 1 A_WeaponOffset(0, 2, WOF_ADD);
			"----" A 1 A_WeaponOffset(0, 4, WOF_ADD);
			"----" A 1 A_WeaponOffset(0, 8, WOF_ADD);
			"----" A 1 A_WeaponOffset(0, 16, WOF_ADD);
			"----" A 1 A_WeaponOffset(0, 32, WOF_ADD);
			"----" A 1 A_WeaponOffset(0, 64, WOF_ADD);
			TNT1 A 5 A_WeaponOffset(0, 0);
			"----" A 0 A_StartSound("nikki/upgrade/remove", 5); // replace with unique sounds later
			"----" A 0 A_Jump(256,"WaitForModSwitch"); //has 2 be a jump :pensive:
			Stop;
		WaitForModSwitch:
			"----" A 1
			{
				let pOwner = TSP_PlayerPawn_ZSCBase(invoker.owner);
				if(pOwner.pp_moddelay>0)
				{
					pOwner.pp_moddelay--;
				}
				else
				{
					let oldWeapon = invoker.owner.player.ReadyWeapon;
					//Console.Printf("Switching to "..invoker.owner.player.PendingWeapon.GetTag());
					player.mo.BringUpWeapon();
					//Console.Printf("Switched to "..invoker.owner.player.ReadyWeapon.GetTag());
					if(oldWeapon!=null && oldWeapon!=player.ReadyWeapon)
					{
						player.mo.A_TakeInventory(oldWeapon.GetClass(),1);
					}
				}
			}
			Loop;
		ReloadReadyHack:
			TNT1 A 1 A_TSP_WeaponReady(TSPWRF_NORELOAD|TSPWRF_RELOADHACK);
			Wait;
	}
}