//------------------------------------------------------------------------------
// The functions that handle what states to look for.
//------------------------------------------------------------------------------

Extend Class TSP_Weapon_Core
{
	override State GetUpState ()
	{
		if(TSP_PlayerPawn_ZSCBase(owner).pp_switchingmod && FindState('ModOn'))
		{
			TSP_PlayerPawn_ZSCBase(owner).pp_switchingmod = false;
			TSP_PlayerPawn_ZSCBase(owner).pp_nextModSwitch = null;
			return FindState('ModOn');
		}
		return FindState('Select');
	}
	override State GetDownState ()
	{
		let playerMo = TSP_PlayerPawn_ZSCBase(owner);
		let player = TSP_PlayerPawn_ZSCBase(owner).player;
		int slot;
		int slot2;
		if(playerMo.pp_nextModSwitch!=null)
		{
			bool found;
			[found, slot] = player.weapons.LocateWeapon(playerMo.pp_nextModSwitch.GetClass());
			[found, slot2] = player.weapons.LocateWeapon(player.ReadyWeapon.GetClass());
		}
		if(TSP_PlayerPawn_ZSCBase(owner).pp_switchingmod && playerMo.pp_nextModSwitch != null && slot == slot2 && FindState('ModOff'))
		{
			return FindState('ModOff');
		}
		return FindState('Deselect');
	}
	
	override State GetReadyState ()
	{
		if(tspw_altmode)
		{
			return FindState('ModReady');
		}
		return FindState('Ready');
	}
	
	override State GetAtkState (bool hold)
	{
		State s = null;
		if(tspw_traitmode)
		{
			if (hold) s = FindState('TraitHold');
			if (s == null) s = FindState('TraitFire');
		}
		else if(tspw_altmode)
		{
			if (hold) s = FindState('ModHold');
			if (s == null) s = FindState('ModFire');
		}
		else
		{
			if (hold) s = FindState('Hold');
			if (s == null) s = FindState('Fire');
		}
		return s;
	}
	override State GetAltAtkState (bool hold)
	{
		State s = null;
		if(tspw_traitmode)
		{
			if (hold) s = FindState('TraitAltHold');
			if (s == null) s = FindState('TraitAltFire');
		}
		else if(!bModFireMode)
		{
			if (hold) s = FindState('AltHold');
			if (s == null) s = FindState('AltFire');
		}
		return s;
	}
}