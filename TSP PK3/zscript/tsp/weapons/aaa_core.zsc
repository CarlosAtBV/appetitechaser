Class TSP_MagSmokeFX : Actor
{
	Default
	{
		+NOINTERACTION
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			SMOK A 0;
			SMOK A 0 A_SetScale(randompick(-1,1),randompick(-1,1));
			SMOK ABCDEFGHIJKLMNOPQ 1;
			Stop;
	}
}

Class TSP_MagFX : Actor
{
	Default
	{
		+NOINTERACTION
		+BRIGHT
		RenderStyle "Add";
		Translation "0:255=%[0.00,0.00,0.00]:[0.35,2.00,0.48]";
	}
	
	override void Tick()
	{
		super.Tick();
		
		if(target!=null)
		{
			SetOrigin(target.pos+(0,0,target.height/2),true);
		}
		else
		{
			Destroy();
		}
	}
	
	States
	{
		Spawn:
			MFX0 ABCD 2;
			Loop;
	}
}

Class TSP_EnemyHandler_IsSupered : Inventory
{
	Default
	{
		Inventory.MaxAmount 1000;
	}
}

Class TSP_EnemyHandler_SlamDunk : Thinker
{
	Actor inflictor;
	Actor owner;
	double oldZ;
	
	override void PostBeginPlay()
	{
		oldZ = owner.pos.z+1;
	}
	
	override void Tick()
	{
		if(owner==null)
		{
			Destroy();
			return;
		}
		
		if(oldZ==owner.pos.z)
		{
			if(!owner.bNoPain&&owner.resolveState("Pain")!=null&&owner.Health>0)
			{
				owner.SetStateLabel("Pain");
				owner.A_SetTics(12);
			}
			owner.TakeInventory("TSP_EnemyHandler_IsSupered",1000);
			owner.DamageMobj(inflictor,inflictor,200,'Melee',DMG_THRUSTLESS);
			if(owner!=null)
			{
				owner.A_PlaySound("mag/fissure/hit",CHAN_5);
				owner.A_QuakeEx(1,1,1,4,0,192);
				owner.A_Explode(128,128,0,false,0,0,0,"","MagSlam");
				Destroy();
			}
		}
		
		if(owner==null)
		{
			Destroy();
			return;
		}
		
		oldZ = owner.pos.z;
	}
}

Class TSP_Weapon_Core : DoomWeapon
{
	bool tspw_traitmode;
	
	bool tspw_altmode;
	string tspw_altname;
	
	int tspw_weaponflags;
	flagdef ModFireMode: tspw_weaponflags, 0;
	flagdef HoldDownForMod: tspw_weaponflags, 1;
	flagdef ModFireZooms: tspw_weaponflags, 2;
	flagdef NoModSwitch: tspw_weaponflags, 4;
	property ModTag : tspw_altname;

	int tspw_powerlevel;
	int tspw_maxpowerlevel;
	int tspw_ammolevel;
	int tspw_maxammolevel;
	int tspw_reloadlevel;
	int tspw_maxreloadlevel;
	
	string tspw_spritename;
	
	double tspw_powermult1, tspw_powermult2, tspw_powermult3;
	double tspw_ammomult1, tspw_ammomult2, tspw_ammomult3;
	double tspw_reloadmult1, tspw_reloadmult2, tspw_reloadmult3;
	
	property MaxLevels : tspw_maxpowerlevel, tspw_maxammolevel, tspw_maxreloadlevel;
	property PowerMult : tspw_powermult1, tspw_powermult2, tspw_powermult3;
	property AmmoMult : tspw_ammomult1, tspw_ammomult2, tspw_ammomult3;
	property ReloadMult : tspw_reloadmult1, tspw_reloadmult2, tspw_reloadmult3;
	property SpriteNameBase : tspw_spritename;
	
	int tspw_curclip;
	int tspw_clipsize;
	property ClipSize : tspw_clipsize;
	
	TSP_PlayerPawn_ZSCBase tspw_owner;
	
	int tspw_lastfire;
	bool tspw_canZoom;
	
	string tspw_firstpickupline;
	property FirstPickupLine : tspw_firstpickupline;
	
	Weapon tsp_desiredModSwitch;
	
	action void A_TSP_AnimLayer (int layer, double x, double y, double angle, bool interpolate = true)
	{
		let psprite = invoker.owner.player.GetPSprite(layer);
		
		let sprTex = TexMan.CheckForTexture(String.Format(psprite.Sprite.."%c0", 65+psprite.frame));
		Vector2 sprOffset = TexMan.GetScaledOffset(sprTex);// - (0, 32);
		Vector2 sprSize = TexMan.GetScaledSize(sprTex);
		
		if ( !interpolate )
		{
			psprite.oldx = x;
			psprite.oldy = y;
		}
		
		psprite.bPivotPercent = false;
		//psprite.bAddWeapon = true;
		//psprite.bAddBob = true;
		
		Vector2 screenCenter = (160, 0);// - 32);
		
		psprite.pivot = sprOffset + screenCenter;
		//psprite.pivot = screenCenter + (sprOffset.x, sprOffset.y);//(160, 100 - 32) + (-sprOffset.x, sprOffset.y);//offset;
		//psprite.x = x;
		psprite.x = x;
		psprite.y = y;
		//psprite.y = y;//layer == PSP_WEAPON ? 32+y : y;
		psprite.rotation = angle;
	}
	
	//Inventory tspw_nextmod; Inventory tspw_prevmod;
	
	Default
	{
		TSP_Weapon_Core.MaxLevels 3, 3, 3;
		TSP_Weapon_Core.PowerMult 1.5, 1.75, 2.0;
		TSP_Weapon_Core.AmmoMult 1.5, 2.0, 2.5;
		TSP_Weapon_Core.ReloadMult 1.5, 2.0, 2.5;
		TSP_Weapon_Core.ReloadMult 1.5, 2.0, 2.5;
		TSP_Weapon_Core.ModTag "Default";
	}
	
	action void A_TSP_AllowZoom(bool theVerdict)
	{
		invoker.tspw_canZoom = theVerdict;
	}
	
	action void A_TSP_SetSpriteIndex(int layer, name theSprite)
	{
		invoker.owner.player.GetPSprite(layer).Sprite = invoker.GetSpriteIndex(theSprite);
	}
	
	action void A_TSP_SetSpriteFrame(int layer, name theSprite)
	{
		invoker.owner.player.GetPSprite(layer).Sprite = invoker.GetSpriteIndex(invoker.tspw_spritename..theSprite);
	}
	
	int GetClipCapacity()
	{
		int clipcap = tspw_clipsize;
		switch(tspw_ammolevel)
		{
			 case 1: clipcap *= (tspw_ammomult1); break;
			 case 2: clipcap *= (tspw_ammomult2); break;
			 case 3: clipcap *= (tspw_ammomult3); break;
		}
		return clipcap;
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		if(tspw_curclip==0) tspw_curclip = GetClipCapacity();
	}
	
	override void Tick()
	{
		super.Tick();
		
		if(owner!=null)
		{
			tspw_traitmode = (owner.player.cmd.buttons & BT_USER1);
			if(tspw_owner==null)
			{
				tspw_owner = TSP_PlayerPawn_ZSCBase(owner);
			}
			FOVScale = 1.0 - 0.4 * (tspw_altmode && bModFireZooms && tspw_canZoom);
		}
	}
	
	bool canReload()
	{
		return (owner.CountInv(ammo1.GetClass())>0);
	}
	
	action void A_TSP_WeaponRecoil(double x, double y, int type = 0)
	{
		if(invoker.owner!=null)
		{
			if(type==0)
			{
				TSP_PlayerPawn_ZSCBase(invoker.owner).pp_weaponRecoil += (x,y);
			}
			else
			{
				TSP_PlayerPawn_ZSCBase(invoker.owner).pp_weaponRecoilSlow += (x,y);
			}
		}
	}
	
	action void A_TSP_WeaponRecoilDir(int angle, double dist, int type = 0)
	{
		if(invoker.owner!=null)
		{
			if(type==0)
			{
				TSP_PlayerPawn_ZSCBase(invoker.owner).pp_weaponRecoil += (cos(angle)*dist,sin(angle)*dist);
			}
			else
			{
				TSP_PlayerPawn_ZSCBase(invoker.owner).pp_weaponRecoilSlow += (cos(angle)*dist,sin(angle)*dist);
			}
		}
	}
	
	action void A_TSP_WeaponReady(int flags = 0)
	{	
		int oldFlags = flags;
		flags ^= WRF_ALLOWRELOAD;
		if(oldFlags & WRF_ALLOWRELOAD && invoker.tspw_curclip<invoker.GetClipCapacity() && invoker.canReload())
		{
			flags |= WRF_ALLOWRELOAD;
		}
		
		Weapon curWeapon = player.ReadyWeapon;
		bool continueWithReady = true;
		
		if(invoker.bModFireMode)
		{
			switch(invoker.bHoldDownForMod)
			{
				case false:
					if(!invoker.tspw_traitmode && invoker.owner.player.cmd.buttons & BT_ALTATTACK && !(invoker.owner.player.oldbuttons & BT_ALTATTACK))
					{
						invoker.tspw_altmode = !invoker.tspw_altmode;
						string onoff = invoker.tspw_altmode ? "\c[TSPGreen]On" : "\c[TSPRed]Off";
						A_PlaySound(invoker.tspw_altmode ? "weapon/mod/on" : "weapon/mod/off", CHAN_5);
						TSP_PlayerPawn_ZSCBase(invoker.owner).notifyMessage(invoker.tspw_altname.." "..onoff);
						if(invoker.tspw_altmode)
						{
							if(curWeapon.FindState("Switch")) player.SetPSprite(PSP_WEAPON,curWeapon.FindState("Switch"));
						}
						else
						{
							if(curWeapon.FindState("ModSwitch")) player.SetPSprite(PSP_WEAPON,curWeapon.FindState("ModSwitch"));
						}
					}
					break;
				case true:
					if(!invoker.tspw_traitmode && invoker.owner.player.cmd.buttons & BT_ALTATTACK)
					{
						if(!invoker.tspw_altmode)
						{
							if(curWeapon.FindState("Switch")) player.SetPSprite(PSP_WEAPON,curWeapon.FindState("Switch"));
							A_PlaySound("weapon/mod/on", CHAN_5);
							/*string onoff = "\c[TSPGreen]On";
							TSP_PlayerPawn_ZSCBase(invoker.owner).notifyMessage(invoker.tspw_altname.." "..onoff);*/
						}
						invoker.tspw_altmode = true;
					}
					else
					{
						if(invoker.tspw_altmode)
						{
							if(curWeapon.FindState("ModSwitch")) player.SetPSprite(PSP_WEAPON,curWeapon.FindState("ModSwitch"));
							A_PlaySound("weapon/mod/off", CHAN_5);
							/*string onoff = "\c[TSPRed]Off";
							TSP_PlayerPawn_ZSCBase(invoker.owner).notifyMessage(invoker.tspw_altname.." "..onoff);*/
						}
						invoker.tspw_altmode = false;
					}
					break;
			}
		}
		
		/*if(!invoker.tspw_traitmode && invoker.bModFireMode && invoker.owner.player.cmd.buttons & BT_ALTATTACK && !(invoker.owner.player.oldbuttons & BT_ALTATTACK))
		{
			invoker.tspw_altmode = !invoker.tspw_altmode;
			string onoff = invoker.tspw_altmode ? "\c[TSPGreen]On" : "\c[TSPRed]Off";
			A_PlaySound(invoker.tspw_altmode ? "weapon/mod/on" : "weapon/mod/off", CHAN_5);
			TSP_PlayerPawn_ZSCBase(invoker.owner).notifyMessage(invoker.tspw_altname.." "..onoff);
		}*/
		if(continueWithReady)
		{
			//A_WeaponReady(flags);
			if(invoker.bModFireMode && !invoker.tspw_traitmode)
			{
				A_WeaponReady(flags|WRF_NOSECONDARY);
			}
			else
			{
				A_WeaponReady(flags);
			}
		}
	}
	
	action state A_TSP_GotoReadyState()
	{
		return invoker.GetReadyState();
	}
	
	action state A_TSP_JumpIfClipEmpty(StateLabel state)
	{
		if(invoker.tspw_curclip==0)
		{
			return resolveState(state);
		}
		return resolveState(null);
	}
	
	action state A_TSP_JumpIfClipLower(int lower,StateLabel state)
	{
		if(invoker.tspw_curclip<lower)
		{
			return resolveState(state);
		}
		return resolveState(null);
	}
	
	action state A_TSP_CheckReload()
	{
		if(invoker.tspw_altmode && invoker.tspw_curclip<invoker.ammouse2)
		{
			if(invoker.owner.CountInv(invoker.ammo1.GetClass())>0)
			{
				return resolveState("Reload");
			}
		}
		else if (invoker.tspw_curclip<invoker.ammouse1)
		{
			if(invoker.owner.CountInv(invoker.ammo1.GetClass())>0)
			{
				return resolveState("Reload");
			}
		}
		return resolveState(null);
	}
	
	action void A_TSP_ReloadAmmo(int amt = 0)
	{
		if(amt<1)
		{
			while(invoker.tspw_curclip<invoker.GetClipCapacity() && invoker.canReload())
			{
				invoker.tspw_curclip++;
				invoker.owner.TakeInventory(invoker.ammo1.GetClass(),1);
			}
		}
		else
		{
			invoker.tspw_curclip += amt;
			invoker.owner.TakeInventory(invoker.ammo1.GetClass(),1);
		}
	}
	
	action state A_TSP_JumpIfModInactive(StateLabel state)
	{
		if(!invoker.tspw_altmode)
		{
			return resolveState(state);
		}
		return resolveState(null);
	}
	
	action void A_TSP_ReloadSpeed(int speedy = 1)
	{
		switch(invoker.tspw_reloadlevel)
		{
			 case 1: speedy /= (invoker.tspw_reloadmult1); break;
			 case 2: speedy /= (invoker.tspw_reloadmult2); break;
			 case 3: speedy /= (invoker.tspw_reloadmult3); break;
		}
		
		A_SetTics(speedy);
	}
	
	action void A_TSP_ReloadMult()
	{
		let psprite = invoker.owner.player.psprites;
		
		int add;
		
		switch(invoker.tspw_reloadlevel)
		{
			 case 0: add = 15; break;
			 case 1: add = 10; break;
			 case 2: add = 5; break;
			 case 3: add = 0; break;
		}
		
		while(psprite)
		{
			if( psprite != null )
			{
				psprite.Tics += add;
				psprite = psprite.Next;
			}
		}
	}
		
	//==========================================================================
	//
	// A_TSP_FireBullets()
	//
	//==========================================================================
	
		action void A_TSP_FireBullets(double spread_xy, double spread_z, int numbullets, int damageperbullet, class<Actor> pufftype = "TSP_BulletPuff", int flags = 1, double range = 0, class<Actor> missile = "TSP_HitscanTracer", double Spawnheight = 0, double Spawnofs_xy = 0)
		{
			int fbDamage = damageperbullet;
			switch(invoker.tspw_powerlevel)
			{
				 case 1: fbDamage *= (invoker.tspw_powermult1); break;
				 case 2: fbDamage *= (invoker.tspw_powermult2); break;
				 case 3: fbDamage *= (invoker.tspw_powermult3); break;
			}
			double totalDamage = damageperbullet*abs(numbullets);
			if(totalDamage<=0 && missile!=null)
			{
				totalDamage = GetDefaultByType(missile).damage*numbullets;
			}
			//Console.Printf("\ccLevel "..invoker.tspw_powerlevel..": \c-"..fbDamage);
			/*if(invoker.tspw_clipsize>0 && invoker.tspw_curclip > 0)
			{
				invoker.tspw_curclip--;
			}*/
			A_FireBullets(spread_xy,spread_z,numbullets,fbDamage,pufftype,(flags & ~FBF_USEAMMO),range,missile,Spawnheight,Spawnofs_xy);
			TSP_PlayerPawn_ZSCBase(invoker.owner).pp_punchWarp += totalDamage/10.0;
		}
		
		action void A_TSP_TakeClip(int amt)
		{
			if(tsp_unlimitedclip) return;
			while(amt>0 && invoker.tspw_curclip > 0)
			{
				invoker.tspw_curclip--;
				amt--;
			}
		}

	States
	{
		WaitForModSwitch:
			"----" A 1
			{
				let pOwner = TSP_PlayerPawn_ZSCBase(invoker.owner);
				if(pOwner.pp_moddelay>0)
				{
					pOwner.pp_moddelay--;
				}
				else
				{
					let oldWeapon = invoker.owner.player.ReadyWeapon;
					//Console.Printf("Switching to "..invoker.owner.player.PendingWeapon.GetTag());
					player.mo.BringUpWeapon();
					//Console.Printf("Switched to "..invoker.owner.player.ReadyWeapon.GetTag());
					if(oldWeapon!=null && oldWeapon!=player.ReadyWeapon)
					{
						player.mo.A_TakeInventory(oldWeapon.GetClass(),1);
					}
				}
			}
			Loop;
	}
}