Class TSP_ThinkerFreezer : Thinker
{
	int timeleft;
	
	override void PostBeginPlay(void)
	{
		level.frozen = true;
	}
	
	override void Tick(void)
	{
		if(timeleft>0)
		{
			timeleft--;
		}
		else
		{
			level.frozen = false;
			Destroy();
		}

		Super.Tick();
	}
}

Class TSP_MagFX : Actor
{
	Default
	{
		+NOINTERACTION
		+BRIGHT
		RenderStyle "Add";
		Translation "0:255=%[0.00,0.00,0.00]:[0.35,2.00,0.48]";
	}
	
	override void Tick()
	{
		super.Tick();
		
		if(target!=null)
		{
			SetOrigin(target.pos+(0,0,target.height/2),true);
		}
		else
		{
			Destroy();
		}
	}
	
	States
	{
		Spawn:
			MFX0 ABCD 2;
			Loop;
	}
}

Class TSP_EnemyHandler_IsSupered : Inventory
{
	Default
	{
		Inventory.MaxAmount 1000;
	}
}

Class TSP_EnemyHandler_OnHit : Thinker
{
	Actor owner;
	
	double oldZ;
	
	int superFreeze;
	
	Actor fx;
	
	override void PostBeginPlay()
	{
		if(superFreeze>0)
		{
			fx = Actor.Spawn("TSP_MagFX",owner.pos);
			fx.target = owner;
			owner.GiveInventory("TSP_EnemyHandler_IsSupered",superFreeze);
		}
	}
	
	override void Tick(void)
	{
		if(level.frozen) return;
		
		if(owner.health<1)
		{
			owner.bNoGravity = false;
			if(fx)
			{
				fx.Destroy();
			}
			Destroy();
			return;
		}
		
		if(owner.CountInv("TSP_EnemyHandler_IsSupered")>0)
		{
			owner.bNoGravity = true;
			owner.vel.x *= 0.85;
			owner.vel.y *= 0.85;
			owner.vel.z *= 0.85;
			owner.TakeInventory("TSP_EnemyHandler_IsSupered",1);
		}
		else
		{
			owner.bNoGravity = false;
			if(fx) fx.Destroy();
			if(owner.vel.z==oldZ)
			{
				owner.SetStateLabel("See");
				Destroy();
				return;
			}
		}
		
		oldZ = owner.vel.z;

		Super.Tick();
	}
}

Class TSP_Weapon_Core : DoomWeapon
{
	enum EMeleeFlags
	{
		TSPM_SUPERFREEZE = 1,
	};

	int tspw_powerlevel;
	int tspw_maxpowerlevel;
	int tspw_ammolevel;
	int tspw_maxammolevel;
	int tspw_reloadlevel;
	int tspw_maxreloadlevel;
	
	double tspw_powermult1, tspw_powermult2, tspw_powermult3;
	
	Property MaxLevels : tspw_maxpowerlevel, tspw_maxammolevel, tspw_maxreloadlevel;
	Property PowerMult : tspw_powermult1, tspw_powermult2, tspw_powermult3;
	
	Default
	{
		TSP_Weapon_Core.MaxLevels 3, 3, 3;
		TSP_Weapon_Core.PowerMult 1.5, 1.75, 2.0;
	}
	
	
		action void A_TSP_FireBullets(double spread_xy, double spread_z, int numbullets, int damageperbullet, class<Actor> pufftype = "BulletPuff", int flags = 1, double range = 0, class<Actor> missile = null, double Spawnheight = 32, double Spawnofs_xy = 0)
		{
			int fbDamage = damageperbullet;
			switch(invoker.tspw_powerlevel)
			{
				 case 1: fbDamage *= (invoker.tspw_powermult1); break;
				 case 2: fbDamage *= (invoker.tspw_powermult2); break;
				 case 3: fbDamage *= (invoker.tspw_powermult3); break;
			}
			Console.Printf("\ccLevel "..invoker.tspw_powerlevel..": \c-"..fbDamage);
			A_FireBullets(spread_xy,spread_z,numbullets,fbDamage,pufftype,flags,range,missile,spawnheight,spawnofs_xy);
		}
		
	//==========================================================================
	//
	// A_TSP_Melee(damage, range, puff, thrustHorz, thrustVert, thrustUp, angle)
	//
	//==========================================================================
	
		action void A_TSP_Melee(int mDamage, int mRange = 72, string mPuff = "BasicMeleePuff", double mThrustHorz = 0, double mThrustVert = 0, double mThrustUp = 0, int mAngle = 45, int mPitch = 45, int flags = 0)
		{
			bool hasHit = false;
			//A_FireBullets(0,0,1,0,"TQB_Puff",0,75);
			ThinkerIterator MonsterFinder = ThinkerIterator.Create("Actor");
			
			Actor mo;
			
			int mMaxHealth = 0;
			
			Class<Actor > epicPuffy = mPuff;
			string epicPuffy_sound = GetDefaultByType(epicPuffy).seeSound;
			
			while (mo = Actor(MonsterFinder.Next()))
			{
				if(mo!=invoker.owner && (invoker.owner.Distance3D(mo)-mo.radius<mRange) && mo.Health>0
				&& mo.bShootable && abs(DeltaAngle(AngleTo(mo),self.angle))<mAngle)
				{
					int damageamount = mDamage;
					int myMaxHealth = mo.GetSpawnHealth();
					double stuntime;
					// zombieman stun longer
					// baron stun shorter
					stuntime = 24*(40.0/myMaxHealth);
					stuntime = max(4,stuntime);
					
					if(mThrustUp>0&&mo.health>0&&mo.bIsMonster)
					{
						stuntime = -1;
						TSP_EnemyHandler_OnHit handlerThing = TSP_EnemyHandler_OnHit(new("TSP_EnemyHandler_OnHit"));
						if(flags & TSPM_SUPERFREEZE)
						{
							handlerThing.superfreeze = 35*5;
						}
						handlerThing.owner = mo;
						mo.A_PlaySound(mo.PainSound,CHAN_VOICE);
					}
					
					double fugSin = sin(angle);
					double fugCos = cos(angle);
					
					if(!mo.bBoss)
					{
						mo.vel.X = mThrustVert * fugCos + mThrustHorz * fugSin;
						mo.vel.Y = mThrustVert * fugSin - mThrustHorz * fugCos;
						mo.vel.Z = mThrustUp;
					}
					
					int funnyDamage = mo.DamageMobj(invoker.owner,invoker.owner,damageamount,'Melee');
					//mo.A_Quake(2,4,0,750);
					if(mo.resolveState("Pain")!=null&&mo.Health>0)
					{
						mo.SetStateLabel("Pain");
						mo.A_SetTics(stuntime);
					}
					if(!mo.bNoBlood)
					{
						for(int i = 0;i<3;i++)
						{
							Actor blood = mo.Spawn("Blood",mo.pos+(0,0,mo.Height/2));
							blood.vel = (frandom(-2,2),frandom(-2,2),frandom(2,6));
						}
					}
					mo.A_PlaySound(epicPuffy_sound,CHAN_BODY);
					
					/*if(myMaxHealth > mMaxHealth)
					{
						mMaxHealth = mo.GetSpawnHealth();
					}*/
					mMaxHealth += mo.GetSpawnHealth();
					hashit=true;
				}
			}
			if(hashit)
			{
				//A_PlaySound("flesh/hit",CHAN_WEAPON);
				SoundAlert(invoker.owner);
				A_SetTics(max(2,mMaxHealth/300));
				TSP_ThinkerFreezer freeza = new("TSP_ThinkerFreezer");
				freeza.timeleft = max(2,mMaxHealth/300);
			}
			else
			{
				A_FireBullets(0,0,1,0,mPuff,0,mRange);
			}
		}
	
	//==========================================================================
	//
	// A_TSP_Grapple()
	//
	//==========================================================================
	
		action void A_TSP_Grapple(int range = 256)
		{
			ThinkerIterator MonsterFinder = ThinkerIterator.Create("Actor");
			
			Actor mo;
			
			while (mo = Actor(MonsterFinder.Next()))
			{
				if(mo!=invoker.owner && (invoker.owner.Distance3D(mo)-mo.radius<range) && mo.Health>0
				&& mo.bShootable && abs(DeltaAngle(AngleTo(mo),self.angle))<45)
				{
					int myMaxHealth = mo.GetSpawnHealth();
					double stuntime;
					// zombieman stun longer
					// baron stun shorter
					stuntime = 24*(40.0/myMaxHealth);
					stuntime = max(4,stuntime);
					
					bool isSupered = mo.CountInv("TSP_EnemyHandler_IsSupered");
					if(isSupered)
					{
						mo.TakeInventory("TSP_EnemyHandler_IsSupered",1000);
						mo.DamageMobj(invoker.owner,invoker.owner,200,'Melee',DMG_THRUSTLESS);
						mo.vel = (0,0,-32);
					}
					else
					{
						mo.Vel3DFromAngle(32, mo.AngleTo(self), 0);
					}
					
					if(mo.resolveState("Pain")!=null&&mo.Health>0)
					{
						mo.SetStateLabel("Pain");
						mo.A_SetTics(stuntime);
					}
				}
			}
		}
		
		action void A_TSP_ThrustForwardsButLikeVeryForwards (double speed = 16)
		{
			invoker.owner.Vel3DFromAngle(speed, invoker.owner.angle, invoker.owner.pitch-15);
		}
}