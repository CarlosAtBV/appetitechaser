Class TSP_ThinkerFreezer : Thinker
{
	int timeleft;
	
	override void PostBeginPlay(void)
	{
		level.frozen = true;
	}
	
	override void Tick(void)
	{
		if(timeleft>0)
		{
			timeleft--;
		}
		else
		{
			level.frozen = false;
			Destroy();
		}

		Super.Tick();
	}
}

Class TSP_MagSmokeFX : Actor
{
	Default
	{
		+NOINTERACTION
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			SMOK A 0;
			SMOK A 0 A_SetScale(randompick(-1,1),randompick(-1,1));
			SMOK ABCDEFGHIJKLMNOPQ 1;
			Stop;
	}
}

Class TSP_MagFX : Actor
{
	Default
	{
		+NOINTERACTION
		+BRIGHT
		RenderStyle "Add";
		Translation "0:255=%[0.00,0.00,0.00]:[0.35,2.00,0.48]";
	}
	
	override void Tick()
	{
		super.Tick();
		
		if(target!=null)
		{
			SetOrigin(target.pos+(0,0,target.height/2),true);
		}
		else
		{
			Destroy();
		}
	}
	
	States
	{
		Spawn:
			MFX0 ABCD 2;
			Loop;
	}
}

Class TSP_EnemyHandler_IsSupered : Inventory
{
	Default
	{
		Inventory.MaxAmount 1000;
	}
}

Class TSP_EnemyHandler_SlamDunk : Thinker
{
	Actor inflictor;
	Actor owner;
	double oldZ;
	
	override void PostBeginPlay()
	{
		oldZ = owner.pos.z+1;
	}
	
	override void Tick()
	{
		if(oldZ==owner.pos.z)
		{
			if(!owner.bNoPain&&owner.resolveState("Pain")!=null&&owner.Health>0)
			{
				owner.SetStateLabel("Pain");
				owner.A_SetTics(12);
			}
			owner.TakeInventory("TSP_EnemyHandler_IsSupered",1000);
			owner.DamageMobj(inflictor,inflictor,200,'Melee',DMG_THRUSTLESS);
			if(owner!=null)
			{
				owner.A_PlaySound("mag/fissure/hit",CHAN_5);
				owner.A_QuakeEx(1,1,1,4,0,192);
				owner.A_Explode(128,128,0,false,0,0,0,"","MagSlam");
				Destroy();
			}
		}
		
		oldZ = owner.pos.z;
	}
}

Class TSP_EnemyHandler_OnHit : Thinker
{
	Actor owner;
	
	double oldZ;
	
	int superFreeze;
	
	Actor fx;
	
	override void PostBeginPlay()
	{
		if(superFreeze>0)
		{
			fx = Actor.Spawn("TSP_MagFX",owner.pos);
			fx.target = owner;
			owner.GiveInventory("TSP_EnemyHandler_IsSupered",superFreeze);
		}
	}
	
	override void Tick(void)
	{
		if(level.frozen) return;
		
		if(owner==null)
		{
			if(fx)
			{
				fx.Destroy();
			}
			Destroy();
			return;
		}
		
		if(owner.health<1)
		{
			if(owner!=null)
			{
				let defaultFucker = GetDefaultByType(owner.GetClass());
				owner.bNoGravity = defaultFucker.bNoGravity;
			}
			if(fx)
			{
				fx.Destroy();
			}
			Destroy();
			return;
		}
		
		if(owner.CountInv("TSP_EnemyHandler_IsSupered")>0)
		{
			owner.bNoGravity = true;
			owner.bNoPain = true;
			owner.vel.x *= 0.85;
			owner.vel.y *= 0.85;
			if(owner.vel.z>0)
			{
				owner.vel.z *= 0.85;
			}
			owner.TakeInventory("TSP_EnemyHandler_IsSupered",1);
		}
		else
		{
			owner.bNoPain = false;
			if(fx) fx.Destroy();
			if(owner.vel.z==oldZ)
			{
				let defaultFucker = GetDefaultByType(owner.GetClass());
				owner.bNoGravity = defaultFucker.bNoGravity;
				owner.SetStateLabel("See");
				Destroy();
				return;
			}
		}
		
		oldZ = owner.vel.z;

		Super.Tick();
	}
}

Class TSP_Weapon_Core : DoomWeapon
{
	bool tspw_traitmode;
	
	bool tspw_altmode;
	string tspw_altname;
	
	int tspw_weaponflags;
	flagdef ModFireMode: tspw_weaponflags, 0;
	property ModTag : tspw_altname;

	int tspw_powerlevel;
	int tspw_maxpowerlevel;
	int tspw_ammolevel;
	int tspw_maxammolevel;
	int tspw_reloadlevel;
	int tspw_maxreloadlevel;
	
	double tspw_powermult1, tspw_powermult2, tspw_powermult3;
	double tspw_ammomult1, tspw_ammomult2, tspw_ammomult3;
	double tspw_reloadmult1, tspw_reloadmult2, tspw_reloadmult3;
	
	property MaxLevels : tspw_maxpowerlevel, tspw_maxammolevel, tspw_maxreloadlevel;
	property PowerMult : tspw_powermult1, tspw_powermult2, tspw_powermult3;
	property AmmoMult : tspw_ammomult1, tspw_ammomult2, tspw_ammomult3;
	property ReloadMult : tspw_reloadmult1, tspw_reloadmult2, tspw_reloadmult3;
	
	int tspw_curclip;
	int tspw_clipsize;
	property ClipSize : tspw_clipsize;
	
	TSP_PlayerPawn_ZSCBase tspw_owner;
	
	int tspw_lastfire;
	
	Default
	{
		TSP_Weapon_Core.MaxLevels 3, 3, 3;
		TSP_Weapon_Core.PowerMult 1.5, 1.75, 2.0;
		TSP_Weapon_Core.AmmoMult 1.5, 2.0, 2.5;
		TSP_Weapon_Core.ReloadMult 1.5, 2.0, 2.5;
		+INVENTORY.UNTOSSABLE
	}
	
	int GetClipCapacity()
	{
		int clipcap = tspw_clipsize;
		switch(tspw_ammolevel)
		{
			 case 1: clipcap *= (tspw_ammomult1); break;
			 case 2: clipcap *= (tspw_ammomult2); break;
			 case 3: clipcap *= (tspw_ammomult3); break;
		}
		return clipcap;
	}
	
	override State GetAtkState (bool hold)
	{
		State s = null;
		tspw_lastfire = 0;
		if(tspw_traitmode)
		{
			if (hold) s = FindState('TraitHold');
			if (s == null) s = FindState('TraitFire');
		}
		else if(tspw_altmode)
		{
			if (hold) s = FindState('ModHold');
			if (s == null) s = FindState('ModFire');
		}
		else
		{
			if (hold) s = FindState('Hold');
			if (s == null) s = FindState('Fire');
		}
		return s;
	}
	override State GetAltAtkState (bool hold)
	{
		State s = null;
		tspw_lastfire = 1;
		if(tspw_traitmode)
		{
			if (hold) s = FindState('TraitAltHold');
			if (s == null) s = FindState('TraitAltFire');
		}
		else if(!bModFireMode)
		{
			if (hold) s = FindState('AltHold');
			if (s == null) s = FindState('AltFire');
		}
		return s;
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		tspw_curclip = GetClipCapacity();
	}
	
	override void Tick()
	{
		super.Tick();
		
		if(owner!=null)
		{
			tspw_traitmode = (owner.player.cmd.buttons & BT_USER1);
			if(tspw_owner==null)
			{
				tspw_owner = TSP_PlayerPawn_ZSCBase(owner);
			}
		}
	}
	
	bool canReload()
	{
		return (owner.CountInv(ammo1.GetClass())>0);
	}
	
	action void A_TSP_WeaponReady(int flags = 0)
	{	
		int oldFlags = flags;
		flags ^= WRF_ALLOWRELOAD;
		if(oldFlags & WRF_ALLOWRELOAD && invoker.tspw_curclip<invoker.GetClipCapacity() && invoker.canReload())
		{
			flags |= WRF_ALLOWRELOAD;
		}
		
		if(!invoker.tspw_traitmode && invoker.bModFireMode && invoker.owner.player.cmd.buttons & BT_ALTATTACK && !(invoker.owner.player.oldbuttons & BT_ALTATTACK))
		{
			invoker.tspw_altmode = !invoker.tspw_altmode;
			string onoff = invoker.tspw_altmode ? "\c[TSPGreen]On" : "\c[TSPRed]Off";
			A_PlaySound(invoker.tspw_altmode ? "weapon/mod/on" : "weapon/mod/off", CHAN_5);
			TSP_PlayerPawn_ZSCBase(invoker.owner).notifyMessage(invoker.tspw_altname.." "..onoff);
		}
		
		A_WeaponReady(flags);
	}
	
	action state A_TSP_JumpIfClipEmpty(StateLabel state)
	{
		if(invoker.tspw_curclip==0)
		{
			return resolveState(state);
		}
		return resolveState(null);
	}
	
	action state A_TSP_JumpIfClipLower(int lower,StateLabel state)
	{
		if(invoker.tspw_curclip<lower)
		{
			return resolveState(state);
		}
		return resolveState(null);
	}
	
	action state A_TSP_CheckReload()
	{
		if(invoker.tspw_altmode && invoker.tspw_curclip<invoker.ammouse2)
		{
			if(invoker.owner.CountInv(invoker.ammo1.GetClass())>0)
			{
				return resolveState("Reload");
			}
		}
		else if (invoker.tspw_curclip<invoker.ammouse1)
		{
			if(invoker.owner.CountInv(invoker.ammo1.GetClass())>0)
			{
				return resolveState("Reload");
			}
		}
		return resolveState(null);
	}
	
	action void A_TSP_ReloadAmmo(int amt = 0)
	{
		if(amt<1)
		{
			while(invoker.tspw_curclip<invoker.GetClipCapacity() && invoker.canReload())
			{
				invoker.tspw_curclip++;
				invoker.owner.TakeInventory(invoker.ammo1.GetClass(),1);
			}
		}
		else
		{
			invoker.tspw_curclip += amt;
			invoker.owner.TakeInventory(invoker.ammo1.GetClass(),1);
		}
	}
	
	action void A_TSP_ReloadSpeed(int speedy = 1)
	{
		switch(invoker.tspw_reloadlevel)
		{
			 case 1: speedy /= (invoker.tspw_reloadmult1); break;
			 case 2: speedy /= (invoker.tspw_reloadmult2); break;
			 case 3: speedy /= (invoker.tspw_reloadmult3); break;
		}
		A_SetTics(speedy);
	}
		
	//==========================================================================
	//
	// A_TSP_FireBullets()
	//
	//==========================================================================
	
		action void A_TSP_FireBullets(double spread_xy, double spread_z, int numbullets, int damageperbullet, class<Actor> pufftype = "BulletPuff", int flags = 1, double range = 0, class<Actor> missile = null, double Spawnheight = 32, double Spawnofs_xy = 0)
		{
			int fbDamage = damageperbullet;
			switch(invoker.tspw_powerlevel)
			{
				 case 1: fbDamage *= (invoker.tspw_powermult1); break;
				 case 2: fbDamage *= (invoker.tspw_powermult2); break;
				 case 3: fbDamage *= (invoker.tspw_powermult3); break;
			}
			//Console.Printf("\ccLevel "..invoker.tspw_powerlevel..": \c-"..fbDamage);
			/*if(invoker.tspw_clipsize>0 && invoker.tspw_curclip > 0)
			{
				invoker.tspw_curclip--;
			}*/
			A_FireBullets(spread_xy,spread_z,numbullets,fbDamage,pufftype,(flags^FBF_USEAMMO),range,missile,spawnheight,spawnofs_xy);
		}
		
		action void A_TSP_TakeClip(int amt)
		{
			while(amt>0 && invoker.tspw_curclip > 0)
			{
				invoker.tspw_curclip--;
				amt--;
			}
		}
}