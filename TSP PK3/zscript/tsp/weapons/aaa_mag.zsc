Extend Class TSP_Weapon_Core
{
	enum EMeleeFlags
	{
		TSPM_SUPERFREEZE = 1,
	};
	
	int tspw_comboHold;
	
	action state A_TSP_HoldForCombo(StateLabel state,StateLabel state2,StateLabel state3,StateLabel state4)
	{
		if(invoker.owner.player.cmd.buttons & BT_ATTACK)
		{
			invoker.tspw_comboHold++;
			if(invoker.tspw_comboHold>6)
			{
				invoker.tspw_comboHold = 0;
				return resolveState(state2);
			}
		}
		else if(invoker.owner.player.cmd.buttons & BT_ALTATTACK)
		{
			invoker.tspw_comboHold++;
			if(invoker.tspw_comboHold>6)
			{
				invoker.tspw_comboHold = 0;
				return resolveState(state4);
			}
		}
		else if (invoker.owner.player.oldbuttons & BT_ATTACK)
		{
			invoker.tspw_comboHold = 0;
			return resolveState(state);
		}
		else if (invoker.owner.player.oldbuttons & BT_ALTATTACK)
		{
			invoker.tspw_comboHold = 0;
			return resolveState(state3);
		}
		return resolveState(null);
	}
	
	action state A_TSP_JumpIfHolding(StateLabel state)
	{
		//Console.Printf((invoker.owner.player.cmd.buttons & BT_ATTACK).." ~ "..(invoker.owner.player.oldbuttons & BT_ATTACK));
		if(invoker.tspw_comboHold>4)//if(invoker.owner.player.cmd.buttons & BT_ATTACK && invoker.owner.player.oldbuttons & BT_ATTACK)
		{
			return resolveState(state);
		}
		return resolveState(null);
	}
	
	action state A_TSP_JumpIfInAir(StateLabel state)
	{
		double oldVelZ = TSP_PlayerPawn_ZSCBase(invoker.owner).oldVelZ;
		double velZ = TSP_PlayerPawn_ZSCBase(invoker.owner).vel.z;
		if(invoker.owner.vel.z!=oldVelZ)
		{
			return resolveState(state);
		}
		return resolveState(null);
	}
	

	
	//==========================================================================
	//
	// A_TSP_Grapple()
	//
	//==========================================================================
	
		action void A_TSP_Grapple(int range = 512)
		{
			ThinkerIterator MonsterFinder = ThinkerIterator.Create("Actor");
			
			Actor mo;
			
			while (mo = Actor(MonsterFinder.Next()))
			{
				if(mo!=invoker.owner && (invoker.owner.Distance3D(mo)-mo.radius<range) && mo.Health>0
				&& mo.bShootable && !mo.bDontThrust && CheckSight(mo) && abs(DeltaAngle(AngleTo(mo),self.angle))<45)
				{
					int myMaxHealth = mo.GetSpawnHealth();
					double stuntime;
					// zombieman stun longer
					// baron stun shorter
					stuntime = 24*(40.0/myMaxHealth);
					stuntime = max(4,stuntime);
					
					if ( mo.FindInventory("TSP_Mel_StasisHandler") )
					{
						mo.TakeInventory("TSP_Mel_StasisHandler", 1);
						TSP_Mel_SlamHandler slamdunk = TSP_Mel_SlamHandler(mo.GiveInventoryType("TSP_Mel_SlamHandler"));
						slamdunk.inflictor = invoker.owner;
						mo.A_PlaySound("mag/fissure/start",CHAN_5);
					}
					else
					{
						mo.Vel3DFromAngle(32, mo.AngleTo(self), 0);
					}
					
					if(mo.resolveState("Pain")!=null&&mo.Health>0)
					{
						mo.SetStateLabel("Pain");
						mo.A_SetTics(stuntime);
					}
				}
			}
		}
	
	//==========================================================================
	//
	// A_TSP_Sling()
	//
	//==========================================================================
	
		action void A_TSP_StoreSlingTarget()
		{
			//TSP_PlayerPawn_ZSCBase(invoker.owner).pp_slingStore = TSP_PlayerPawn_ZSCBase(invoker.owner).theZoop;
		}
	
		action void A_TSP_Sling(int range = 512)
		{
			Actor theZoop = TSP_PlayerPawn_ZSCBase(invoker.owner).pp_slingStore;
			TSP_PlayerPawn_ZSCBase(invoker.owner).pp_slingStore = null;
			if(theZoop!=null)
			{
				TSP_PlayerPawn_ZSCBase(invoker.owner).pp_slingTarget = theZoop;
				
				double mineAngle = invoker.owner.AngleTo(theZoop);
				//LineTrace(AngleTo(mo), 512, -atan2(pos.z+24 - mo.pos.z,Distance2D(mo)), 0, 24.0, 0.0, 0.0, traceStuff);
				double minePitch = atan2(invoker.owner.pos.z - theZoop.pos.z,invoker.owner.Distance2D(theZoop));
				invoker.owner.Vel3DFromAngle(invoker.owner.Distance3D(theZoop)/3, mineAngle, minePitch);
				//int thicc = theZoop.radius+invoker.owner.radius;
				//invoker.owner.SetOrigin(theZoop.pos+(cos(mineAngle)*thicc,sin(mineAngle)*thicc,0),true);
			}
		}
		
		action void A_TSP_ThrustForwardsButLikeVeryForwards (double speed = 16)
		{
			invoker.owner.Vel3DFromAngle(speed, invoker.owner.angle, invoker.owner.pitch-15);
		}
}