Extend Class TSP_Weapon_Core
{	
	const HITLAG_BASE = 2;//1;
	const HITLAG_MULT = 0;//0.2;
	//==========================================================================
	//
	// A_TSP_Melee(damage, range, puff, thrustHorz, thrustVert, thrustUp, angle)
	//
	//==========================================================================
	
		action void A_TSP_Melee(int mDamage, int mRange = 72, string mPuff = "BasicMeleePuff", double mThrustHorz = 0, double mThrustVert = 0, double mThrustUp = 0, int mAngle = 45, int mPitch = 45, int flags = 0)
		{
			bool hasHit = false;
			
			int baseAddon = HITLAG_BASE*floor(mDamage/20);
			int baseHitlag = HITLAG_BASE+baseAddon;
			//A_FireBullets(0,0,1,0,"TQB_Puff",0,75);
			//ThinkerIterator MonsterFinder = ThinkerIterator.Create("Actor");
			BlockThingsIterator MonsterFinder = BlockThingsIterator.Create(self,512,0);
			
			Actor mo;
			
			int mMaxHealth = 0;
			
			Class<Actor > bulletPuffToSpawn = mPuff;
			string bulletPuffToSpawn_sound = GetDefaultByType(bulletPuffToSpawn).seeSound;
			
			while (MonsterFinder.Next())
			{
				mo = Actor(MonsterFinder.thing);
				if(mo!=invoker.owner && (invoker.owner.Distance3D(mo)-mo.radius<mRange) && mo.Health>0
				&& (mo.bShootable || mo is "TSP_BountyHunters_TimeExtCrystal") && !mo.bNoDamage && CheckSight(mo) && abs(DeltaAngle(AngleTo(mo),self.angle))<mAngle)//s
				{
					Spawn("TSP_HitSpark_Small",mo.pos+(0,0,mo.Height/2));
					
					int damageamount = mDamage;
					int myMaxHealth = mo.GetSpawnHealth();
					double stuntime;
					// zombieman stun longer
					// baron stun shorter
					//stuntime = 24*(40.0/myMaxHealth);
					//stuntime = max(4,stuntime);
					stuntime = baseHitlag;//mDamage * HITLAG_MULT + HITLAG_BASE;
					
					if(!(flags & TSPM_SUPERFREEZE))
					{
						TSP_EnemyHandler_Freezer handlerFreezer = TSP_EnemyHandler_Freezer(new("TSP_EnemyHandler_Freezer"));
						handlerFreezer.owner = mo;
						handlerFreezer.timeleft = stuntime+2;
					}
					
					if(mThrustUp>0&&mo.health>0&&mo.bIsMonster)
					{
						stuntime = -1;
						TSP_EnemyHandler_OnHit handlerThing = TSP_EnemyHandler_OnHit(new("TSP_EnemyHandler_OnHit"));
						if(flags & TSPM_SUPERFREEZE)
						{
							handlerThing.superfreeze = 35*5;
						}
						handlerThing.owner = mo;
						mo.A_PlaySound(mo.PainSound,CHAN_VOICE);
					}
					
					double fugSin = sin(angle);
					double fugCos = cos(angle);
					
					if(!mo.bBoss)
					{
						mo.vel.X = mThrustVert * fugCos + mThrustHorz * fugSin;
						mo.vel.Y = mThrustVert * fugSin - mThrustHorz * fugCos;
						mo.vel.Z = mThrustUp;
					}
					
					int funnyDamage = mo.DamageMobj(invoker.owner,invoker.owner,damageamount,'Melee');
					//mo.A_Quake(2,4,0,750);
					if(!mo.bNoPain&&mo.resolveState("Pain")!=null&&mo.Health>0)
					{
						mo.SetStateLabel("Pain");
						mo.A_SetTics(stuntime); //keep an eye on this conflicting with the freeze code
					}
					if(!mo.bNoBlood)
					{
						for(int i = 0;i<3;i++)
						{
							Actor blood = mo.Spawn("Blood",mo.pos+(0,0,mo.Height/2));
							blood.vel = (frandom(-2,2),frandom(-2,2),frandom(2,6));
						}
					}
					mo.A_PlaySound(bulletPuffToSpawn_sound,CHAN_BODY);
					
					/*if(myMaxHealth > mMaxHealth)
					{
						mMaxHealth = mo.GetSpawnHealth();
					}*/
					mMaxHealth += mo.GetSpawnHealth();
					hashit=true;
				}
				else if (mo!=invoker.owner && mo.bIsMonster && mo.Health>0)
				{
					TSP_EnemyHandler_Freezer handlerFreezer = TSP_EnemyHandler_Freezer(new("TSP_EnemyHandler_Freezer"));
					handlerFreezer.owner = mo;
					handlerFreezer.timeleft = baseHitlag+2;
				}
			}
			if(hashit)
			{
				//A_PlaySound("flesh/hit",CHAN_WEAPON);
				//SoundAlert(invoker.owner);
				A_SetTics(baseHitlag);//mDamage * HITLAG_MULT + HITLAG_BASE);
				//A_SetTics(max(2,mMaxHealth/300));
				TSP_PlayerPawn_ZSCBase(invoker.owner).pp_punchWarp = mDamage/10.0;
				TSP_PlayerPawn_ZSCBase(invoker.owner).pp_hitFreeze = baseHitlag;
				TSP_PlayerPawn_ZSCBase(invoker.owner).pp_hitVel = invoker.owner.vel;
				//invoker.owner.vel = (0,0,0);
				//TSP_ThinkerFreezer freeza = new("TSP_ThinkerFreezer");
				//freeza.timeleft = max(2,mMaxHealth/300)-1;
			}
			else
			{
				A_FireBullets(0,0,1,0,mPuff,0,mRange);
			}
		}
}