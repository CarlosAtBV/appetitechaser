Class TSP_PyAnim_Keyframe
{
	int frame;
	Vector2 pos;
	double angle;
	double scale;
}

Class TSP_PyAnimBrain play
{
	static TSP_PyAnim PA_ParseAnimFile (string findFile)
	{
		int getFile = Wads.CheckNumForFullName(findFile);
		
		if ( getFile == -1 )
		{
			Console.Printf("Could not find "..findFile);
		}
		
		Console.Printf("Yep, found "..findFile);
		string fileString = Wads.ReadLump(getFile);
		TSP_Tokenizer fileTokens = TSP_Tokenizer.TK_Tokenize(fileString);
		
		bool pa_parsingKeyframes = false;
		bool pa_parsingDrivers = false;
		
		TSP_PyAnim curAnim = TSP_PyAnim.Init();
		TSP_PyAnim_Keyframe curKeyframe = null;
		
		for ( int i = 0; i < fileTokens.tokens.Size(); i++ )
		{
			let thisToken = fileTokens.TK_GetToken(i);
			
			if ( thisToken.type == TSPT_String )
			{
				if ( thisToken.value == "keyframes" )
				{
					pa_parsingKeyframes = true;
				}
				else if ( pa_parsingKeyframes )
				{
					if ( thisToken.value == "frame" )
					{
						curKeyframe = new("TSP_PyAnim_Keyframe");
						i += 2;
						curKeyframe.frame = fileTokens.TK_GetToken(i).value.ToInt();
					}
					else if ( thisToken.value == "value" )
					{
						i += 3;
						curKeyframe.pos.x = fileTokens.TK_GetToken(i).value.ToDouble();
						i += 2;
						curKeyframe.pos.y = fileTokens.TK_GetToken(i).value.ToDouble();
						Console.Printf("added frame "..curKeyframe.frame);
						curAnim.keyframes.Push(curKeyframe);
					}
				}
			}
		}
		
		/*for ( int i = 0; i < fileTokens.tokens.Size(); i++ )
		{
			let thisToken = fileTokens.TK_GetToken(i);
			Console.Printf(thisToken.type.." ~ "..thisToken.value);
		}*/
		
		/*Console.Printf("yuh");
		for ( int i = 0; i < curAnim.keyframes.Size(); i++ )
		{
			Console.Printf(curAnim.keyframes[i].frame.." ~ "..curAnim.keyframes[i].pos);
		}*/
		
		return curAnim;
	}
}

Class TSP_PyAnim
{
	int id;
	int tics;
		
	TSP_PyAnim_Keyframe lastKey;
	TSP_PyAnim_Keyframe nextKey;
	int keyDiff, timeDiff;
	
	Array<TSP_PyAnim_Keyframe> keyframes;
	Array<int> psprites;
	
	static TSP_PyAnim Init()
	{
		TSP_PyAnim newAnim = new("TSP_PyAnim");
		newAnim.psprites.Clear();
		newAnim.keyframes.Clear();
		newAnim.tics = -1;
		return newAnim;
	}
	
	void AddPSprite(int id)
	{
		psprites.Push(id);
	}
	
	double ease_inOut_sine(double input)
	{
		return -(cos(180 * input) - 1) / 2.;
	}
	
	double ease_bezier(double input)
	{
		return input * input * (3.0 - 2.0 * input);
	}
	
	void Tick()
	{
		if ( tics >= 0 )
		{
			tics++;
		}
		
		if ( tics >= keyframes[keyframes.Size()-1].frame )
		{
			tics = -1;
			//return false;
		}
		
		if ( tics == -1 )
		{
			return;
		}
		
		lastKey = keyframes[tics];
		nextKey = tics + 1 < keyframes[keyframes.Size()-1].frame ? keyframes[tics+1] : lastKey;
		/*for ( int i = 0; i < keyframes.size(); i++ )
		{
			if ( keyframes[i].frame <= tics )
			{
				lastKey = keyframes[i];
			}
		}*/
		
		/*for ( int i = 0; i < keyframes.size(); i++ )
		{
			if ( keyframes[i].frame > tics )
			{
				nextKey = keyframes[i];
				break;
			}
		}*/
		
		//keyDiff = nextKey.frame - lastKey.frame;
		//timeDiff = tics - lastKey.frame;
		//return true;
	}
	
	void Reset()
	{
		tics = -1;
	}
	
	void StopAnim()
	{
		tics = -1;
	}
	
	void PlayAnim()
	{
		tics = 0;
	}
	
	void AddKeyframe(int frame, double x, double y, double angle = 0, double scale = 1.0)
	{
		TSP_PyAnim_Keyframe newFrame = new("TSP_PyAnim_Keyframe");
		newFrame.frame = frame;
		newFrame.pos = (x, y);
		newFrame.angle = angle;
		newFrame.scale = scale;
		
		keyframes.Push(newFrame);
	}
	
	Vector2 GetPos(double fracTic = 0)
	{
		if ( tics == -1 || !lastKey || !nextKey )
		{
			return(0,0);
		}
		
		double finalDiff = fracTic;//(fracTic + timeDiff) / double(keyDiff);
		
		Vector2 returnPos = lastKey.pos + (nextKey.pos - lastKey.pos) * (finalDiff);
		
		return returnPos;
	}
	
	double GetRot(double fracTic = 0)
	{
		if ( tics == -1 || !lastKey || !nextKey )
		{
			return 0;
		}
		
		double finalDiff = fracTic;//(fracTic + timeDiff) / double(keyDiff);
		
		double returnPos = lastKey.angle + (nextKey.angle - lastKey.angle) * finalDiff;
		
		return returnPos;
	}
	
	/*Vector2 GetPos(double fracTic = 0)
	{
		if ( tics == -1 )
		{
			return(0,0);
		}
		
		TSP_PyAnim_Keyframe last = keyframes[tics > 0 ? tics - 1 : tics];
		
		return last.pos + (keyframes[tics].pos - last.pos) * fracTic;
	}*/
	
	/*double GetRot(double fracTic = 0)
	{
		if ( tics == -1 )
		{
			return 0;
		}
		
		TSP_PyAnim_Keyframe last = keyframes[tics > 0 ? tics - 1 : tics];
		
		return last.angle + (keyframes[tics].angle - last.angle) * fracTic;
	}*/
}