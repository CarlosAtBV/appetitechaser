enum E_TSPTokens
{
	TSPT_Identifier,
	TSPT_Number,
	TSPT_String,
	TSPT_EOF,
	TSPT_Comma,
    TSPT_Minus,
    TSPT_ParenO,
    TSPT_ParenC,
    TSPT_BraceO,
    TSPT_BraceC,
    TSPT_BrackO,
    TSPT_BrackC,
	TSPT_Slash,
	TSPT_Colon,
	TSPT_Semicolon,
    TSPT_Unknown,
}

Class TSP_Token
{
    E_TSPTokens type;
    string value;
}

Class TSP_Tokenizer
{
	string lumpString;
	int currentPos;
	
	Array<TSP_Token> tokens;
	
	static TSP_Tokenizer Create(string input)
    {
        let tok = new("TSP_Tokenizer");
        tok.lumpString = input;
        return tok;
    }
	
	static bool isWhitespace (int p)
	{
        switch(p)
        {
			case 9:
			case 10:
			case 13:
			case 11:
			case 12:
			case 32:
				 return true;
			break;
			default:
				 return false;
			break;
        }
		return false;
	}
	
	static bool isNewline (int p)
	{
        switch(p)
        {
			case 10:
				 return true;
			break;
			default:
				 return false;
			break;
        }
		return false;
	}
	
	static bool IsDigit(int cc)
    {
        //int cc = c.CharCodeAt(0);
        return cc <= 57 && cc >= 48 || cc == 45 || cc == 46;
    }

    static bool IsLetter(int c)
    {
        return IsLower(c) || IsUpper(c);
    }

    static bool IsLetterOrDigit(int c)
    {
        return IsLetter(c) || IsDigit(c);
    }

    static bool IsLower(int cc)
    {
        //int cc = c.CharCodeAt(0);
        return cc <= 122 && cc >= 97;
    }

    static bool IsUpper(int cc)
    {
        //int cc = c.CharCodeAt(0);
        return cc <= 90 && cc >= 65;
    }
	
	static TSP_Tokenizer TK_Tokenize (string toTokenize)
	{
        let newTokenizer = new("TSP_Tokenizer");
		
		newTokenizer.tokens.Clear();
		
		TSP_Token curToken = new("TSP_Token");
		
		int pos = 0;
		
		for ( int i = 0; i < toTokenize.Length(); i++ )
		{
			if ( isWhitespace(toTokenize.ByteAt(i)) )
			{
				continue;
			}
			
			switch(toTokenize.ByteAt(i))
			{
				case 123:
					curToken.type = TSPT_BraceO;
					break;
				case 125:
					curToken.type = TSPT_BraceC;
					break;
				case 44:
					curToken.type = TSPT_Comma;
					break;
				case 58:
					curToken.type = TSPT_Colon;
					break;
				case 91:
					curToken.type = TSPT_BrackO;
					break;
				case 93:
					curToken.type = TSPT_BrackC;
					break;
				case 34:
					curToken.type = TSPT_String;
					i++;
					while ( i < toTokenize.Length() && toTokenize.ByteAt(i) != 34 )
					{
						curToken.value = curToken.value..toTokenize.Mid(i, 1);
						i++;
					}
					break;
				default:
					if ( IsDigit(toTokenize.ByteAt(i)) )
					{
						curToken.type = TSPT_Number;
						while ( IsDigit(toTokenize.ByteAt(i)) && i < toTokenize.Length() )
						{
							curToken.value = curToken.value..toTokenize.Mid(i, 1);
							if ( !IsDigit(toTokenize.ByteAt(i+1)) )
							{
								break;
							}
							i++;
						}
					}
					else
					{
						curToken.type = TSPT_Identifier;
						while ( !isWhitespace(toTokenize.ByteAt(i)) && i < toTokenize.Length() )
						{
							curToken.value = curToken.value..toTokenize.Mid(i, 1);
							i++;
						}
					}
					break;
			}
			
			newTokenizer.tokens.push(curToken);
			curToken = new("TSP_Token");
		}
		
		return newTokenizer;
	}
	
	TSP_Token TK_GetToken(int pos)
	{
		return tokens[pos];
	}
	
	virtual TSP_Token GoThru()
	{
		return null;
		
		/*while( isWhitespace(lumpString.CharCodeAt(currentPos)) && currentPos <= lumpString.Length() )
		{
			currentPos++;
		}
		let tk = new("TSP_Token");
		tk.type = TSPT_Unknown;
		
		if(currentPos>lumpString.Length())
		{
			tk.type = TSPT_EOF;
			//Console.Printf("~ END OF FILE ~");
			return tk;
		}
		//Console.Printf("\ctRead "..lumpString.CharCodeAt(currentPos));
		switch(lumpString.CharCodeAt(currentPos))
		{
			case 123:
				tk.type = TSPT_BraceO;
				tk.value = "{";
				break;
			case 125:
				tk.type = TSPT_BraceC;
				tk.value = "}";
				break;
			case 44:
				tk.type = TSPT_Comma;
				tk.value = ",";
				break;
			case 40: // '('
				tk.type = TSPT_ParenO;
				tk.value = "(";
				break;
			case 41: // ')'
				tk.type = TSPT_ParenC;
				tk.value = ")";
				break;
			case 47: // '/'
				tk.type = TSPT_Slash;
				while(!isNewline(lumpString.CharCodeAt(currentPos))&&currentPos<=lumpString.Length())
				{
					tk.value.AppendFormat("%s", lumpString.CharAt(currentPos));
					currentPos++;
				}
				break;
			case 45: // '-'
				tk.type = TSPT_Minus;
				tk.value = "-";
				break;
			case 59: // '-'
				tk.type = TSPT_Semicolon;
				tk.value = ";";
				break;
			case 34: // '"'
			case 39: // '''
				tk.type = TSPT_String;
				currentPos++;
				while(lumpString.CharCodeAt(currentPos)!=34&&currentPos<=lumpString.Length())
				{
					tk.value.AppendFormat("%s", lumpString.CharAt(currentPos));
					currentPos++;
				}
				break;
			default:
				if(IsLetter(lumpString.CharAt(currentPos)))
				{
					tk.type = TSPT_Identifier;
					while(!isWhitespace(lumpString.CharCodeAt(currentPos))&&lumpString.CharCodeAt(currentPos)!=59&&currentPos<=lumpString.Length())
					{
						tk.value.AppendFormat("%s", lumpString.CharAt(currentPos));
						currentPos++;
					}
					currentPos--;
				}
				else if(IsDigit(lumpString.CharAt(currentPos)))
				{
					tk.type = TSPT_Number;
					while(!isWhitespace(lumpString.CharCodeAt(currentPos))&&lumpString.CharCodeAt(currentPos)!=59&&lumpString.CharCodeAt(currentPos)!=44&&currentPos<=lumpString.Length())
					{
						tk.value.AppendFormat("%s", lumpString.CharAt(currentPos));
						currentPos++;
					}
					currentPos--;
				}
				break;
		}
		//Console.Printf(currentPos..". "..tk.value.." ("..tk.type..")");
		currentPos++;
		return tk;*/
	}
}