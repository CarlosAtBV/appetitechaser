Extend Class TSP_PlayerPawn_ZSCBase
{
	bool pp_switchingmod;
	TSP_Weapon_Core pp_nextModSwitch;
	int pp_moddelay;
	
	double pp_punchWarp;
	double tsp_fb_zoom;
	double tsp_fb_zoomlerp;
	
	override void FireWeapon (State stat)
	{
		let daWeapon = TSP_Weapon_Core(player.ReadyWeapon);
		if ( daWeapon )
		{
			daWeapon.TSP_ClearWeaponExtras();
		}
		super.FireWeapon(stat);
	}
	
	override Weapon PickNextWeapon()
	{
		if(pp_switchingmod) return player.ReadyWeapon;
		return super.PickNextWeapon();
	}
	override Weapon PickPrevWeapon()
	{
		if(pp_switchingmod) return player.ReadyWeapon;
		return super.PickPrevWeapon();
	}
	override Weapon PickWeapon(int slot, bool checkammo)
	{
		if(pp_switchingmod) return player.ReadyWeapon;
		return super.PickWeapon(slot,checkammo);
	}
	
	void TSP_CycleModNext()
	{
		if(!(player.WeaponState & WF_WEAPONREADY || pp_switchingmod)) return;
		
		TSP_Weapon_Core currentWep = TSP_Weapon_Core(player.ReadyWeapon);
		if(currentWep == null) return;
		if(currentWep.bNoModSwitch) return;
		
		bool found;
		int slot;
		int index;
		if(pp_nextModSwitch!=null)
		{
			[found, slot, index] = player.weapons.LocateWeapon(pp_nextModSwitch.GetClass());
		}
		else
		{
			[found, slot, index] = player.weapons.LocateWeapon(currentWep.GetClass());
		}
		
		int indexSearch = index+1;
		int slotsSearched = 0;
		bool searchDone;
		while(slotsSearched<player.weapons.SlotSize(slot))
		{
			if(indexSearch>=player.weapons.SlotSize(slot))
			{
				indexSearch=0;
			}
			if(indexSearch==index) return;
			if(pp_haveTheseWeapons.Find(player.weapons.GetWeapon(slot, indexSearch)) != pp_haveTheseWeapons.Size())
			{
				searchDone = true;
				break;
			}
			indexSearch++;
			slotsSearched++;
		}
		
		if(!searchDone) return;
		
		let potentialWep = player.weapons.GetWeapon(slot, indexSearch);
		GiveInventory(potentialWep,1);
		
		pp_moddelay = 12;
		
		TSP_SwitchToMod(potentialWep);
	}
	
	void TSP_SwitchToMod(Class<Weapon> newMod)
	{
		TSP_Weapon_Core currentWep = TSP_Weapon_Core(player.ReadyWeapon);
		if(currentWep == null) return;
		if(currentWep.bNoModSwitch) return;
		if(!FindInventory(newMod)) return;
		pp_nextModSwitch = TSP_Weapon_Core(FindInventory(newMod));
		if(pp_nextModSwitch!=currentWep)
		{
			pp_nextModSwitch.tspw_powerlevel = currentWep.tspw_powerlevel;
			pp_nextModSwitch.tspw_ammolevel = currentWep.tspw_ammolevel;
			pp_nextModSwitch.tspw_reloadlevel = currentWep.tspw_reloadlevel;
			pp_nextModSwitch.tspw_curclip = currentWep.tspw_curclip;
			pp_nextModSwitch.tspw_clipsize = currentWep.tspw_clipsize;
		}
		player.PendingWeapon = pp_nextModSwitch;
		Console.Printf("");
		Console.Printf("");
		Console.Printf("");
		Console.Printf("Switching to "..pp_nextModSwitch.GetTag());
		pp_switchingmod = true;
	}
	
	override void CheckFOV()
	{
		super.CheckFOV();
		//super.CheckFOV();
		//Console.Printf(""..tsp_fb_zoom);
		double targetZoom = tsp_fb_zoom;//player.DesiredFOV * tsp_fb_zoom;
		tsp_fb_zoomlerp = tsp_fb_zoomlerp + ( targetZoom - tsp_fb_zoomlerp ) / 2;
		player.FOV = (player.DesiredFOV * tsp_fb_zoomlerp) + (tsp_crouchSliding ? (vel.xy.Length() / 5) : 0);//tsp_fb_zoom;
	}
}