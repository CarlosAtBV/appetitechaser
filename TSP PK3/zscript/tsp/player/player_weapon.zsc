Extend Class TSP_PlayerPawn_ZSCBase
{
	bool pp_switchingmod;
	TSP_Weapon_Core pp_nextModSwitch;
	int pp_moddelay;
	
	double pp_punchWarp;
	double tsp_fb_zoom;
	double tsp_fb_zoomlerp;
	
	override void FireWeapon (State stat)
	{
		let daWeapon = TSP_Weapon_Core(player.ReadyWeapon);
		if ( daWeapon )
		{
			daWeapon.TSP_ClearWeaponExtras();
		}
		super.FireWeapon(stat);
	}
	
	override void TickPSprites()
	{
		let player = self.player;
		let pspr = player.psprites;
		let weapon = TSP_Weapon_Core(player.ReadyWeapon);
		
		while (pspr)
		{
			// Destroy the psprite if it's from a weapon that isn't currently selected by the player
			// or if it's from an inventory item that the player no longer owns. 
			if ((pspr.Caller == null ||
				(pspr.Caller is "Inventory" && Inventory(pspr.Caller).Owner != pspr.Owner.mo) ||
				(pspr.Caller is "Weapon" && pspr.Caller != pspr.Owner.ReadyWeapon)))
			{
				pspr.Destroy();
			}
			else
			{
				pspr.Tick();
			}

			pspr = pspr.Next;
		}

		if ((health > 0) || (player.ReadyWeapon != null && !player.ReadyWeapon.bNoDeathInput))
		{
			if (player.ReadyWeapon == null)
			{
				if (player.PendingWeapon != WP_NOCHANGE)
					player.mo.BringUpWeapon();
			}
			else
			{
				CheckWeaponChange();
				if ( player.WeaponState & (WF_WEAPONREADY | WF_WEAPONREADYALT) )
				{
					TSP_CheckWeapon();
				}
			}
		}
	}
	
	// this weapon chode
	
	ui void TSP_DrawPlayerDebug()
	{
		Font fnt = "smallfont";
		screen.DrawText(fnt, Font.CR_UNTRANSLATED, 0, 0,
			"Slide CD: "..tsp_slideCooldown.."\nOn Ground: "..player.onground,
			DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
	}
	
	void TSP_CheckWeapon()
	{
		let player = self.player;
		let weapon = TSP_Weapon_Core(player.ReadyWeapon);

		if (weapon == NULL)
			return;
			
		player.attackdown = ( !player.WeaponState & WF_WEAPONREADY );
			
		if ( !player.WeaponState & WF_WEAPONREADY ) return;
		
		bool isReloadHacking = (player.FindPSprite(weapon.PSP_TSP_RELOADHACK) != null);
		
		if ( tsp_taunting )
		{
			if ( weapon.FindState("Taunt") && !weapon.InStateSequence(player.FindPSprite(PSP_WEAPON).CurState, weapon.FindState("Taunt")) )
			{
				tsp_taunting = false;
				weapon.TSP_ClearWeaponExtras();
				player.SetPSprite(PSP_WEAPON, weapon.FindState("Taunt"));
				player.WeaponState &= ~WF_WEAPONBOBBING;
				//input_weaponReady = -1;
				return;
			}
		}
		
		if ( player.cmd.buttons & BT_RELOAD )
		{
			if( !(weapon.input_weaponFlags & weapon.TSPWRF_NORELOAD) && weapon.tspw_curclip < weapon.GetClipCapacity() && weapon.canReload() )
			{
				weapon.TSP_ClearWeaponExtras();
				player.SetPSprite(PSP_WEAPON, weapon.FindState("Reload"));
				player.WeaponState &= ~WF_WEAPONBOBBING;
				//input_weaponReady = -1;
				return;
			}
		}
		
		if ( !isReloadHacking && weapon.bModFireMode )
		{
			switch(weapon.bHoldDownForMod)
			{
				case false:
					if ( !weapon.tspw_traitmode && player.cmd.buttons & BT_ALTATTACK && !(player.oldbuttons & BT_ALTATTACK) )
					{
						weapon.tspw_altmode = !weapon.tspw_altmode;
						string onoff = weapon.tspw_altmode ? "\c[TSP_Green]On" : "\c[TSP_Red]Off";
						notifyMessage(weapon.tspw_altname.." "..onoff);
						if ( weapon.tspw_altmode )
						{
							weapon.TSP_ClearWeaponExtras();
							if(weapon.FindState("Switch")) player.SetPSprite(PSP_WEAPON, weapon.FindState("Switch"));
						}
						else
						{
							weapon.TSP_ClearWeaponExtras();
							if(weapon.FindState("ModSwitch")) player.SetPSprite(PSP_WEAPON, weapon.FindState("ModSwitch"));
						}
					}
					else if ( weapon.tspw_traitmode && player.cmd.buttons & BT_ALTATTACK )
					{
						if(weapon.FindState("TraitAltFire")) player.SetPSprite(PSP_WEAPON, weapon.FindState("TraitAltFire"));
					}
					break;
				case true:
					if ( !weapon.tspw_traitmode && player.cmd.buttons & BT_ALTATTACK )
					{
						if( !weapon.tspw_altmode )
						{
							weapon.TSP_ClearWeaponExtras();
							if(weapon.FindState("Switch")) player.SetPSprite(PSP_WEAPON, weapon.FindState("Switch"));
							//A_PlaySound("weapon/mod/on", CHAN_5);
						}
						weapon.tspw_altmode = true;
					}
					else if ( !weapon.tspw_altmode && weapon.tspw_traitmode && player.cmd.buttons & BT_ALTATTACK )
					{
						if(weapon.FindState("TraitAltFire")) player.SetPSprite(PSP_WEAPON, weapon.FindState("TraitAltFire"));
					}
					else
					{
						if ( weapon.tspw_altmode )
						{
							weapon.TSP_ClearWeaponExtras();
							if(weapon.FindState("ModSwitch")) player.SetPSprite(PSP_WEAPON, weapon.FindState("ModSwitch"));
							//A_PlaySound("weapon/mod/off", CHAN_5);
						}
						weapon.tspw_altmode = false;
					}
					break;
			}
		}
		
		if ( weapon.input_weaponReadyType == 0 )
		{
			if ( player.cmd.buttons & BT_ATTACK )
			{
				if ( !(player.oldbuttons & BT_ATTACK) )
				{
					if ( !weapon.TSP_IsClipEmpty() )
					{
						weapon.TSP_ClearWeaponExtras();
						FireWeapon(weapon.GetAtkState(false));
						return;
					}
					else if ( !player.FindPSprite(weapon.PSP_TSP_RELOADHACK) )
					{
						weapon.TSP_ClearWeaponExtras();
						FireWeapon(weapon.FindState("Empty"));
						return;
					}
				}
			}
		}
		else
		{
			if ( weapon.TSP_IsFirePressed() )
			{
				FireWeapon(weapon.GetAtkState(false));
				return;
			}
			
			if ( weapon.TSP_IsAltFirePressed() )
			{
				FireWeapon(weapon.GetAltAtkState(false));
				return;
			}
		}
	}
	
	override Weapon PickNextWeapon()
	{
		if(pp_switchingmod) return player.ReadyWeapon;
		return super.PickNextWeapon();
	}
	override Weapon PickPrevWeapon()
	{
		if(pp_switchingmod) return player.ReadyWeapon;
		return super.PickPrevWeapon();
	}
	override Weapon PickWeapon(int slot, bool checkammo)
	{
		if(pp_switchingmod) return player.ReadyWeapon;
		return super.PickWeapon(slot,checkammo);
	}
	
	void TSP_CycleModNext()
	{
		if(!(player.WeaponState & WF_WEAPONREADY || pp_switchingmod)) return;
		
		TSP_Weapon_Core currentWep = TSP_Weapon_Core(player.ReadyWeapon);
		if(currentWep == null) return;
		if(currentWep.bNoModSwitch) return;
		
		bool found;
		int slot;
		int index;
		if(pp_nextModSwitch!=null)
		{
			[found, slot, index] = player.weapons.LocateWeapon(pp_nextModSwitch.GetClass());
		}
		else
		{
			[found, slot, index] = player.weapons.LocateWeapon(currentWep.GetClass());
		}
		
		int indexSearch = index+1;
		int slotsSearched = 0;
		bool searchDone;
		while(slotsSearched<player.weapons.SlotSize(slot))
		{
			if(indexSearch>=player.weapons.SlotSize(slot))
			{
				indexSearch=0;
			}
			if(indexSearch==index) return;
			/*if ( pp_haveTheseWeapons.Find(player.weapons.GetWeapon(slot, indexSearch)) != pp_haveTheseWeapons.Size() )
			{
				searchDone = true;
				break;
			}*/
			indexSearch++;
			slotsSearched++;
		}
		
		if(!searchDone) return;
		
		let potentialWep = player.weapons.GetWeapon(slot, indexSearch);
		GiveInventory(potentialWep,1);
		
		pp_moddelay = 12;
		
		TSP_SwitchToMod(potentialWep);
	}
	
	void TSP_SwitchToMod(Class<Weapon> newMod)
	{
		TSP_Weapon_Core currentWep = TSP_Weapon_Core(player.ReadyWeapon);
		if(currentWep == null) return;
		if(currentWep.bNoModSwitch) return;
		if(!FindInventory(newMod)) return;
		pp_nextModSwitch = TSP_Weapon_Core(FindInventory(newMod));
		if(pp_nextModSwitch!=currentWep)
		{
			pp_nextModSwitch.tspw_powerlevel = currentWep.tspw_powerlevel;
			pp_nextModSwitch.tspw_ammolevel = currentWep.tspw_ammolevel;
			pp_nextModSwitch.tspw_reloadlevel = currentWep.tspw_reloadlevel;
			pp_nextModSwitch.tspw_curclip = currentWep.tspw_curclip;
			pp_nextModSwitch.tspw_clipsize = currentWep.tspw_clipsize;
		}
		player.PendingWeapon = pp_nextModSwitch;
		Console.Printf("");
		Console.Printf("");
		Console.Printf("");
		Console.Printf("Switching to "..pp_nextModSwitch.GetTag());
		pp_switchingmod = true;
	}
	
	override void CheckFOV()
	{
		super.CheckFOV();
		//super.CheckFOV();
		//Console.Printf(""..tsp_fb_zoom);
		double targetZoom = tsp_fb_zoom;//player.DesiredFOV * tsp_fb_zoom;
		tsp_fb_zoomlerp = tsp_fb_zoomlerp + ( targetZoom - tsp_fb_zoomlerp ) / 2;
		player.FOV = (player.DesiredFOV * tsp_fb_zoomlerp) + (vel.xy.Length() / 5) * tsp_slidefov;//tsp_fb_zoom;
	}
}