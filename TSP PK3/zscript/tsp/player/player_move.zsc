Extend Class TSP_PlayerPawn_ZSCBase
{	
	bool tsp_crouchSliding;
	bool tsp_firstSlideBoost;
	bool tsp_slidingOnGround;
	int tsp_slideCooldown;
	
	double tsp_bob;
	double tsp_lastbob;
	double tsp_bobamt;
	
	bool tsp_crouching;
	double tsp_viewheight_mult;
	
	int tsp_deadstart;
	int tsp_deadend;
	
	bool tsp_cooluifreeze;
	
	override void Die(Actor source, Actor inflictor, int dmgflags, Name meansofdeath)
	{
		tsp_deadstart = level.maptime;
		tsp_deadend = tsp_deadstart + 35 * 1;
		super.Die(source, inflictor, dmgflags, meansofdeath);
	}
	
	double tsp_landpunch;
	double tsp_landpitch;
	double tsp_slideroll;
	float tsp_slidefov;
	
	void TSP_HandleViewStuff()
	{
		tsp_landpunch = tsp_landpunch + ( 0.0 - tsp_landpunch ) / 5;
		if ( vel.z == 0 && oldVelZ < 0 )
		{
			tsp_landpunch = oldVelZ/3;
		}
		tsp_landpitch = tsp_landpitch + ( tsp_landpunch/5 - tsp_landpitch ) / 5;
		
		A_SetViewPitch(-tsp_landpitch, SPF_INTERPOLATE);
		tsp_slideroll = tsp_slideroll + ((tsp_crouchSliding ? 2 : 0) - tsp_slideroll) / 3;
		tsp_slidefov = tsp_slidefov + ((tsp_crouchSliding && vel.z == 0 ? 1 : 0) - tsp_slidefov) / 5;
		double totalRoll = -tsp_landpitch*sin(level.maptime*12);
		totalRoll += tsp_slideroll + TSP_GetDeathRoll();
		A_SetViewRoll(totalRoll, SPF_INTERPOLATE);
	}
	
	//
	// MovePlayer()
	//
	// [Py] Handles the new movement stuff
	//
	
	override void MovePlayer ()
	{
		UserCmd cmd = player.cmd;
		
		Angle += cmd.yaw * (360./65536.);

		player.onground = (pos.z <= floorz) || bOnMobj || bMBFBouncer || (player.cheats & CF_NOCLIP2);
		
		if ( pp_hitFreeze>0 || tsp_cooluifreeze )
		{
			A_SetAngle(angle-1,0);
			A_SetAngle(angle+1,SPF_INTERPOLATE);
			A_SetPitch(pitch-1,0);
			A_SetPitch(pitch+1,SPF_INTERPOLATE);
			return;
		}
		
		bool isSlidingOnGround = (player.onground && tsp_crouchSliding);
		bool isFloating = ( waterlevel || bNoGravity ) && pitch != 0 && !player.GetClassicFlight();
		
		if ( isSlidingOnGround )
		{
			if ( !tsp_firstSlideBoost )
			{
				tsp_firstSlideBoost = true;
				double boostAngle = angle + DeltaAngle(angle, atan2(vel.y, vel.x))/4;
				float boostMult = 1.5 * clamp(1 - ((tsp_slideCooldown-15.0)/105.0), 0.0, 1.0);
				vel.xy = (cos(boostAngle), sin(boostAngle)) * vel.xy.Length() * boostMult;
				Console.Printf(""..boostMult);
				tsp_slideCooldown = min(tsp_slideCooldown+35, 105);
			}
			if ( !tsp_slidingOnGround )
			{
				A_StartSound("ability/slipdash/start", 98);
				A_StartSound("ability/crouchsliding", 99, startTime: frandom(0.0,1.0));
			}
			A_SoundVolume(99, min(vel.xy.Length()/32, 0.25));
		}
		else
		{
			if ( tsp_slidingOnGround )
			{
				A_StartSound("ability/slipdash/end", 98);
				A_StopSound(99);
			}
		}
		
		tsp_slidingOnGround = isSlidingOnGround;
		
		if ( player.cmd.buttons & BT_JUMP || ( tsp_crouchSliding && vel.xy.Length() < 2 ) )
		{
			tsp_firstSlideBoost = false;
			tsp_crouchSliding = false;
		}
		else if ( player.cmd.buttons & BT_CROUCH )
		{
			if ( !(player.oldbuttons & BT_CROUCH) && tsp_crouchSliding ) // press crouch to cancel out of slide
			{
				tsp_firstSlideBoost = false;
				tsp_crouchSliding = false;
			}
			else if ( !player.onground )
			{
				if ( !tsp_crouchSliding )
				{
					vel.z -= 4;
					vel.xy += (cos(angle), sin(angle)) * 1.5;
				}
				tsp_crouchSliding = true;
			}
		}
		
		bNOFRICTION = tsp_crouchSliding;
		
		if ( tsp_crouchSliding )
		{
			if ( player.onground )
			{
				int forwardZ = GetZAt(vel.xy.Length(), 0, atan2(vel.y,vel.x), GZF_ABSOLUTEANG);
				if ( forwardZ > pos.z )
				{
					COnsole.Printf("FUCK YOU");
					vel.xy *= (pos.z / forwardZ) / 2;
				}
				else if ( vel.xy.Length() < 8 )
				{
					vel.xy *= 0.875;
				}
				else
				{
					vel.xy *= 0.97;
				}
			}
		}
		else
		{
			if ( tsp_slideCooldown > 0 )
			{
				tsp_slideCooldown--;
			}
			if ( player.onground )
			{
				vel.xy *= 0.875;
			}
		}
		
		if ( isFloating )
		{
			vel.z *= 0.875;
		}
		
		Vector2 moveDir = (cmd.forwardmove, -cmd.sidemove) / 6400;
		double moveAngle = atan2(moveDir.y, moveDir.x) + angle;
		
		double runspeed = min(moveDir.Length()*2, 3) * speed;
		//runspeed *= Speed;
		
		bool isMoving = (cmd.forwardmove || cmd.sidemove);
		
		if ( cmd.forwardmove || cmd.sidemove )
		{
			double finalSpeed = ( !player.onground ? 0.1 : runspeed ) * tsp_viewheight_mult;
			
			if ( !tsp_crouchSliding )
			{
				vel.xy += (cos(moveAngle), sin(moveAngle)) * finalSpeed;
			}
			if ( isFloating )
			{
				vel.z -= finalSpeed * sin(pitch);
				vel.xy *= cos(pitch);
			}
		}
		
		MaxStepHeight = tsp_crouchsliding ? 16 : 24;
		
		//int stepFreq = 30 / runspeed;
		double bobTarg = cos(level.maptime * runspeed * 8) * tsp_bobAmt;//(stepFreq - (level.maptime % stepFreq)) / double(stepFreq) * tsp_bobAmt;
		tsp_lastbob = tsp_bob;
		tsp_bob = tsp_bob + ( bobTarg * 2 - tsp_bob ) / 3;
		tsp_bobamt = tsp_bobamt + ( (isMoving ? 1 : 0) - tsp_bobAmt ) / 4.;
		
		tsp_viewheight_mult = tsp_viewheight_mult + ( (tsp_crouching ? 0.42 : 1.0) - tsp_viewheight_mult ) / 2;
	}	
	
	//
	// CalcHeight()
	//
	// [Py] Handles viewbobbing so that mel go like uhhh boing boing!!!
	//
	
	override void CalcHeight()
	{
		double lastViewZ = player.viewz;
		double viewBob = 3 * cos(level.maptime * 16) * (vel.length() / 8);
		double newViewheight = viewheight * tsp_viewheight_mult;
		
		if ( health <= 0 )
		{
			float getThatShit = (level.maptime - tsp_deadstart) / double(tsp_deadend - tsp_deadstart);
			player.viewz = pos.Z + viewheight - (viewheight * TSP_EasingFunctions.easeOutBounce(clamp(getThatShit, 0.0, 1.0)));
			//Console.Printf(player.viewz.."");
			return;
		}
		
		if ( tsp_crouchSliding )
		{
			player.viewz = pos.Z + 24;
		}
		else
		{
			player.viewz = pos.Z + (newViewheight * player.crouchfactor) + viewBob;
			//super.CalcHeight();
		}
		
		if ( level.maptime <= 1 )
		{
			return;
		}
		
		if ( abs(vel.z) <= 0.1 && oldVelZ == vel.z && abs(Prev.z - pos.z) <= 12 )
		{
			player.viewz = lastViewZ + ( player.viewz - lastViewZ ) / 4;
		}
		
		player.viewz += tsp_landpunch;
	}
	
	float tsp_deathroll;
	
	float TSP_GetDeathRoll()
	{
		if ( tsp_deadstart == tsp_deadend ) return 0;
		
		float getThatShit = clamp((level.maptime - tsp_deadstart) / double(tsp_deadend - tsp_deadstart), 0.0, 1.0);
		tsp_deathroll += sin(getThatShit*180);
		return tsp_deathroll;
	}
	
	int GetHitscanHeight()
	{
		return tsp_crouching ? viewheight * tsp_viewheight_mult : viewheight;
	}
	
	override void CheckCrouch (bool totallyfrozen)
	{
		let player = self.player;
		UserCmd cmd = player.cmd;

		if ( cmd.buttons & BT_JUMP )
		{
			cmd.buttons &= ~BT_CROUCH;
		}
		
		if ( CanCrouch() && player.health > 0 && level.IsCrouchingAllowed() )
		{
			if ( !totallyfrozen )
			{
				tsp_crouching = (cmd.buttons & BT_CROUCH);
			}
		}
		else
		{
			tsp_crouching = false;
		} 
		
		bool doSizeChange = A_SetSize(-1, tsp_crouching ? 56/2 : 56, true);
		
		if ( !doSizeChange && !tsp_crouching )
		{
			tsp_crouching = true;
			A_SetSize(-1, 56/2);
		}
		
		if ( tsp_crouchSliding )
		{
			int randomDir = atan2(vel.y, vel.x) + random(25,45) * randompick(-1,1);
			let smonk = TSP_CrouchSlideSmoke(Spawn("TSP_CrouchSlideSmoke", pos + vel * 2 + (cos(randomDir), sin(randomDir), 0) * 32));
			smonk.targAlpha = min((vel.x, vel.y).Length() / 32, 1.0);
		}
	}
	
	override void CheckPitch()
	{
		if(pp_hitFreeze>0)
		{
			return;
		}
		super.CheckPitch();
	}
}