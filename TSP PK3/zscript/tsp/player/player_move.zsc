Extend Class TSP_PlayerPawn_ZSCBase
{	
	bool tsp_crouchSliding;
	bool tsp_slidingOnGround;
	
	double tsp_bob;
	double tsp_lastbob;
	double tsp_bobamt;
	
	bool tsp_crouching;
	double tsp_viewheight_mult;
	
	bool tsp_cooluifreeze;
	
	//
	// MovePlayer()
	//
	// [Py] Handles the new movement stuff
	//
	
	override void MovePlayer ()
	{
		UserCmd cmd = player.cmd;
		
		Angle += cmd.yaw * (360./65536.);

		player.onground = (pos.z <= floorz) || bOnMobj || bMBFBouncer || (player.cheats & CF_NOCLIP2);
		
		if ( pp_hitFreeze>0 || tsp_cooluifreeze )
		{
			A_SetAngle(angle-1,0);
			A_SetAngle(angle+1,SPF_INTERPOLATE);
			A_SetPitch(pitch-1,0);
			A_SetPitch(pitch+1,SPF_INTERPOLATE);
			return;
		}
		
		bool isSlidingOnGround = (player.onground && tsp_crouchSliding);
		bool isFloating = ( waterlevel || bNoGravity ) && pitch != 0 && !player.GetClassicFlight();
		
		if ( isSlidingOnGround )
		{
			if ( !tsp_slidingOnGround )
			{
				A_StartSound("ability/slipdash/start", 98);
				A_StartSound("ability/crouchsliding", 99);
			}
		}
		else
		{
			if ( tsp_slidingOnGround )
			{
				A_StartSound("ability/slipdash/end", 98);
				A_StopSound(99);
			}
		}
		
		tsp_slidingOnGround = isSlidingOnGround;
		
		if ( player.cmd.buttons & BT_JUMP || ( tsp_crouchSliding && vel.xy.Length() < 2 ) )
		{
			tsp_crouchSliding = false;
		}
		else if ( player.cmd.buttons & BT_CROUCH )
		{
			if ( !player.onground )
			{
				if ( !tsp_crouchSliding )
				{
					vel.z -= 4;
					vel.xy += (cos(angle), sin(angle)) * 6;
				}
				tsp_crouchSliding = true;
			}
		}
		
		bNOFRICTION = tsp_crouchSliding;
		
		if ( tsp_crouchSliding && player.onground )
		{
			vel.xy *= 0.98;
		}
		else if ( player.onground )
		{
			vel.xy *= 0.875;
		}
		
		if ( isFloating )
		{
			vel.z *= 0.875;
		}
		
		Vector2 moveDir = (cmd.forwardmove, -cmd.sidemove) / 6400;
		double moveAngle = atan2(moveDir.y, moveDir.x) + angle;
		
		double runspeed = min(moveDir.Length()*2, 3) * speed;
		//runspeed *= Speed;
		
		bool isMoving = (cmd.forwardmove || cmd.sidemove);
		
		if ( cmd.forwardmove || cmd.sidemove )
		{
			double finalSpeed = ( !player.onground ? 0.1 : runspeed ) * tsp_viewheight_mult;
			
			if ( !tsp_crouchSliding )
			{
				vel.xy += (cos(moveAngle), sin(moveAngle)) * finalSpeed;
			}
			if ( isFloating )
			{
				vel.z -= finalSpeed * sin(pitch);
				vel.xy *= cos(pitch);
			}
		}
		
		//int stepFreq = 30 / runspeed;
		double bobTarg = cos(level.maptime * runspeed * 8) * tsp_bobAmt;//(stepFreq - (level.maptime % stepFreq)) / double(stepFreq) * tsp_bobAmt;
		tsp_lastbob = tsp_bob;
		tsp_bob = tsp_bob + ( bobTarg * 2 - tsp_bob ) / 3;
		tsp_bobamt = tsp_bobamt + ( (isMoving ? 1 : 0) - tsp_bobAmt ) / 4.;
		
		tsp_viewheight_mult = tsp_viewheight_mult + ( (tsp_crouching ? 0.42 : 1.0) - tsp_viewheight_mult ) / 2;
	}	
	
	//
	// CalcHeight()
	//
	// [Py] Handles viewbobbing so that mel go like uhhh boing boing!!!
	//
	
	override void CalcHeight()
	{
		double viewBob = 3 * cos(level.maptime * 16) * (vel.length() / 8);
		double newViewheight = viewheight * tsp_viewheight_mult;
		
		if ( tsp_crouchSliding )
		{
			player.viewz = pos.Z + 24;
		}
		else
		{
			player.viewz = pos.Z + (newViewheight * player.crouchfactor) + viewBob;
			//super.CalcHeight();
		}
	}
	
	override void CheckCrouch (bool totallyfrozen)
	{
		let player = self.player;
		UserCmd cmd = player.cmd;

		if ( cmd.buttons & BT_JUMP )
		{
			cmd.buttons &= ~BT_CROUCH;
		}
		
		if ( CanCrouch() && player.health > 0 && level.IsCrouchingAllowed() )
		{
			if ( !totallyfrozen )
			{
				tsp_crouching = (cmd.buttons & BT_CROUCH);
			}
		}
		else
		{
			tsp_crouching = false;
		}
	}
	
	override void CheckPitch()
	{
		if(pp_hitFreeze>0)
		{
			return;
		}
		super.CheckPitch();
	}
}