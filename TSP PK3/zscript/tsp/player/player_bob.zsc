Extend Class TSP_PlayerPawn_ZSCBase
{
	double d_bobFactor;
	double d_curBobZ;
	
	double d_xOff;
	double d_yOff;
	
	double d_curAngle;
	double d_lastAngle;
	double d_curPitch;
	double d_lastPitch;
	
	ui int lastTic;
	
	void TSPBobStuff()
	{
		if(player.WeaponState & WF_WEAPONREADY)
		{
			if(d_bobFactor<1.0)
			{
				d_bobFactor += 0.01;
			}
		}
		else
		{
			if(d_bobFactor>0.0)
			{
				d_bobFactor -= 0.01;
			}
		}
		
		double dlandz = 0;
		if(player.jumptics>0)
		{
			dlandz = player.jumptics;
		}
		double dbobzf = ((pos.z-prev.z)+dlandz*4);
		d_curBobZ = d_curBobZ + ( dbobzf  - d_curBobZ )/6;
		
		d_lastAngle = d_curAngle;
		d_curAngle = d_curAngle + DeltaAngle( d_curAngle,angle )/6;
		d_lastPitch = d_curPitch;
		d_curPitch = d_curPitch + DeltaAngle( d_curPitch,pitch )/6;
		
		d_xOff = d_xOff + ((-GetPlayerInput(MODINPUT_YAW)/128)-d_xOff)/6;
		d_yOff = d_yOff + ((-GetPlayerInput(MODINPUT_PITCH)/128)-d_yOff)/6;
	}
	
	//lerp function by my homie JetPlane the epic one
	ui double lerp(double start,double finish,double progress)
	{
		//progress 0.0 is start, 1.0 is finish.
		return start + (finish - start) * progress;

	}
	
	ui double swayX, swayY;
	ui Vector2 tsp_bobRecoil;
	ui Vector2 tsp_shakeashakeashakea;
	ui double tsp_curbob;
	
	override Vector2 BobWeapon (double ticfrac)
	{
		return (0, -800);
	}
		
	ui Vector2 TSP_BobWeapon (double ticfrac)
	{
		Vector2 p1, p2, r;
		Vector2 result;

		float bobtarget;

		let player = self.player;
		if (!player) return (0, 0);
		let weapon = player.ReadyWeapon;

		if (weapon == null || weapon.bDontBob)
		{
			return (0, 0);
		}

		// [XA] Get the current weapon's bob properties.
		int bobstyle = weapon.BobStyle;
		double BobSpeed = (weapon.BobSpeed * 128);
		double Rangex = weapon.BobRangeX;
		double Rangey = weapon.BobRangeY;
		
		//if we're fully through the tic, update coordinates
		
		//the final position to set is
		//lerped between last and updated coordinates
		swayX = lerp(swayX,d_xOff,ticfrac);
		swayY = lerp(swayY,d_yOff+d_curBobZ,ticfrac);
		tsp_bobRecoil = (lerp(pp_lastRecoil.x,pp_combinedRecoil.x,ticfrac),lerp(pp_lastRecoil.y,pp_combinedRecoil.y,ticfrac));
		//int finaly = lerp(curx,desx,ticfrac);

		for (int i = 0; i < 2; i++)
		{
			// Bob the weapon based on movement speed. ([SP] And user's bob speed setting)
			double angle = (BobSpeed * player.GetWBobSpeed() * 35 /	TICRATE*(level.time - 1 + i)) * (360. / 8192.);
			// [RH] Smooth transitions between bobbing and not-bobbing frames.
			// This also fixes the bug where you can "stick" a weapon off-center by
			// shooting it when it's at the peak of its swing.
			bobtarget = double(player.bob);
			if (tsp_curbob != bobtarget)
			{
				if (abs(bobtarget - tsp_curbob) <= 1)
				{
					tsp_curbob = bobtarget;
				}
				else
				{
					double zoom = MAX(1., abs(tsp_curbob - bobtarget) / 40);
					if (tsp_curbob > bobtarget)
					{
						tsp_curbob -= zoom;
					}
					else
					{
						tsp_curbob += zoom;
					}
				}
			}

			if (tsp_curbob != 0)
			{
				//[SP] Added in decorate player.viewbob checks
				double bobx = (player.bob * Rangex * ViewBob)*d_bobFactor;
				double boby = (player.bob * Rangey * ViewBob)*d_bobFactor;
				switch (bobstyle)
				{
				case Bob_Normal:
					r.X = bobx * cos(angle);
					r.Y = boby * abs(sin(angle));
					break;

				case Bob_Inverse:
					r.X = bobx*cos(angle);
					r.Y = boby * (1. - abs(sin(angle)));
					break;

				case Bob_Alpha:
					r.X = bobx * sin(angle);
					r.Y = boby * abs(sin(angle));
					break;

				case Bob_InverseAlpha:
					r.X = bobx * sin(angle);
					r.Y = boby * (1. - abs(sin(angle)));
					break;

				case Bob_Smooth:
					r.X = bobx*cos(angle);
					r.Y = 0.5f * (boby * (1. - (cos(angle * 2))));
					break;

				case Bob_InverseSmooth:
					r.X = bobx*cos(angle);
					r.Y = 0.5f * (boby * (1. + (cos(angle * 2))));
				}
			}
			else
			{
				r = (0, 0);
			}
			
			r.X = r.X+swayX+tsp_bobRecoil.x;
			r.Y = r.Y+clamp(swayY,-4,44)+tsp_bobRecoil.y;
			if (i == 0) p1 = r; else p2 = r;
		}
		
		if(pp_hitFreeze>0)
		{
			tsp_shakeashakeashakea.x = 1.0-2.0*(ticFrac>=0.5);
		}
		return p1 * (1. - ticfrac) + p2 * ticfrac + tsp_shakeashakeashakea;
	}
}