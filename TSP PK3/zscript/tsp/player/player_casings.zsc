Class TSP_Weapon_Casing
{
	TSP_PlayerPawn_ZSCBase owner;
	int overlay;
	double gravity;
	Vector2 vel;
	Vector2 pos;
	double scale;
	
	void Init()
	{
		scale = 1.0;
	}
	
	play void Tick()
	{
		pos += vel;
		vel.y += 1;
		scale += 0.1;
		
		if (pos.y > 320)
		{
			owner.TSP_RemoveOverlay(overlay);
			Destroy();
		}
	}
}

Extend Class TSP_PlayerPawn_ZSCBase
{
	Array<TSP_Weapon_Casing > tsp_casings;
	
	const CASINGBASE = -500;
	const MAXCASINGS = 20;
	int curCasing;
	
	/*void TSP_InitCasings()
	{
		curCasing = CASINGBASE;
	}*/
	
	int TSP_GetFreeCasingOverlay()
	{
		int newCasing = curCasing;
		if (player.GetPSprite(CASINGBASE+newCasing).CurState != null)
		{
			TSP_RemoveOverlay(CASINGBASE+newCasing);
		}
		
		curCasing++;
		
		if ( curCasing >= MAXCASINGS )
		{
			curCasing = 0;
		}
		return CASINGBASE+newCasing;
	}
	
	void TSP_RemoveOverlay(int id)
	{
		//Console.Printf("removing "..id);
		if (player.GetPSprite(id).CurState == null)
		{
			Console.Printf("wtf it was already null??? "..id);
		}
		player.SetPSprite(id, null);
	}
	
	void TSP_SpawnCasing(State state, Vector2 pos, double goAngle = -25, double goSpeed = 32)
	{
		int casingId = TSP_GetFreeCasingOverlay();
		//Console.Printf(""..casingId);
		
		TSP_Weapon_Casing casing = new("TSP_Weapon_Casing");
		casing.Init();
		casing.owner = self;
		casing.pos = pos;
		
		player.SetPSprite(casingId, state);
		let newSprite = player.GetPSprite(casingId);
		newSprite.scale = (1.0, 1.0);
		newSprite.pivot = (0.5, 0.5);
		newSprite.x = pos.x;
		newSprite.y = pos.y;
		//newSprite.bAddWeapon = false;
		//newSprite.bAddBob = false;
		
		casing.overlay = casingId;
		casing.vel = (cos(goAngle)*goSpeed, sin(goAngle)*goSpeed);
		tsp_casings.Push(casing);
	}
	
	void TSP_TickCasings()
	{
		for (int i = 0; i < tsp_casings.Size(); i++)
		{
			if (tsp_casings[i] == null)
			{
				tsp_casings.Delete(i, 1);
				i--;
			}
		}
		
		for (int i = 0; i < tsp_casings.Size(); i++)
		{
			let casingData = tsp_casings[i];
			
			let newSprite = player.GetPSprite(casingData.overlay);
			A_OverlayOffset(casingData.overlay, casingData.pos.x, casingData.pos.y, WOF_INTERPOLATE);
			newSprite.scale = (casingData.scale, casingData.scale);
			
			casingData.Tick();
		}
	}
}