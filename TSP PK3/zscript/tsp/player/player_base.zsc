Class TSP_PlayerPawn_ZSCBase : DoomPlayer
{
	Array<Class<TSP_Weapon_Core > > pp_haveTheseWeapons;
	
	Vector3 tsp_fb_recoilPos;
	Vector3 tsp_fb_recoilLast;
	
	int tsp_taunting;
	
	override void AddInventory (Inventory item)
	{
		if(item is "TSP_Weapon_Core")
		{
			for(int i = 0;i<pp_haveTheseWeapons.Size();i++)
			{
				if(pp_haveTheseWeapons[i] == item.GetClass())
				{
					super.AddInventory(item);
					return;
				}
			}
			pp_haveTheseWeapons.Push(item.GetClass());
		}
		super.AddInventory(item);
		return;
	}
	
	double tsp_bh_rating;
	int tsp_bh_kills;
	int tsp_bh_maxcombo;
	int tsp_bh_timeleft;
	int tsp_bh_killgoal;
	int tsp_bh_combokills;
	int tsp_bh_completed;
	string tsp_bh_loadout;
	
	void TSP_SetLoadoutName(string name)
	{
		tsp_bh_loadout = name;
	}
	
	string TSP_GetLoadoutName()
	{
		return StringTable.Localize(GetPrintableDisplayName(GetClass())).." \cj("..StringTable.Localize(tsp_bh_loadout).."\cj)";
	}
	
	int tsp_airtime;
	double tsp_airtime_mult;
	
	int pp_hitFreeze;
	
	bool ptp_wallJump;
	bool ptp_wallJumpReadySound;
	
	int ptp_wallJumps;
	
	int pp_gamemode;
	bool pp_meleestart;
	int pp_shieldHitDelay;
	bool pp_shieldLowSound;
	
	bool pp_traitMode;
	
	int pp_initShield;
	
	string pp_notification;
	int pp_notificationTime;
	
	TSP_Seat pp_sit;
	
	Property StartShield : pp_initShield;
	
	TSP_GlobalVariables gvars;
	
	double oldVelZ;
	
	Actor pp_slingTarget;
	
	string pp_menuDesc;
	string pp_menuTitle;
	Property DisplayDescription : pp_menuDesc;
	Property DisplayTitle : pp_menuTitle;
	
	int pp_playerpresflags;
	//flagdef ModFireMode: pp_playerpresflags, 0;
	flagdef BountyHuntersOnly: pp_playerpresflags, 1;
	flagdef BonusCharacter: pp_playerpresflags, 2;
	
	int pp_freezeMe;
	
	bool pp_hasCrouchSlid;
	
	bool ppc_mental;
	
	String css_button;
	Property CSSButton : css_button;
	
	Default
	{
		DamageFactor "MagSlam", 0.0;
		TSP_PlayerPawn_ZSCBase.CSSButton "graphics/menu/css/css_button_mel.png";
	}
	
	override void GiveDefaultInventory()
	{
		pp_haveTheseWeapons.Clear();
		
		pp_gamemode = CVar.GetCVar("tsp_gamemode").GetInt();
		pp_meleestart = CVar.GetCVar("tsp_fistsstart").GetBool()||CVar.GetCVar("tsp_meleesupreme").GetBool();
		super.GiveDefaultInventory();
		
		if(pp_gamemode==1)
		{
			OnBountyHunterLoadout();
		}
		else
		{
			OnStandardLoadout();
		}
		
		GiveInventory("TSP_PlayerPawn_Shield",pp_initShield);
		GiveInventory("TSP_PlayerPawn_MaxShield",pp_initShield);
		
		GiveInventory("TSP_GlobalDollars",TSP_STARTINGMONEY);
		GiveInventory("MeleeButtonActor",1);
		
		/*if(Object.G_SkillPropertyInt(SKILLP_ACSReturn)==0)
		{
			GiveInventory("TSP_HealingSyringe",1);
		}*/
		
		// Select the most recently added(?) weapon
		
		Inventory item;
		for ( item = Inv; item != null; item = item.Inv )
		{
			if ( item is "Weapon" )
			{
				A_SelectWeapon(item.GetClassName());
				break;
			}
		}
	}
	
	virtual void OnStandardLoadout()
	{
		Console.Printf("\c[TSP_Yellow]APPLYING STANDARD LOADOUT TEST");
	}
	virtual void OnBountyHunterLoadout()
	{
		for (int i = 0; i < AllActorClasses.Size(); i++)
		{
			let fucker = (Class<Inventory>)(AllActorClasses[i]);
			if(fucker is "Key")
			{
				GiveInventory(fucker,1);
			}
		}
		Console.Printf("\c[TSP_Green]APPLYING BOUNTY HUNTER LOADOUT TEST");
	}
	
	override void FireWeaponAlt (State stat)
	{
		/*if (player.Bot == null && bot_observer)
		{
			return;
		}*/

		let weapn = player.ReadyWeapon;
		//[Py] added this shit
		if (weapn == null)
		{
			return;
		}
		
		if(weapn is "TSP_Weapon_Core")
		{
			if(weapn.FindState('TraitAltFire') == null && !weapn.CheckAmmo (Weapon.AltFire, true))
			{
				return;
			}
		}
		else
		{
			if(weapn.FindState('AltFire') == null || !weapn.CheckAmmo (Weapon.AltFire, true))
			{
				return;
			}
		}

		player.WeaponState &= ~WF_WEAPONBOBBING;
		PlayAttacking ();
		weapn.bAltFire = true;

		if (stat == null)
		{
			stat = weapn.GetAltAtkState(!!player.refire);
		}
		
		if(stat!=null) //[Py] bullshit shit
		{
			player.SetPsprite(PSP_WEAPON, stat);
		}
		
		if (!weapn.bNoAlert)
		{
			SoundAlert (self, false);
		}
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		//pp_gamemode = CVar.GetCVar("tsp_gamemode").GetInt();
		
		gvars = TSP_GlobalVariables.Get();
		gvars.tsp_employer = 0;
		
		tsp_fb_zoom = 1.0;
		
		tsp_viewheight_mult = 1.0;
	}
	
	void notifyMessage (string message, int time = 70)
	{
		pp_notification = message;
		pp_notificationTime = time;
	}
	
	float pp_hitMult;
	
	override int DamageMobj (Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		/*string damageGiver = (inflictor!=null ? inflictor.GetClassName() : 'N/A');
		string damageSource = (source!=null ? source.GetClassName() : 'N/A');
		Console.Printf(damageSource.."'s "..damageGiver.." dealt "..damage.." damage.");*/
		
		if(FindInventory("TSP_Upgrade_ARC_Tank"))
		{
			Console.Printf("hell yea");
			damage *= 0.75;
		}
		
		pp_shieldHitDelay = 35*5;
		
		if(mod!='Suicide' && CountInv("TSP_PlayerPawn_Shield"))
		{
			int truDamage = damage;
			damage = 0;
			
			pp_hitMult = 0.25;
			
			TakeInventory("TSP_PlayerPawn_Shield",truDamage);
			A_PlaySound("shield/hit",CHAN_BODY);
			if(CountInv("TSP_PlayerPawn_Shield")<1)
			{
				A_PlaySound("shield/depleted",CHAN_BODY);
			}
			A_SetBlend("#56E7FF", 0.1, 8, "#56E7FF", 0.0);
			return 0;
		}
		
		pp_hitMult = (damage / 25.);
		
		return super.DamageMobj(inflictor,source,damage,mod,flags,angle);
	}
	
	int sign (int numby)
	{
		if(numby>0)
		{
			return 1;
		}
		else if (numby<0)
		{
			return -1;
		}
		return 0;
	}
	
	Actor pp_slingStore;
	
	Vector3 pp_sit_oldPos;
	Vector3 pp_hitVel;
	
	// Weapon Recoil
	Vector2 pp_weaponRecoil;
	Vector2 pp_weaponRecoilSlow;
	Vector2 pp_combinedRecoil;
	Vector2 pp_lastRecoil;
	
	override void Tick ()
	{
		if (!player || !player.mo || player.mo != self)
		{
			Super.Tick();
			return;
		}
		
		if(pp_hitFreeze>0)
		{
			pp_hitFreeze--;// pp_freezeMe--;
			vel = (0,0,0);
			if(pp_hitFreeze==0)
			{
				vel = pp_hitVel;
			}
		}
		bNoDamage = (pp_freezeMe>0);
		bDontThrust = (pp_freezeMe>0);
		bNoGravity = (pp_freezeMe>0 || bNoClip);
		
		// [Py] Cool airstop stuff for stopping in the air
		
			if ( pp_hitFreeze == 0 && tsp_airtime > 0 )
			{
				tsp_airtime_mult = 1.0;
				tsp_airtime--;
			}
			else if ( tsp_airtime == 0 )
			{
				tsp_airtime_mult -= 0.1;
			}
			
			if ( tsp_airtime_mult > 0 )
			{
				if ( vel.z < 0 )
				{
					vel.z *= 1.0 - tsp_airtime_mult;
				}
				vel.xy *= 1.0 - tsp_airtime_mult;
			}
		
		oldVelZ = vel.z;
		
		Super.Tick();
		
		if(health>0)
		{
			if(pp_shieldHitDelay>0)
			{
				pp_shieldHitDelay--;
			}
			else if (CountInv("TSP_PlayerPawn_Shield")<CountInv("TSP_PlayerPawn_MaxShield"))
			{
				GiveInventory("TSP_PlayerPawn_Shield",1);
			}
		}
		
		if(pp_notificationTime>0)
		{
			pp_notificationTime--;
		}
		
		pp_weaponRecoil.x /= 1.5;
		pp_weaponRecoil.y /= 1.5;
		pp_weaponRecoilSlow.x /= 1.25;
		pp_weaponRecoilSlow.y /= 1.25;
		
		pp_lastRecoil = pp_combinedRecoil;
		pp_combinedRecoil = pp_weaponRecoil+pp_weaponRecoilSlow;
		
		if(pp_slingTarget)
		{
			if(pp_slingTarget.health<1)
			{
				pp_slingTarget=null;
			}
			else if(Distance3D(pp_slingTarget)-pp_slingTarget.radius<64)
			{
				/*if(pp_SlingTarget.CountInv("TSP_EnemyHandler_IsSupered"))
				{
					pp_freezeMe = pp_SlingTarget.CountInv("TSP_EnemyHandler_IsSupered")/2;
				}*/
				pp_slingTarget=null;
				A_Stop();
			}
		}
		
		if ( pp_traitMode )
		{
			TSP_TickTrait();
		}
		
		if ( player.cmd.buttons & BT_USER1 && !pp_traitMode )
		{
			pp_traitMode = true;
			TSP_StartTrait();
		}
		else if ( !(player.cmd.buttons & BT_USER1) && pp_traitMode )
		{
			pp_traitMode = false;
			TSP_EndTrait();
		}
		
		if(pp_sit!=null)
		{
			SetOrigin(pp_sit.pos,false);
			player.viewheight = 32;
		}
		
		TSPBobStuff();
		
		TickLogMessages();
		TSP_TickCasings();
		
		TSP_HandleViewStuff();
		
		if ( pp_hitMult > 0 )
		{
			pp_hitMult -= 0.05;
			if ( pp_hitMult < 0 )
			{
				pp_hitMult = 0;
			}
		}
		
		if ( tsp_taunting > 0 ) tsp_taunting--;
		
		//A_SoundPitch(CHAN_VOICE,1+sin(level.maptime*5));
	}
	
	int walljump_dir;
	
	override void CheckJump()
	{ 
		if(oldVelZ==vel.z)
		{
			ptp_wallJumps = 0;
		}
		
		//Console.Printf((pos.z==floorz).." "..(vel.z!=oldVelZ));
		
		FLineTraceData traceStuff;
		
		int sidedir = sign(player.cmd.sidemove);
		double angley = angle+atan2(-sidedir,sign(player.cmd.forwardmove));//atan2(prev.y - pos.y,prev.x - pos.x)+180;
		//Console.Printf(""..angley);
		LineTrace(angley, (radius+24)*abs(sidedir), 0, 0, 26.0, 0.0, 0.0, traceStuff);
		
		walljump_dir = 0;
		if(traceStuff.HitType == TRACE_HitWall && oldVelZ!=vel.z)
		{
			walljump_dir = -sidedir;
			if(!ptp_wallJumpReadySound)
			{
				A_PlaySound("mantle",CHAN_BODY);
				ptp_wallJumpReadySound = true;
			}
			vel.z += 0.1;
			if(player.cmd.buttons & BT_JUMP && !(player.oldbuttons & BT_JUMP))
			{
				vel = (0,0,0);
				Line bouncedOffLine = traceStuff.HitLine;
				int bouncedSide = traceStuff.LineSide;
				//Console.Printf(""..traceStuff.LineSide);
				
				switch(bouncedSide)
				{
					case 0: walljump_dir = 1; break;
					case 1: walljump_dir = -1; break;
				}
				
				int bounceAngle = atan2(bouncedOffLine.v1.p.y - bouncedOffLine.v2.p.y, bouncedOffLine.v1.p.x - bouncedOffLine.v2.p.x)+90*walljump_dir;
				int bounceOffAngle = bounceAngle+clamp(DeltaAngle(Normalize180(bounceAngle),angle),-55,55);//-68,68);
				//Console.Printf(""..bounceOffAngle);
				Thrust(14,bounceOffAngle/*angle+(25*sidedir)*/);
				A_PlaySound("*jump",CHAN_VOICE);
				vel.z = clamp(12-(ptp_wallJumps-2),0,12);
				ptp_wallJumps++;
			}
		}
		else
		{
			if(ptp_wallJumpReadySound)
			{
				ptp_wallJumpReadySound = false;
			}
		}
		
		super.CheckJump();
	}
	
	override void DeathThink ()
	{
		pp_gamemode = CVar.GetCVar("tsp_gamemode").GetInt();
		
		let player = self.player;
		int dir;
		double delta;

		player.Uncrouch();
		TickPSprites();

		player.onground = (pos.Z <= floorz);
		if (self is "PlayerChunk")
		{ // Flying bloody skull or flying ice chunk
			player.viewheight = 6;
			player.deltaviewheight = 0;
			if (player.onground)
			{
				if (Pitch > -19.)
				{
					double lookDelta = (-19. - Pitch) / 8;
					Pitch += lookDelta;
				}
			}
		}
		else if (!bIceCorpse)
		{ // Fall to ground (if not frozen)
			player.deltaviewheight = 0;
			if (player.viewheight > 6)
			{
				player.viewheight -= 1;
			}
			if (player.viewheight < 6)
			{
				player.viewheight = 6;
			}
			if (Pitch < 0)
			{
				Pitch += 3;
			}
			else if (Pitch > 0)
			{
				Pitch -= 3;
			}
			if (abs(Pitch) < 3)
			{
				Pitch = 0.;
			}
		}
		player.mo.CalcHeight ();
			
		if (player.attacker && player.attacker != self)
		{ // Watch killer
			double diff = deltaangle(angle, AngleTo(player.attacker));
			double delta = abs(diff);
	
			if (delta < 10)
			{ // Looking at killer, so fade damage and poison counters
				if (player.damagecount)
				{
					player.damagecount--;
				}
				if (player.poisoncount)
				{
					player.poisoncount--;
				}
			}
			delta /= 8;
			Angle += clamp(diff, -5., 5.);
		}
		else
		{
			if (player.damagecount)
			{
				player.damagecount--;
			}
			if (player.poisoncount)
			{
				player.poisoncount--;
			}
		}		

		if (pp_gamemode!=1 && (player.cmd.buttons & BT_USE ||
			((multiplayer || alwaysapplydmflags) && sv_forcerespawn)) && !sv_norespawn)
		{
			if (level.time >= player.respawn_time || ((player.cmd.buttons & BT_USE) && player.Bot == NULL))
			{
				player.cls = NULL;		// Force a new class if the player is using a random class
				player.playerstate = (multiplayer || level.AllowRespawn || sv_singleplayerrespawn || G_SkillPropertyInt(SKILLP_PlayerRespawn)) ? PST_REBORN : PST_ENTER;
				if (special1 > 2)
				{
					special1 = 0;
				}
			}
		}
	}
	
	void PlayerFinishLevel (int mode, int flags)
	{
		super.PlayerFinishLevel(mode,flags);

		if (pp_gamemode == TSP_GM_HUNTERS && player.playerstate != PST_DEAD)
		{
			player.health = health = SpawnHealth();
			ClearInventory();
			GiveDefaultInventory();
		}
	}
}