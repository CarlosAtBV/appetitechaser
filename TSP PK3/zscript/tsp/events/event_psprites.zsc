Extend Class TSP_EventHandler
{
	ui double lerp(double start, double finish, double progress)
	{
		//progress 0.0 is start, 1.0 is finish.
		return start + (finish - start) * progress;
	}
	
	override void RenderUnderlay(RenderEvent e)
	{
		let psprite = players[consoleplayer].psprites;
		let character = TSP_PlayerPawn_ZSCBase(players[consoleplayer].mo);
					
		double lightLevel = character.cursector ? character.cursector.lightlevel / 255.0 : 0.0;
		Color sectorColor = character.cursector ? character.cursector.ColorMap.LightColor : -1;
		
		int r, g, b = 0;
					
		Actor curLight;
		
		int activeLights = 0;
		
		for ( int i = 0; i < dynlights.Size(); i++ )
		{
			let checkLight = dynlights[i];
			int lightTens = checkLight.args[DynamicLight.LIGHT_INTENSITY]+64;
			if ( players[consoleplayer].mo.Distance3D(checkLight) < lightTens )
			{
				activeLights++;
				double intensity = 1.0 - min(1.0, players[consoleplayer].mo.Distance3D(checkLight) / lightTens);
				r += checkLight.args[0]*intensity;
				g += checkLight.args[1]*intensity;
				b += checkLight.args[2]*intensity;
			}
		}
		
		if ( activeLights > 0 )
		{
			r /= activeLights;
			g /= activeLights;
			b /= activeLights;
		}
		
		//screen.DrawText(BigFont, , 0, 0, r..", "..g..", "..b, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
		//screen.Dim(Color(r, g, b), 1.0, 0, 0, 64, 64);
		
		//Console.Printf("~~~~~");
		
		let weapon = TSP_Weapon_Core(players[consoleplayer].ReadyWeapon);
		
		Vector2 weaponOff_pos;
		double weaponOff_ang;
		
		while(psprite)
		{
			if( psprite != null )
			{
				if ( psprite.CurState != null )
				{
					let sprTex = TexMan.CheckForTexture(String.Format(psprite.Sprite.."%c0", 65+psprite.frame));
					Vector2 sprOffset = TexMan.GetScaledOffset(sprTex);
					
					double weaponTilt = psprite.rotation;
					double weaponScale = 2.0 - character.tsp_fb_zoomlerp;
					
					Vector2 newOffset = (160, 100) + sprOffset;
					
					//Console.Printf(psprite.id.." ~ "..psprite.bAddWeapon.." ~ "..psprite.y);
					
					Vector2 weaponOldPos = (psprite.oldx, psprite.oldy);
					Vector2 weaponNewPos = (psprite.x, psprite.y);
					Vector2 weaponPos = (
						lerp(weaponOldPos.x, weaponNewPos.x, e.FracTic),
						lerp(weaponOldPos.y, weaponNewPos.y, e.FracTic)
					);
					
					if ( weapon != null )
					{
						[weaponOff_pos, weaponOff_ang] = weapon.TSP_GetWeaponOffsets(psprite.id, e.FracTic);
					}
					
					weaponPos = weaponOff_pos;
					weaponTilt += weaponOff_ang;
					
					screen.DrawText(BigFont, Font.CR_GREEN, 0, 0, ""..weaponTilt, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
					//Console.Printf(""..weaponTilt);
					//weaponPos = TSP_GetWeaponOffsets;
					
					weaponPos.y += 32;
					
					//weaponScale = frandom(0.5, 1.5);
					
					weaponPos += character.TSP_BobWeapon(e.FracTic);
					weaponPos *= (2.0 - character.tsp_fb_zoomlerp);
					
					//newOffset -= character.TSP_BobWeapon(e.FracTic);
					
					for (int i = 0; i < 2; i++)
					{
						int ps_renderStyle;
						double ps_alpha;
						Color ps_color;
						int ps_colorType;
						
						switch(i)
						{
							case 0:
								ps_renderStyle = STYLE_Translucent;
								ps_alpha = 1.0;
								ps_color = Color(255, sectorColor.r, sectorColor.g, sectorColor.b);
								ps_colorType = DTA_Color;
								break;
							case 1:
								ps_renderStyle = STYLE_AddShaded;
								ps_alpha = 1.0;// - lightIntensity;
								ps_color = Color(r, g, b);
								ps_colorType = DTA_FillColor;
								break;
						}
						
						
						Screen.DrawTexture(sprTex, false, 160 + weaponPos.x, 100 + weaponPos.y,
							DTA_VirtualWidth, 320,
							DTA_VirtualHeight, 200,
							DTA_Rotate, weaponTilt,
							DTA_ScaleX, weaponScale,
							DTA_ScaleY, weaponScale,
							DTA_LegacyRenderStyle, psprite.id == PSP_FLASH ? Style_Add : ps_renderStyle,
							ps_colorType, ps_color,
							DTA_LeftOffsetF, newOffset.x, DTA_TopOffsetF, newOffset.y,
							DTA_Alpha, ps_alpha);
					}
				}
				psprite = psprite.Next;
			}
		}
	}
}