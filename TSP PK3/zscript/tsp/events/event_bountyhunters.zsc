Class TSP_BountyHunters_EnemySpawn : Actor
{	
	Default
	{
		+NOINTERACTION
	}
	
	bool CheckSpaceFree()
	{
		BlockThingsIterator it = BlockThingsIterator.Create(self, 192);
		Actor mo;

		while (it.Next())
		{
			mo = it.thing;
			if ( !mo || !mo.bSolid || Distance2D(mo)-mo.Radius > 192 )
				continue;

			return false;
		}
		
		return true;
	}
}

Class TSP_BH_Zooper : Actor
{
	Default
	{
		+BRIGHT
	}
	
	int grabRadius;
	int mineSpeeden;
	bool movingToMeet;
	
	override void Tick()
	{
		super.Tick();
		
		if(Distance3D(players[0].mo)<32)
		{
			DoShit(players[0].mo);
			Destroy();
			return;
		}
		
		if ( movingToMeet )
		{
			if ( mineSpeeden < 30 )
			{
				mineSpeeden++;
			}
			Vel3DFromAngle(mineSpeeden, AngleTo(players[0].mo), -atan2(players[0].mo.pos.z+24 - pos.z,Distance2D(players[0].mo)));
		}
		
		if ( players[0].mo!=null && players[0].mo.health > 0 && Distance3D(players[0].mo) < grabradius )
		{
			movingToMeet = true;
			bNoClip = true;
			bNoGravity = true;
		}
		
		if ( grabradius<1024 )
		{
			grabradius+=4;
		}
	}
	
	virtual void DoShit (Actor theFella) {}
	
	States
	{
		Spawn:
			BHPU A -1;
			Stop;
	}
}

Class TSP_BH_HealthZooper : TSP_BH_Zooper
{
	States
	{
		Spawn:
			BHPU A -1;
			Stop;
	}
	
	override void DoShit (Actor theFella)
	{
		theFella.GiveBody(3, 100);
	}
}

Class TSP_BH_AmmoZooper : TSP_BH_Zooper
{
	States
	{
		Spawn:
			BHPU B -1;
			Stop;
	}
	
	override void DoShit (Actor theFella)
	{
		let thePlayer = PlayerPawn(theFella);
		if ( !thePlayer ) return;
		
		thePlayer.A_StartSound("bh/pickup/ammo", 32, CHANF_OVERLAP, 0.5, pitch: frandom(0.8,1.2));
		for ( let it = thePlayer.Inv; it != null; it = it.Inv )
		{
			if ( it is "Weapon" )
			{
				let weapon = Weapon(it);
				if ( weapon.ammotype1 != null )
				{
					thePlayer.GiveInventory(weapon.ammotype1, 1);
				}
			}
		}
	}
}

Class TSP_BH_HudNotifcation
{
	string text;
	string subtext;
	float lastTime;
	float time;
	
	float GetTime(float frac)
	{
		return lastTime + (time - lastTime) * frac;
	}
	
	void Tick()
	{
		lastTime = time;
		
		if ( time < 1.0 )
		{
			time+=0.01;
		}
		
		if ( time >= 1.0 )
		{
			Destroy();
		}
	}
}

Class TSP_BHHandler : EventHandler
{
	int spawnDelay;
	int bh_startWait;
	int bh_backgroundTimer; // used to track the overall time of the round
	int bh_roundTimer;
	int bh_endtimer;
	
	int bh_spreeTier;
	int bh_spreeTime;
	float bh_spreeScale;
	
	Array<TSP_BountyHunters_EnemySpawn > bh_spawns;
	Array<Actor > bh_enemies;
	TSP_BountyHunters_EnemySpawn bh_prevSpawn;
	
	int bh_maxCombo;
	int bh_kills;
	int bh_killgoal;
	
	int bh_comboTime;
	int bh_comboKills;
	
	bool bh_roundOver;
	bool bh_wonRound;
	bool bh_overkill;
	
	bool bh_roundStarted;
	
	float bh_readyFrame;
	float bh_goFrame;
	float bh_gameSetFrame;
	float bh_muteFade;
	float bh_flashAmount;
	
	TSP_BH_HudNotifcation bh_curNote;
	
	Array<String > bh_spawnList;
	
	mixin TSP_HiResBase;
	
	static const string bh_spawnOrder[] =
	{
		"Zombieman",
		"DoomImp",
		"ShotgunGuy",
		"Demon",
		"HellKnight",
		"Cacodemon",
		"Revenant",
		"Fatso"
	};
	
	void BH_AddTime(int amt)
	{
		bh_roundTimer += amt;
		S_Sound("bountyhunters/timecrystal",CHAN_AUTO);
		S_Sound("announcer/hunters/ailene/timeext",CHAN_VOICE);
	}
	
	void BH_AddComboTime(int amt)
	{
		S_Sound(bh_comboTime > 0 ? "announcer/hunters/ailene/combotime/add" : "announcer/hunters/ailene/combotime/on",CHAN_VOICE);
		bh_comboTime += amt * 35;
		S_Sound("bountyhunters/combocrystal",CHAN_AUTO);
	}
	
	void BH_GiveMoney(int amt)
	{
		players[0].mo.GiveInventory("TSP_GlobalDollars", amt);
	}
	
	override void OnRegister()
	{
		if ( tsp_gamemode != 1 )
		{	
			return;
		}
		
		bh_spawns.Clear();
		bh_enemies.Clear();
		
		bh_spawnList.Clear();
		
		for ( int i = 0; i < bh_spawnOrder.size()+8; i++ )
		{
			for ( int addMon = 0; addMon < 1 + min(i, bh_spawnOrder.size()-1); addMon++ )
			{
				for ( int g = 0; g < 1 + min(max(i-addMon, 0), 4); g++ )
				{
					bh_spawnList.Push(bh_spawnOrder[min(addMon, bh_spawnOrder.size()-1)]);
				}
			}
		}
		
		bh_killgoal = 60;//50;//bh_spawnList.size();
		
		/*for ( int i = 0; i < 35; i++ )
		{
			bh_spawnList.Push(bh_spawnOrder[bh_spawnOrder.Size()-1]);
		}*/
		
		/*Console.Printf("Bounty Hunters Spawns:");
		for ( int v = 0; v < bh_spawnList.Size(); v++ )
		{
			Console.Printf("--- "..bh_spawnList[v]);
		}*/
	}
	
	override void WorldLoaded(WorldEvent e)
	{
		Shader.SetEnabled(players[consoleplayer], "TSP_Muted", false);
		
		if ( tsp_gamemode != 1 )
		{	
			Destroy();
			return;
		}
		
		bh_startWait = 35*3;
		bh_roundTimer = 60*2;
		
		bh_readyFrame = -1;
		bh_goFrame = -1;
		bh_gameSetFrame = -1;
	}
	
	override void WorldThingSpawned(WorldEvent e)
	{
		if ( e.Thing is "TSP_BountyHunters_EnemySpawn" )
		{
			Console.Printf("Made new spawn");
			bh_spawns.Push(TSP_BountyHunters_EnemySpawn(e.Thing));
			return;
		}
		
		if ( bh_roundStarted == true && e.Thing is "TSP_CustomInventory" )
		{
			e.Thing.Destroy();
		}
	}
	
	TSP_BountyHunters_EnemySpawn getCloseSpawn(Actor closeToMe)
	{
		TSP_BountyHunters_EnemySpawn theReturn;
		int lastDist = -1;
		for ( int i = 0; i < bh_spawns.Size(); i++ )
		{
			let newSpawn = bh_spawns[i];
			if ( bh_prevSpawn != newSpawn && (closeToMe.Distance3D(newSpawn) < lastDist || lastDist == -1) && newSpawn.CheckSpaceFree() )
			{
				lastDist = closeToMe.Distance3D(newSpawn);
				theReturn = newSpawn;
			}
		}
		
		bh_prevSpawn = theReturn;
		return theReturn;
	}
	
	void BH_GameOver(bool epicfail = false)
	{
		Shader.SetUniform1f(players[consoleplayer], "TSP_Muted", "fadeAmount", 0.0);
		Shader.SetEnabled(players[consoleplayer], "TSP_Muted", true);
		
		bh_flashAmount = 1.0;
		
		if ( bh_roundOver )
		{
			return;
		}
		
		TSP_PlayerPawn_ZSCBase thePlayer = TSP_PlayerPawn_ZSCBase(players[0].mo);
		
		bh_roundOver = true;
		bh_startWait = 0;
		bh_wonRound = !epicfail;
		bh_gameSetFrame = 1;
		bh_readyFrame = -1;
		bh_goFrame = -1;
		
		S_Sound("announcer/hunters/ailene/gameover", CHAN_VOICE);
		
		if ( bh_wonRound )
		{
			thePlayer.bINVULNERABLE = true;
			thePlayer.tsp_cooluifreeze = true;
			level.setFrozen(true);
			players[0].mo.vel = (0,0,0);
			players[0].mo.viewbob = 0;
			for ( int i = -200; i < 200; i++ )
			{
				let pSprite = players[0].GetPSprite(i);
				if ( pSprite != null )
				{
					pSprite.Tics = -1;
				}
			}
		}
		
		thePlayer.tsp_bh_kills = bh_kills;
		thePlayer.tsp_bh_combokills = bh_comboKills;
		
		double killMult = ( bh_kills + bh_comboKills ) / double(bh_killgoal);
		double timeBonus = 0.0;//epicfail ? 0 : bh_roundTimer/120.;
		double comboBonus = bh_maxCombo / double(bh_killgoal);
		
		double finalScore = killMult + comboBonus;
		
		thePlayer.tsp_bh_completed = bh_wonRound;
		thePlayer.tsp_bh_maxcombo = bh_maxCombo;
		thePlayer.tsp_bh_timeleft = bh_roundTimer;
		thePlayer.tsp_bh_rating = finalScore;
		thePlayer.tsp_bh_killgoal = bh_killgoal;
		
		bh_roundTimer = 0;
	}
	
	override void WorldTick()
	{
		if ( tsp_gamemode != 1 )
		{	
			Destroy();
			return;
		}
		
		if ( bh_flashAmount > 0.0 )
		{
			bh_flashAmount -= 0.1;
		}
		
		if ( bh_readyFrame != -1 && bh_readyFrame < 14 )
		{
			if ( bh_readyFrame > 10 && bh_readyFrame < 12 )
			{
				bh_readyFrame+=0.1;
			}
			else
			{
				bh_readyFrame++;
			}
			if ( bh_readyFrame == 14 )
			{
				bh_readyFrame = -1;
			}
		}
		
		if ( bh_goFrame != -1 && bh_goFrame < 12 )
		{
			if ( bh_goFrame > 8 && bh_goFrame < 10 )
			{
				bh_goFrame+=0.1;
			}
			else
			{
				bh_goFrame++;
			}
			if ( bh_goFrame == 12 )
			{
				bh_goFrame = -1;
			}
		}
		
		if ( bh_gameSetFrame != -1 && bh_gameSetFrame < 14 )
		{
			if ( bh_gameSetFrame >= 6 && bh_gameSetFrame < 7 )
			{
				bh_gameSetFrame+=0.03;
			}
			else
			{
				bh_gameSetFrame++;
			}
			if ( bh_gameSetFrame >= 14 )
			{
				bh_gameSetFrame = -1;
			}
		}
		
		if ( bh_roundOver )
		{
			if ( bh_muteFade < 1.0 )
			{
				bh_muteFade += 0.01;
			}
			Shader.SetUniform1f(players[consoleplayer], "TSP_Muted", "fadeAmount", bh_muteFade);
		}
		
		if ( bh_startWait > 0 ) 
		{
			bh_startWait--;
			switch(bh_startWait)
			{
				case 100:
					S_Sound("announcer/hunters/ailene/hunt", CHAN_VOICE);
					break;
				case 35:
					S_Sound("announcer/hunters/ailene/ready", CHAN_VOICE);
					S_Sound("bountyhunters/readysound", CHAN_BODY);
					bh_readyFrame = 0;
					break;
				case 0:
					S_Sound("announcer/hunters/ailene/go", CHAN_VOICE);
					S_Sound("bountyhunters/gosound", CHAN_BODY);
					bh_goFrame = 0;
					bh_roundStarted = true;
					break;
			}
			return;
		}
		
		bh_backgroundTimer++;
		
		if ( bh_spreeTime > 0 )
		{
			bh_spreeTime--;
			if ( bh_spreeTime == 0 )
			{
				bh_spreeTier = 0;
			}
		}
		
		if ( spawnDelay > 0 )
		{
			spawndelay--;
		}
		else
		{
			spawndelay = 35;
			
			if ( bh_enemies.Size() >= TSP_MAXMONSTERS_BH ) return;
			
			let spawnHere = getCloseSpawn(players[0].mo);
			
			if ( spawnHere != null && bh_spawnList.Size() > 0 )
			{
				Actor enemy = Actor.Spawn(bh_spawnList[0], spawnHere.pos, ALLOW_REPLACE);
				enemy.target = players[0].mo;
				enemy.SetStateLabel("See");
				Actor.Spawn("TeleportFog", spawnHere.pos, ALLOW_REPLACE);
				bh_enemies.Push(enemy);
				bh_spawnList.Delete(0,1);
			}
			else
			{
				Console.Printf("No deathmatch spawns found.");
			}
		}
		if ( bh_backgroundTimer % 35 == 0 ) //a second has passed!!!
		{
			if( bh_roundTimer > 0 )
			{
				bh_roundTimer--;
				switch(bh_roundTimer)
				{
					case 30: S_Sound("announcer/hunters/ailene/30secs",CHAN_VOICE); break;
					case 10: S_Sound("announcer/hunters/ailene/10secs",CHAN_VOICE); break;
					case 5: S_Sound("announcer/hunters/ailene/5secs",CHAN_VOICE); break;
					case 4: S_Sound("announcer/hunters/ailene/4secs",CHAN_VOICE); break;
					case 3: S_Sound("announcer/hunters/ailene/3secs",CHAN_VOICE); break;
					case 2: S_Sound("announcer/hunters/ailene/2secs",CHAN_VOICE); break;
					case 1: S_Sound("announcer/hunters/ailene/1secs",CHAN_VOICE); break;
				}
				
				if ( bh_roundTimer == 0 )
				{
					BH_GameOver(false);
				}
			}
		}
			
		if ( bh_comboTime > 0 )
		{
			bh_comboTime--;
			if ( bh_comboTime == 1 )
			{
				S_Sound("bountyhunters/combocrystaldone", CHAN_BODY);
			}
		}
		
		if ( bh_roundTimer <= 0 )
		{
			bh_endtimer++;
			if( bh_endtimer >= (35*3) || players[0].cmd.buttons & BT_USE )
			{
				players[0].mo.ACS_ScriptCall("TSP_GotoNextLevel");
			}
		}
		
		if ( bh_curNote )
		{
			bh_curNote.Tick();
		}
		
		if ( bh_spreeScale > 0.0 )
		{
			bh_spreeScale /= 2;
		}
	}
	
	override void WorldThingDied(WorldEvent e)
	{
		if ( e.Thing == players[0].mo )
		{
			BH_GameOver(true);
		}
		else
		{
			let checkList = bh_enemies.Find(e.Thing);
			if ( checkList >= 0 )
			{
				bh_enemies.Delete(checkList, 1);
				bh_kills += 1;
				
				bh_spreeScale += 0.5;
				
				if ( bh_comboTime > 0 )
				{
					bh_comboKills++;
				}
				
				if ( !bh_overkill && bh_kills >= bh_killgoal )
				{
					bh_overkill = true;
					bh_curNote = new("TSP_BH_HudNotifcation");
					bh_curNote.text = "Kill Goal Reached!";
					bh_curNote.subtext = "Additional kills reward you with additional points!";
					//BH_GameOver(false);
				}
			}
			
			if ( e.Thing.target == players[0].mo )
			{
				bh_spreeTier++;
				if ( bh_spreeTier > bh_maxCombo )
				{
					bh_maxCombo = bh_spreeTier;
				}
				bh_spreeTime = 35*10;
			}
			
			double healthDropMult = 1.0 - clamp(players[0].mo.health / 75., 0.0, 1.0);
			double ammoDropMult = 1.0 - clamp(players[0].mo.Distance3D(e.Thing) / 512., 0.0, 1.0);
			
			int getHealth = e.Thing.health*healthDropMult;
			while ( getHealth < 0 )
			{
				getHealth += 3;
				let zooper = Actor.Spawn("TSP_BH_HealthZooper", e.Thing.pos + (frandom(-3,3), frandom(-3,3), frandom(0,6)));
				zooper.vel = (frandom(-6,6), frandom(-6,6), frandom(3,9));
			}
			int getAmmo = (e.Thing.GetSpawnHealth()/5)*ammoDropMult;
			while ( getAmmo > 0 )
			{
				getAmmo -= 3;
				let zooper = Actor.Spawn("TSP_BH_AmmoZooper", e.Thing.pos + (frandom(-3,3), frandom(-3,3), frandom(0,6)));
				zooper.vel = (frandom(-6,6), frandom(-6,6), frandom(3,9));
			}
			
			float doMult = bh_comboTime ? 2.0 : 1.0;
			BH_GiveMoney(e.Thing.GetSpawnHealth() * doMult);
		}
	}
	
	clearscope string BH_GetTime()
	{
		int time = bh_roundTimer;
		int minutes = time/60;
		time -= minutes*60;
		string seconds = ""..time;
		if(time<10)
		{
			seconds = "0"..seconds;
		}
		return minutes..":"..seconds;
	}
	
	clearscope int BH_GetKillsLeft()
	{
		return max(bh_killgoal - bh_kills, 0);
	}
	
	const CLR_COMBOCLOCK = Color(255, 159, 255, 99);
	
	ui void BH_DrawHud(float ticFrac)
	{
		Font fnt_big = "tsp_bh_big";
		Font fnt_small = "tsp_bh_small";
		
		let bhHudTex = TexMan.CheckForTexture("graphics/hud/HUD_BH.png");
		Screen.DrawTexture(bhHudTex, false, 640,  14 + (116/2),
			DTA_CenterOffset, true);
		
		screen.DrawText(fnt_big, Font.CR_UNTRANSLATED, (screen.GetWidth()/2) - fnt_big.StringWidth(BH_GetTime())/2, 36, BH_GetTime());
		screen.DrawText(fnt_small, Font.CR_UNTRANSLATED, (screen.GetWidth()/2) - fnt_small.StringWidth(""..BH_GetKillsLeft())/2, 102, ""..BH_GetKillsLeft());
		
		if ( bh_spreeTime > 0 )
		{
			float spreeScaleTarg = (bh_spreeScale / 2);
			float spreeScale = 1.0 + ( bh_spreeScale + (spreeScaleTarg - bh_spreeScale) * ticFrac );
			screen.DrawText(fnt_big, Font.CR_UNTRANSLATED, screen.GetWidth() - 20 - fnt_big.StringWidth(bh_spreeTier.."x") * spreeScale, 296, bh_spreeTier.."x", DTA_ScaleX, spreeScale, DTA_ScaleY, spreeScale);
		}
		
		if ( bh_comboTime > 0 )
		{
			float comboAlpha = bh_comboTime <= (35*5) ? abs(sin((level.maptime + ticFrac) * 10)) : 1.0;
			let bhClock = TexMan.CheckForTexture("graphics/bh/comboclock.png");
			screen.DrawTexture(bhClock, false, 16,  296, DTA_Color, CLR_COMBOCLOCK);
			screen.DrawText("tsp_bold", Font.CR_UNTRANSLATED, 16 + 48, 296, ""..int(ceil(bh_comboTime/35.)), DTA_Color, CLR_COMBOCLOCK, DTA_Alpha, comboAlpha);
		}
		
		if ( bh_readyFrame != -1 )
		{
			string texName = String.Format("graphics/bh/BH_RDY%02d.png", bh_readyFrame);
			let getReadyTex = TexMan.CheckForTexture(texName);
			Screen.DrawTexture(getReadyTex, false, screen.GetWidth()/2, screen.GetHeight()/2,
				DTA_CenterOffset, true);
		}
		
		if ( bh_goFrame != -1 )
		{
			string texName = String.Format("graphics/bh/BH_GO%02d.png", bh_goFrame);
			let getReadyTex = TexMan.CheckForTexture(texName);
			Screen.DrawTexture(getReadyTex, false, screen.GetWidth()/2, screen.GetHeight()/2,
				DTA_CenterOffset, true);
		}
		
		if ( bh_gameSetFrame != -1 )
		{
			string texName = String.Format(bh_wonRound ? "graphics/bh/BH_WIN%02d.png" : "graphics/bh/BH_END%02d.png", bh_gameSetFrame);
			let getReadyTex = TexMan.CheckForTexture(texName);
			Screen.DrawTexture(getReadyTex, false, screen.GetWidth()/2, screen.GetHeight()/2,
				DTA_CenterOffset, true);
		}
		
		if ( bh_curNote )
		{
			Font daBigFont = "tsp_bold";
			Font daSmallFont = "tsp_small";
			
			bool firstHalf = (bh_curNote.GetTime(ticFrac) < 0.5);
			float daTime = firstHalf ? bh_curNote.GetTime(ticFrac) / 0.5 : (bh_curNote.GetTime(ticFrac) - 0.5) / 0.5;
			int xTop = firstHalf ? ease_outExpo(daTime) * screen.GetWidth()/2 : screen.GetWidth()/2 + (ease_inExpo(daTime) * screen.GetWidth()/2);
			int xBottom = firstHalf ? screen.GetWidth() - ease_outExpo(daTime) * screen.GetWidth()/2 : screen.GetWidth()/2 - (ease_inExpo(daTime) * screen.GetWidth()/2);
			
			screen.DrawText(daBigFont, Font.CR_UNTRANSLATED, xTop - daBigFont.StringWidth(bh_curNote.text)/2, (screen.GetHeight()/2)-daBigFont.GetHeight(), bh_curNote.text);
			screen.DrawText(daSmallFont, Font.CR_UNTRANSLATED, xBottom - daSmallFont.StringWidth(bh_curNote.subtext)/2, (screen.GetHeight()/2), bh_curNote.subtext,
				DTA_Color, Color(255, 155, 255, 220));
		}
	}
		
	override void RenderOverlay(RenderEvent e)
	{
		if ( bh_flashAmount )
		{
			screen.Dim("#36DCA0", bh_flashAmount, 0, 0, screen.GetWidth(), screen.GetHeight());
		}
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{
		if ( e.Name == "DEBUG_FORCEEND" )
		{
			BH_GameOver(e.args[0]);
		}
		else if ( e.Name == "DEBUG_SETKILLS" )
		{
			bh_kills = e.args[0];
		}
	}
}

Class TSP_BountyHunters_LevelEditor : LevelPostProcessor
{
	protected void Apply(Name checksum, String mapname)
	{
		if (tsp_gamemode == 1)
		{
			for (int i = 0; i < 65535; i ++)
			{
				if (GetThingEdNum(i) == 11)
				{
					SetThingEdNum(i, 24800);
				}
			}
		}
	}
}