Class TSP_BountyHunters_EnemySpawn : Actor
{	
	Default
	{
		+NOINTERACTION
	}
	
	bool CheckSpaceFree()
	{
		BlockThingsIterator it = BlockThingsIterator.Create(self, 192);
		Actor mo;

		while (it.Next())
		{
			mo = it.thing;
			if ( !mo || !mo.bSolid || Distance2D(mo)-mo.Radius > 192 )
				continue;

			return false;
		}
		
		return true;
	}
}

Class TSP_BH_Zooper : Actor
{
	Default
	{
		+BRIGHT
	}
	
	int grabRadius;
	int mineSpeeden;
	bool movingToMeet;
	
	override void Tick()
	{
		super.Tick();
		
		if(Distance3D(players[0].mo)<32)
		{
			DoShit(players[0].mo);
			Destroy();
			return;
		}
		
		if ( movingToMeet )
		{
			if ( mineSpeeden < 30 )
			{
				mineSpeeden++;
			}
			Vel3DFromAngle(mineSpeeden, AngleTo(players[0].mo), -atan2(players[0].mo.pos.z+24 - pos.z,Distance2D(players[0].mo)));
		}
		
		if ( players[0].mo!=null && players[0].mo.health > 0 && Distance3D(players[0].mo) < grabradius )
		{
			movingToMeet = true;
			bNoClip = true;
			bNoGravity = true;
		}
		
		if ( grabradius<1024 )
		{
			grabradius+=4;
		}
	}
	
	virtual void DoShit (Actor theFella) {}
	
	States
	{
		Spawn:
			BHPU A -1;
			Stop;
	}
}

Class TSP_BH_HealthZooper : TSP_BH_Zooper
{
	States
	{
		Spawn:
			BHPU A -1;
			Stop;
	}
	
	override void DoShit (Actor theFella)
	{
		theFella.GiveBody(3, 100);
	}
}

Class TSP_BH_AmmoZooper : TSP_BH_Zooper
{
	States
	{
		Spawn:
			BHPU B -1;
			Stop;
	}
	
	override void DoShit (Actor theFella)
	{
		let thePlayer = PlayerPawn(theFella);
		if ( !thePlayer ) return;
		
		thePlayer.A_StartSound("bh/pickup/ammo", 32, CHANF_OVERLAP, 0.5, pitch: frandom(0.8,1.2));
		for ( let it = thePlayer.Inv; it != null; it = it.Inv )
		{
			if ( it is "Weapon" )
			{
				let weapon = Weapon(it);
				if ( weapon.ammotype1 != null )
				{
					thePlayer.GiveInventory(weapon.ammotype1, 1);
				}
			}
		}
	}
}

Class TSP_BHHandler : EventHandler
{
	int spawnDelay;
	int bh_startWait;
	int bh_backgroundTimer; // used to track the overall time of the round
	int bh_roundTimer;
	int bh_endtimer;
	
	int bh_comboTier;
	int bh_comboTime;
	
	Array<TSP_BountyHunters_EnemySpawn > bh_spawns;
	Array<Actor > bh_enemies;
	TSP_BountyHunters_EnemySpawn bh_prevSpawn;
	
	int bh_maxCombo;
	int bh_kills;
	int bh_killgoal;
	
	bool bh_roundStarted;
	
	Array<String > bh_spawnList;
	
	mixin TSP_HiResBase;
	
	static const string bh_spawnOrder[] =
	{
		"Zombieman",
		"DoomImp",
		"ShotgunGuy",
		"Demon",
		"HellKnight",
		"Cacodemon",
		"Revenant",
		"Fatso"
	};
	
	void BH_AddTime(int amt)
	{
		bh_roundTimer += amt;
		S_Sound("bountyhunters/timecrystal",CHAN_AUTO);
		S_Sound("announcer/hunters/ailene/timeext",CHAN_VOICE);
	}
	
	override void OnRegister()
	{
		if ( tsp_gamemode != 1 )
		{	
			return;
		}
		
		bh_spawns.Clear();
		bh_enemies.Clear();
		
		bh_spawnList.Clear();
		
		for ( int i = 0; i < bh_spawnOrder.size()+8; i++ )
		{
			for ( int addMon = 0; addMon < 1 + min(i, bh_spawnOrder.size()-1); addMon++ )
			{
				for ( int g = 0; g < 1 + min(max(i-addMon, 0), 4); g++ )
				{
					bh_spawnList.Push(bh_spawnOrder[min(addMon, bh_spawnOrder.size()-1)]);
				}
			}
		}
		
		bh_killgoal = 50;//bh_spawnList.size();
		
		/*for ( int i = 0; i < 35; i++ )
		{
			bh_spawnList.Push(bh_spawnOrder[bh_spawnOrder.Size()-1]);
		}*/
		
		/*Console.Printf("Bounty Hunters Spawns:");
		for ( int v = 0; v < bh_spawnList.Size(); v++ )
		{
			Console.Printf("--- "..bh_spawnList[v]);
		}*/
	}
	
	override void WorldLoaded(WorldEvent e)
	{
		Console.Printf("do start shit");
		
		if ( tsp_gamemode != 1 )
		{	
			Destroy();
			return;
		}
		
		bh_startWait = 35*3;
		bh_roundTimer = 60*2;
		
		bh_readyFrame = -1;
		bh_goFrame = -1;
	}
	
	override void WorldThingSpawned(WorldEvent e)
	{
		if ( e.Thing is "TSP_BountyHunters_EnemySpawn" )
		{
			Console.Printf("Made new spawn");
			bh_spawns.Push(TSP_BountyHunters_EnemySpawn(e.Thing));
			return;
		}
		
		if ( bh_roundStarted == true && e.Thing is "TSP_CustomInventory" )
		{
			e.Thing.Destroy();
		}
	}
	
	TSP_BountyHunters_EnemySpawn getCloseSpawn(Actor closeToMe)
	{
		TSP_BountyHunters_EnemySpawn theReturn;
		int lastDist = -1;
		for ( int i = 0; i < bh_spawns.Size(); i++ )
		{
			let newSpawn = bh_spawns[i];
			if ( bh_prevSpawn != newSpawn && (closeToMe.Distance3D(newSpawn) < lastDist || lastDist == -1) && newSpawn.CheckSpaceFree() )
			{
				lastDist = closeToMe.Distance3D(newSpawn);
				theReturn = newSpawn;
			}
		}
		
		bh_prevSpawn = theReturn;
		return theReturn;
	}
	
	void BH_GameOver(bool died = false)
	{
		TSP_PlayerPawn_ZSCBase thePlayer = TSP_PlayerPawn_ZSCBase(players[0].mo);
		
		S_Sound("announcer/hunters/ailene/gameover",CHAN_VOICE);
		level.setFrozen(true);
		players[0].mo.vel = (0,0,0);
		players[0].mo.viewbob = 0;
		for ( int i = -200; i < 200; i++ )
		{
			let pSprite = players[0].GetPSprite(i);
			if ( pSprite != null )
			{
				pSprite.Tics = -1;
			}
		}
		
		thePlayer.tsp_bh_kills = bh_kills;
		
		double killMult = bh_kills / double(bh_killgoal);
		double timeBonus = died ? 0 : bh_roundTimer/60.;
		
		double finalScore = killMult + timeBonus;
		
		thePlayer.tsp_bh_rating = finalScore;
		
		S_Sound("announcer/hunters/ailene/gameover",CHAN_VOICE);
		bh_roundTimer = 0;
	}
	
	float bh_readyFrame; float bh_goFrame;
	
	override void WorldTick()
	{
		if ( tsp_gamemode != 1 )
		{	
			Destroy();
			return;
		}
		
		if ( bh_readyFrame != -1 && bh_readyFrame < 14 )
		{
			if ( bh_readyFrame > 10 && bh_readyFrame < 12 )
			{
				bh_readyFrame+=0.1;
			}
			else
			{
				bh_readyFrame++;
			}
			if ( bh_readyFrame == 14 )
			{
				bh_readyFrame = -1;
			}
		}
		
		if ( bh_goFrame != -1 && bh_goFrame < 12 )
		{
			if ( bh_goFrame > 8 && bh_goFrame < 10 )
			{
				bh_goFrame+=0.1;
			}
			else
			{
				bh_goFrame++;
			}
			if ( bh_goFrame == 12 )
			{
				bh_goFrame = -1;
			}
		}
		
		if ( bh_startWait > 0 ) 
		{
			bh_startWait--;
			switch(bh_startWait)
			{
				case 100:
					S_Sound("announcer/hunters/ailene/hunt", CHAN_VOICE);
					break;
				case 35:
					S_Sound("announcer/hunters/ailene/ready", CHAN_VOICE);
					S_Sound("bountyhunters/readysound", CHAN_BODY);
					bh_readyFrame = 0;
					break;
				case 0:
					S_Sound("announcer/hunters/ailene/go", CHAN_VOICE);
					S_Sound("bountyhunters/gosound", CHAN_BODY);
					bh_goFrame = 0;
					bh_roundStarted = true;
					break;
			}
			return;
		}
		
		bh_backgroundTimer++;
		
		if ( bh_comboTime > 0 )
		{
			bh_comboTime--;
			if ( bh_comboTime == 0 )
			{
				bh_comboTier = 0;
			}
		}
		
		if ( spawnDelay > 0 )
		{
			spawndelay--;
		}
		else
		{
			spawndelay = 35;
			
			if ( bh_enemies.Size() >= TSP_MAXMONSTERS_BH ) return;
			
			let spawnHere = getCloseSpawn(players[0].mo);
			
			if ( spawnHere != null && bh_spawnList.Size() > 0 )
			{
				Actor enemy = Actor.Spawn(bh_spawnList[0], spawnHere.pos, ALLOW_REPLACE);
				enemy.target = players[0].mo;
				enemy.SetStateLabel("See");
				Actor.Spawn("TeleportFog", spawnHere.pos, ALLOW_REPLACE);
				bh_enemies.Push(enemy);
				bh_spawnList.Delete(0,1);
			}
			else
			{
				Console.Printf("No deathmatch spawns found.");
			}
		}
		
		if( bh_roundTimer > 0 && bh_backgroundTimer % 35 == 0 ) //a second has passed!!!
		{
			bh_roundTimer--;
			switch(bh_roundTimer)
			{
				case 30: S_Sound("announcer/hunters/ailene/30secs",CHAN_VOICE); break;
				case 10: S_Sound("announcer/hunters/ailene/10secs",CHAN_VOICE); break;
				case 5: S_Sound("announcer/hunters/ailene/5secs",CHAN_VOICE); break;
				case 4: S_Sound("announcer/hunters/ailene/4secs",CHAN_VOICE); break;
				case 3: S_Sound("announcer/hunters/ailene/3secs",CHAN_VOICE); break;
				case 2: S_Sound("announcer/hunters/ailene/2secs",CHAN_VOICE); break;
				case 1: S_Sound("announcer/hunters/ailene/1secs",CHAN_VOICE); break;
			}
			
			if ( bh_roundTimer == 0 )
			{
				BH_GameOver(false);
			}
		}
		
		if ( bh_roundTimer <= 0 )
		{
			bh_endtimer++;
			if( bh_endtimer >= (35*5) || players[0].cmd.buttons & BT_USE )
			{
				players[0].mo.ACS_ScriptCall("TSP_GotoNextLevel");
			}
		}
	}
	
	override void WorldThingDied(WorldEvent e)
	{
		if ( e.Thing == players[0].mo )
		{
			BH_GameOver(true);
		}
		else
		{
			let checkList = bh_enemies.Find(e.Thing);
			if ( checkList >= 0 )
			{
				bh_enemies.Delete(checkList, 1);
				bh_kills += 1;
			}
			
			if ( e.Thing.target == players[0].mo )
			{
				bh_comboTier++;
				if ( bh_comboTier > bh_maxCombo )
				{
					bh_maxCombo = bh_comboTier;
				}
				bh_comboTime = 35*10;
				
				players[0].mo.score += e.Thing.GetSpawnHealth() * bh_comboTier;
			}
			
			double healthDropMult = 1.0 - clamp(players[0].mo.health / 75., 0.0, 1.0);
			double ammoDropMult = 1.0 - clamp(players[0].mo.Distance3D(e.Thing) / 512., 0.0, 1.0);
			Console.Printf(""..ammoDropMult);
			
			int getHealth = e.Thing.health*healthDropMult;
			while ( getHealth < 0 )
			{
				getHealth += 3;
				let zooper = Actor.Spawn("TSP_BH_HealthZooper", e.Thing.pos + (frandom(-3,3), frandom(-3,3), frandom(0,6)));
				zooper.vel = (frandom(-6,6), frandom(-6,6), frandom(3,9));
			}
			int getAmmo = (e.Thing.GetSpawnHealth()/5)*ammoDropMult;
			while ( getAmmo > 0 )
			{
				getAmmo -= 3;
				let zooper = Actor.Spawn("TSP_BH_AmmoZooper", e.Thing.pos + (frandom(-3,3), frandom(-3,3), frandom(0,6)));
				zooper.vel = (frandom(-6,6), frandom(-6,6), frandom(3,9));
			}
		}
	}
	
	clearscope string BH_GetTime()
	{
		int time = bh_roundTimer;
		int minutes = time/60;
		time -= minutes*60;
		string seconds = ""..time;
		if(time<10)
		{
			seconds = "0"..seconds;
		}
		return minutes..":"..seconds;
	}
	
	clearscope int BH_GetKillsLeft()
	{
		return bh_killgoal - bh_kills;
	}
	
	ui void BH_DrawHud(float ticFrac)
	{
		Font fnt_big = "tsp_bh_big";
		Font fnt_small = "tsp_bh_small";
		
		let bhHudTex = TexMan.CheckForTexture("graphics/hud/HUD_BH.png");
		Screen.DrawTexture(bhHudTex, false, 640,  14 + (116/2),
			DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720,
			DTA_CenterOffset, true);
		
		screen.DrawText(fnt_big, Font.CR_UNTRANSLATED, (screen.GetWidth()/2) - fnt_big.StringWidth(BH_GetTime())/2, 36, BH_GetTime());
		screen.DrawText(fnt_small, Font.CR_UNTRANSLATED, (screen.GetWidth()/2) - fnt_small.StringWidth(""..BH_GetKillsLeft())/2, 102, ""..BH_GetKillsLeft());
					
		if ( bh_readyFrame != -1 )
		{
			string texName = String.Format("graphics/bh/BH_RDY%02d.png", bh_readyFrame);
			let getReadyTex = TexMan.CheckForTexture(texName);
			Screen.DrawTexture(getReadyTex, false, 0, 0,
				DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720);
		}
		
		if ( bh_goFrame != -1 )
		{
			string texName = String.Format("graphics/bh/BH_GO%02d.png", bh_goFrame);
			let getReadyTex = TexMan.CheckForTexture(texName);
			Screen.DrawTexture(getReadyTex, false, 0, 0,
				DTA_VirtualWidth, 1280, DTA_VirtualHeight, 720);
		}
	}
		
	override void RenderOverlay(RenderEvent e)
	{
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{
		if ( e.Name == "SHUTTHEFUCKUPMYMONEYBITCH" )
		{
			BH_GameOver(false);
		}
	}
}

Class TSP_BountyHunters_LevelEditor : LevelPostProcessor
{
	protected void Apply(Name checksum, String mapname)
	{
		if (tsp_gamemode == 1)
		{
			for (int i = 0; i < 65535; i ++)
			{
				if (GetThingEdNum(i) == 11)
				{
					SetThingEdNum(i, 24800);
				}
			}
		}
	}
}