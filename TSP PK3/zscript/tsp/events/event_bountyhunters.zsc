Class TSP_BountyHunters_EnemySpawn : Actor
{	
	Default
	{
		+NOINTERACTION
	}
	
	bool CheckSpaceFree()
	{
		BlockThingsIterator it = BlockThingsIterator.Create(self, 192);
		Actor mo;

		while (it.Next())
		{
			mo = it.thing;
			if ( !mo || !mo.bSolid || Distance2D(mo)-mo.Radius > 192 )
				continue;

			return false;
		}
		
		return true;
	}
}

Class TSP_BHHandler : EventHandler
{
	int spawnDelay;
	int bh_startWait;
	int bh_backgroundTimer; // used to track the overall time of the round
	int bh_roundTimer;
	int bh_endtimer;
	
	int bh_comboTier;
	int bh_comboTime;
	
	Array<TSP_BountyHunters_EnemySpawn > bh_spawns;
	Array<Actor > bh_enemies;
	TSP_BountyHunters_EnemySpawn bh_prevSpawn;
	
	int bh_maxCombo;
	int bh_kills;
	int bh_killgoal;
	
	Array<String > bh_spawnList;
	
	static const string bh_spawnOrder[] =
	{
		"Zombieman",
		"DoomImp",
		"ShotgunGuy",
		"Demon",
		"HellKnight",
		"Cacodemon",
		"Revenant",
		"Fatso"
	};
	
	void BH_AddTime(int amt)
	{
		bh_roundTimer += amt;
		S_Sound("bountyhunters/timecrystal",CHAN_AUTO);
		S_Sound("announcer/hunters/ailene/timeext",CHAN_VOICE);
	}
	
	override void OnRegister()
	{
		if ( tsp_gamemode != 1 )
		{	
			return;
		}
		
		bh_spawns.Clear();
		bh_enemies.Clear();
		
		bh_spawnList.Clear();
		
		for ( int i = 0; i < bh_spawnOrder.size()+1; i++ ) //uhhhhhh fix this later idk
		{
			int maxSize = bh_spawnOrder.Size()-1;
			//for ( int v = 0; v < 3; v++ )
			{
				for ( int g = 0; g < 5; g++ )
				{
					int spawnInt = clamp(i-g, 0, min(maxSize, i));
					bh_spawnList.Push(bh_spawnOrder[spawnInt]);
				}
			}
		}
		
		bh_killgoal = bh_spawnList.size();
		
		for ( int i = 0; i < 35; i++ )
		{
			bh_spawnList.Push(bh_spawnOrder[bh_spawnOrder.Size()-1]);
		}
		
		/*Console.Printf("Bounty Hunters Spawns:");
		for ( int v = 0; v < bh_spawnList.Size(); v++ )
		{
			Console.Printf("--- "..bh_spawnList[v]);
		}*/
	}
	
	override void WorldLoaded(WorldEvent e)
	{
		Console.Printf("do start shit");
		
		if ( tsp_gamemode != 1 )
		{	
			Destroy();
			return;
		}
		
		bh_startWait = 35*3;
		bh_roundTimer = 60*2;
	}
	
	override void WorldThingSpawned(WorldEvent e)
	{
		if ( e.Thing is "TSP_BountyHunters_EnemySpawn" )
		{
			Console.Printf("Made new spawn");
			bh_spawns.Push(TSP_BountyHunters_EnemySpawn(e.Thing));
		}
	}
	
	TSP_BountyHunters_EnemySpawn getCloseSpawn(Actor closeToMe)
	{
		TSP_BountyHunters_EnemySpawn theReturn;
		int lastDist = -1;
		for ( int i = 0; i < bh_spawns.Size(); i++ )
		{
			let newSpawn = bh_spawns[i];
			if ( bh_prevSpawn != newSpawn && (closeToMe.Distance3D(newSpawn) < lastDist || lastDist == -1) && newSpawn.CheckSpaceFree() )
			{
				lastDist = closeToMe.Distance3D(newSpawn);
				theReturn = newSpawn;
			}
		}
		
		bh_prevSpawn = theReturn;
		return theReturn;
	}
	
	void BH_GameOver(bool died = false)
	{
		TSP_PlayerPawn_ZSCBase thePlayer = TSP_PlayerPawn_ZSCBase(players[0].mo);
		thePlayer.tsp_bh_kills = bh_kills;
		
		double killMult = bh_kills / double(bh_killgoal);
		double timeBonus = died ? 0 : bh_roundTimer/60.;
		
		double finalScore = killMult + timeBonus;
		
		thePlayer.tsp_bh_rating = finalScore;
		
		S_Sound("announcer/hunters/ailene/gameover",CHAN_VOICE);
		bh_roundTimer = 0;
	}
	
	override void WorldTick()
	{
		if ( tsp_gamemode != 1 )
		{	
			Destroy();
			return;
		}
		
		if ( bh_startWait > 0 ) 
		{
			bh_startWait--;
			switch(bh_startWait)
			{
				case 100:
					S_Sound("announcer/hunters/ailene/hunt", CHAN_VOICE);
					break;
				case 35:
					S_Sound("announcer/hunters/ailene/ready", CHAN_VOICE);
					break;
				case 0:
					S_Sound("announcer/hunters/ailene/go", CHAN_VOICE);
					break;
			}
			return;
		}
		
		bh_backgroundTimer++;
		
		if ( bh_comboTime > 0 )
		{
			bh_comboTime--;
			if ( bh_comboTime == 0 )
			{
				bh_comboTier = 0;
			}
		}
		
		if ( spawnDelay > 0 )
		{
			spawndelay--;
		}
		else
		{
			spawndelay = 35;
			
			if ( bh_enemies.Size() >= TSP_MAXMONSTERS_BH ) return;
			
			let spawnHere = getCloseSpawn(players[0].mo);
			
			if ( spawnHere != null && bh_spawnList.Size() > 0 )
			{
				Actor enemy = Actor.Spawn(bh_spawnList[0], spawnHere.pos, ALLOW_REPLACE);
				enemy.target = players[0].mo;
				enemy.SetStateLabel("See");
				Actor.Spawn("TeleportFog", spawnHere.pos, ALLOW_REPLACE);
				bh_enemies.Push(enemy);
				bh_spawnList.Delete(0,1);
			}
			else
			{
				Console.Printf("No deathmatch spawns found.");
			}
		}
		
		if( bh_roundTimer > 0 && bh_backgroundTimer % 35 == 0 ) //a second has passed!!!
		{
			bh_roundTimer--;
			switch(bh_roundTimer)
			{
				case 30: S_Sound("announcer/hunters/ailene/30secs",CHAN_VOICE); break;
				case 10: S_Sound("announcer/hunters/ailene/10secs",CHAN_VOICE); break;
				case 5: S_Sound("announcer/hunters/ailene/5secs",CHAN_VOICE); break;
				case 4: S_Sound("announcer/hunters/ailene/4secs",CHAN_VOICE); break;
				case 3: S_Sound("announcer/hunters/ailene/3secs",CHAN_VOICE); break;
				case 2: S_Sound("announcer/hunters/ailene/2secs",CHAN_VOICE); break;
				case 1: S_Sound("announcer/hunters/ailene/1secs",CHAN_VOICE); break;
			}
			
			if ( bh_roundTimer == 0 )
			{
				S_Sound("announcer/hunters/ailene/gameover",CHAN_VOICE);
				level.setFrozen(true);
				players[0].mo.vel = (0,0,0);
				players[0].mo.viewbob = 0;
				for ( int i = -200; i < 200; i++ )
				{
					let pSprite = players[0].GetPSprite(i);
					if ( pSprite != null )
					{
						pSprite.Tics = -1;
					}
				}
			}
		}
		
		if ( bh_roundTimer <= 0 )
		{
			bh_endtimer++;
			if( bh_endtimer >= (35*5) )
			{
				players[0].mo.ACS_ScriptCall("TSP_GotoNextLevel");
			}
		}
	}
	
	override void WorldThingDied(WorldEvent e)
	{
		if ( e.Thing == players[0].mo )
		{
			BH_GameOver(true);
		}
		else
		{
			let checkList = bh_enemies.Find(e.Thing);
			if ( checkList >= 0 )
			{
				bh_enemies.Delete(checkList, 1);
				bh_kills += 1;
			}
			
			if ( e.Thing.target == players[0].mo )
			{
				bh_comboTier++;
				if ( bh_comboTier > bh_maxCombo )
				{
					bh_maxCombo = bh_comboTier;
				}
				bh_comboTime = 35*10;
				
				players[0].mo.score += e.Thing.GetSpawnHealth() * bh_comboTier;
			}
		}
	}
		
	override void RenderOverlay(RenderEvent e)
	{
		int time = bh_roundTimer;
		int minutes = time/60;
		time -= minutes*60;
		string seconds = ""..time;
		if(time<10)
		{
			seconds = "0"..seconds;
		}
		string printTime = minutes..":"..seconds;
		string scorePrint = "Kills: "..bh_kills.."/"..bh_killgoal;
		
		screen.DrawText(BigFont, bh_startWait > 0 ? Font.FindFontColor("Grey") : Font.FindFontColor("TSPYeller"),
			160-BigFont.StringWidth(printTime)/2, 4, printTime, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
		screen.DrawText(SmallFont, Font.FindFontColor("Grey"),
			160-SmallFont.StringWidth(scorePrint)/2, 24, scorePrint, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
		//screen.DrawText(SmallFont, Font.CR_WHITE, 160-SmallFont.StringWidth(scoredisplay)/2, 4+BigFont.GetHeight()+2, scoredisplay, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
		
		double screenLeftX = -floor((screen.GetWidth() * (240.0 / screen.GetHeight()) - 320) / 2);
		double screenRightX = 320 + -screenLeftX;
		
		let scoreBarFront = TexMan.CheckForTexture("graphics/bh/scoremult_fg.png");
		let scoreBarBack = TexMan.CheckForTexture("graphics/bh/scoremult_bg.png");
		
		//if ( bh_comboTier >= 2 )
		{
			string scoreMult = ""..bh_comboTier;
			int scoreX = screenRightX - 32;
			screen.DrawText(BigFont, Font.CR_YELLOW, scoreX-BigFont.StringWidth(scoreMult), 120 - BigFont.GetHeight(), ""..bh_comboTier, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
			screen.DrawText(SmallFont, Font.CR_YELLOW, scoreX+2, 120 - SmallFont.GetHeight(), "x", DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
			
			double barLength = 24 * (bh_comboTime/double(35*10));
			Screen.DrawTexture(scoreBarBack, false, scoreX - 16, 120 + 2,
				DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
			Screen.DrawTexture(scoreBarFront, false, scoreX - 16, 120 + 2,
				DTA_VirtualWidth, 320, DTA_VirtualHeight, 240,
				DTA_SrcWidth, barLength, DTA_DestWidthF, barLength);
		}
		
		if ( bh_endtimer > 0 )
		{
			screen.DrawText(BigFont, Font.CR_YELLOW, 80-BigFont.StringWidth("GAME OVER")/2, 60-8, "GAME OVER", DTA_VirtualWidth, 160, DTA_VirtualHeight, 120);
		}
	}
}

Class TSP_BountyHunters_LevelEditor : LevelPostProcessor
{
	protected void Apply(Name checksum, String mapname)
	{
		if (tsp_gamemode == 1)
		{
			for (int i = 0; i < 65535; i ++)
			{
				if (GetThingEdNum(i) == 11)
				{
					SetThingEdNum(i, 24800);
				}
			}
		}
	}
}